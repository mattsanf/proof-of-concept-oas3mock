{
  "Attachment": {
    "type": "object",
    "required": [
      "fileId",
      "relatedId",
      "relatedType"
    ],
    "properties": {
      "id": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "fileId": {
        "description": "Linked File object id",
        "type": "string"
      },
      "relatedType": {
        "description": "Linked object type",
        "type": "string",
        "enum": [
          "customer",
          "dispute",
          "gateway-timeline-comment",
          "invoice",
          "note",
          "organization",
          "payment",
          "plan",
          "product",
          "subscription",
          "transaction",
          "customer-timeline-comment",
          "transaction-timeline-comment",
          "order-timeline-comment"
        ]
      },
      "relatedId": {
        "description": "Linked object Id",
        "type": "string"
      },
      "name": {
        "description": "The Original Attachment name",
        "type": "string"
      },
      "description": {
        "description": "The Attachment description",
        "type": "string"
      },
      "createdTime": {
        "description": "Creation date/time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Latest update date/time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 3,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/FileLink"
            },
            {
              "$ref": "#/components/schemas/AttachmentResourceLink"
            }
          ]
        }
      },
      "_embedded": {
        "type": "array",
        "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/FileEmbed"
            }
          ]
        }
      }
    }
  },
  "BBANType": {
    "description": "BBAN type object",
    "allOf": [
      {
        "$ref": "#/components/schemas/BankAccountCreatePlain"
      },
      {
        "type": "object",
        "required": [
          "customerId",
          "accountNumber",
          "routingNumber",
          "accountType",
          "address"
        ],
        "properties": {
          "customerId": {
            "description": "The Customer's ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "accountNumber": {
            "description": "Bank's Account Number.",
            "type": "string",
            "pattern": "^[0-9]+$"
          },
          "routingNumber": {
            "description": "Bank's Routing Number.",
            "type": "string",
            "pattern": "^[0-9]+$"
          },
          "accountType": {
            "description": "Bank's Account type.",
            "type": "string",
            "enum": [
              "checking",
              "savings",
              "other"
            ]
          },
          "bankName": {
            "description": "Bank's name.",
            "type": "string"
          },
          "bic": {
            "description": "Bank Identifier Code.",
            "type": "string"
          },
          "address": {
            "description": "The Address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "status": {
            "description": "Bank Account status.",
            "type": "string",
            "enum": [
              "active",
              "deactivated"
            ]
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          }
        }
      }
    ]
  },
  "IBANType": {
    "description": "IBAN type object",
    "allOf": [
      {
        "$ref": "#/components/schemas/BankAccountCreatePlain"
      },
      {
        "type": "object",
        "required": [
          "customerId",
          "accountNumber",
          "address"
        ],
        "properties": {
          "customerId": {
            "description": "The Customer's ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "accountNumber": {
            "description": "Bank's Account Number. Detailed information about all ISO 13616-compliant national IBAN formats is available\nin [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban).\n",
            "type": "string"
          },
          "bankName": {
            "description": "Bank's name.",
            "type": "string"
          },
          "bic": {
            "description": "Bank Identifier Code.",
            "type": "string"
          },
          "address": {
            "description": "The Address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "status": {
            "description": "Bank Account status.",
            "type": "string",
            "enum": [
              "active",
              "deactivated"
            ]
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          }
        }
      }
    ]
  },
  "BankAccount": {
    "type": "object",
    "required": [
      "customerId"
    ],
    "properties": {
      "id": {
        "description": "The bank account identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "customerId": {
        "description": "The Customer's ID.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "method": {
        "description": "The method of payment instrument",
        "type": "string",
        "readOnly": true,
        "enum": [
          "bank-account"
        ]
      },
      "bankName": {
        "description": "Bank's name.",
        "type": "string"
      },
      "routingNumber": {
        "description": "Bank's Routing Number.",
        "type": "string"
      },
      "accountNumberType": {
        "description": "Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).",
        "type": "string",
        "default": "BBAN",
        "enum": [
          "BBAN",
          "IBAN"
        ]
      },
      "accountType": {
        "description": "Bank's Account type.",
        "type": "string",
        "enum": [
          "checking",
          "savings",
          "other"
        ]
      },
      "bic": {
        "description": "Bank Identifier Code",
        "type": "string"
      },
      "address": {
        "description": "The Address.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          }
        ]
      },
      "fingerprint": {
        "description": "A unique value to identify the Bank Account. It contains alphanumeric values.",
        "type": "string",
        "readOnly": true
      },
      "last4": {
        "description": "The last 4 digits of the bank account",
        "type": "string",
        "readOnly": true
      },
      "status": {
        "description": "Bank Account status",
        "type": "string",
        "enum": [
          "active",
          "deactivated"
        ]
      },
      "createdTime": {
        "description": "Bank Account created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Bank Account updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/CustomerLink"
            }
          ]
        }
      },
      "_embedded": {
        "type": "array",
        "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/CustomerEmbed"
            }
          ]
        }
      }
    }
  },
  "BankAccountCreatePlain": {
    "type": "object",
    "required": [
      "accountNumberType"
    ],
    "discriminator": {
      "propertyName": "accountNumberType",
      "mapping": {
        "BBAN": "#/components/schemas/BBANType",
        "IBAN": "#/components/schemas/IBANType"
      }
    },
    "properties": {
      "accountNumberType": {
        "description": "Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).",
        "type": "string",
        "default": "BBAN",
        "enum": [
          "IBAN",
          "BBAN"
        ]
      }
    }
  },
  "BankAccountCreateToken": {
    "type": "object",
    "required": [
      "customerId",
      "token"
    ],
    "properties": {
      "customerId": {
        "description": "The Customer's ID.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "token": {
        "description": "BankAccountToken ID.",
        "type": "string"
      },
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      }
    }
  },
  "Blacklist": {
    "type": "object",
    "required": [
      "type",
      "value"
    ],
    "properties": {
      "id": {
        "description": "The blacklist identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "type": {
        "description": "The blacklist type",
        "type": "string",
        "enum": [
          "payment-card",
          "bank-account",
          "customer-id",
          "email",
          "email-domain",
          "ip-address",
          "country",
          "fingerprint",
          "bin",
          "address"
        ]
      },
      "value": {
        "description": "The blacklist value",
        "type": "string"
      },
      "expirationTime": {
        "description": "The blacklist expiration time",
        "type": "string",
        "format": "date-time"
      },
      "createdTime": {
        "description": "The blacklist created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "The blacklist updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "Contact": {
    "type": "object",
    "properties": {
      "id": {
        "description": "The contact identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "customerId": {
        "description": "The contact customer ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "firstName": {
        "description": "The contact first name",
        "type": "string"
      },
      "lastName": {
        "description": "The contact last name",
        "type": "string"
      },
      "organization": {
        "description": "The contact organization",
        "type": "string"
      },
      "address": {
        "description": "The contact street address",
        "type": "string",
        "maxLength": 60
      },
      "address2": {
        "description": "The contact street address (second line)",
        "type": "string",
        "maxLength": 60
      },
      "city": {
        "description": "The contact city",
        "type": "string",
        "maxLength": 45
      },
      "region": {
        "description": "The contact region (state)",
        "type": "string",
        "maxLength": 45
      },
      "country": {
        "description": "The contact country ISO Alpha-2 code",
        "type": "string",
        "pattern": "^[A-Z]{2}$"
      },
      "postalCode": {
        "description": "The contact postal code",
        "type": "string",
        "maxLength": 10
      },
      "phoneNumbers": {
        "$ref": "#/components/schemas/ContactPhoneNumbers"
      },
      "emails": {
        "$ref": "#/components/schemas/ContactEmails"
      },
      "hash": {
        "description": "A hash that can be used to compare multiple contacts for identical attribute values, excluding id, customer id, createdTime, updatedTime.",
        "type": "string",
        "maxLength": 40,
        "example": "056ae6d97c788b9e98b049ebafd7b229bf852221",
        "readOnly": true
      },
      "createdTime": {
        "description": "The contact created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "The contact updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/CustomerLink"
            }
          ]
        }
      },
      "_embedded": {
        "type": "array",
        "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/CustomerEmbed"
            }
          ]
        }
      }
    }
  },
  "ContactEmails": {
    "description": "The list of emails",
    "type": "array",
    "items": {
      "type": "object",
      "required": [
        "label",
        "value"
      ],
      "properties": {
        "label": {
          "description": "The email label",
          "type": "string",
          "example": "main"
        },
        "value": {
          "description": "The email value",
          "type": "string",
          "example": "rebilly@example.com"
        },
        "primary": {
          "description": "True if email is primary",
          "type": "boolean",
          "example": true
        }
      }
    }
  },
  "ContactObject": {
    "type": "object",
    "properties": {
      "firstName": {
        "description": "The contact first name",
        "type": "string",
        "example": "Benjamin",
        "nullable": true
      },
      "lastName": {
        "description": "The contact last name",
        "type": "string",
        "example": "Franklin",
        "nullable": true
      },
      "organization": {
        "description": "The contact organization",
        "type": "string",
        "nullable": true,
        "example": null
      },
      "address": {
        "description": "The contact street address",
        "type": "string",
        "maxLength": 60,
        "example": "36 Craven St",
        "nullable": true
      },
      "address2": {
        "description": "The contact street address (second line)",
        "type": "string",
        "maxLength": 60,
        "nullable": true
      },
      "city": {
        "description": "The contact city",
        "type": "string",
        "maxLength": 45,
        "nullable": true,
        "example": "London"
      },
      "region": {
        "description": "The contact region (state)",
        "type": "string",
        "maxLength": 45,
        "nullable": true,
        "example": "London"
      },
      "country": {
        "description": "The contact country ISO Alpha-2 code",
        "type": "string",
        "pattern": "^[A-Z]{2}$",
        "nullable": true,
        "example": "GB"
      },
      "postalCode": {
        "description": "The contact postal code",
        "type": "string",
        "maxLength": 10,
        "nullable": true,
        "example": "WC2N 5NF"
      },
      "phoneNumbers": {
        "$ref": "#/components/schemas/ContactPhoneNumbers"
      },
      "emails": {
        "$ref": "#/components/schemas/ContactEmails"
      },
      "hash": {
        "description": "A hash that can be used to compare multiple contacts for identical attribute values",
        "type": "string",
        "maxLength": 40,
        "example": "056ae6d97c788b9e98b049ebafd7b229bf852221",
        "readOnly": true
      }
    }
  },
  "ContactPhoneNumbers": {
    "description": "The list of phone numbers",
    "type": "array",
    "items": {
      "type": "object",
      "required": [
        "label",
        "value"
      ],
      "properties": {
        "label": {
          "description": "The phone label",
          "type": "string",
          "example": "main"
        },
        "value": {
          "description": "The phone value",
          "type": "string",
          "example": "512-710-1640"
        },
        "primary": {
          "description": "True if phone is primary",
          "type": "boolean",
          "example": true
        }
      }
    }
  },
  "Coupon": {
    "type": "object",
    "description": "Coupons and Discounts",
    "required": [
      "discount",
      "issuedTime"
    ],
    "properties": {
      "redemptionCode": {
        "description": "Coupon's redemption code",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "discount": {
        "$ref": "#/components/schemas/Discount"
      },
      "restrictions": {
        "description": "Coupon restrictions",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CouponRestriction"
        }
      },
      "redemptionsCount": {
        "type": "integer",
        "description": "Coupon's redemptions count",
        "minimum": 0,
        "readOnly": true
      },
      "status": {
        "type": "string",
        "description": "If coupon enabled",
        "readOnly": true,
        "enum": [
          "draft",
          "issued",
          "expired"
        ]
      },
      "description": {
        "type": "string",
        "description": "Your coupon description. When it is not empty this is used for invoice discount item description,\notherwise the item's description uses coupon's redemptionCode like 'Coupon \"redemptionCode\"'\n"
      },
      "issuedTime": {
        "description": "Coupon's issued time (start time)",
        "type": "string",
        "format": "date-time"
      },
      "expiredTime": {
        "description": "Coupon's expire time (end time)",
        "type": "string",
        "format": "date-time"
      },
      "createdTime": {
        "description": "Coupon created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Coupon updated time.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "CouponExpiration": {
    "type": "object",
    "required": [
      "expiredTime"
    ],
    "properties": {
      "expiredTime": {
        "description": "The coupon's expiry time, must be greater than the issued time. Null or empty string will immediately expire the coupon.",
        "type": "string",
        "format": "date-time"
      }
    }
  },
  "CouponRedemption": {
    "type": "object",
    "description": "Coupons redemption log",
    "properties": {
      "id": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "redemptionCode": {
        "description": "Coupon's redemption code",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "customerId": {
        "description": "Customer's ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "additionalRestrictions": {
        "description": "Additional restrictions for coupon's redemptions",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RedemptionRestriction"
        }
      },
      "createdTime": {
        "description": "Coupon redeem time",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "canceledTime": {
        "description": "Coupon redemption canceled time",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "CouponRestriction": {
    "description": "Coupon restrictions",
    "type": "object",
    "discriminator": {
      "propertyName": "type"
    },
    "properties": {
      "type": {
        "description": "Coupon's restriction type",
        "type": "string",
        "enum": [
          "discounts-per-redemption",
          "minimum-order-amount",
          "redemptions-per-customer",
          "restrict-to-invoices",
          "restrict-to-plans",
          "restrict-to-subscriptions",
          "restrict-to-products",
          "total-redemptions"
        ]
      }
    },
    "required": [
      "type"
    ]
  },
  "discounts-per-redemption": {
    "description": "discounts-per-redemption restrictions",
    "allOf": [
      {
        "$ref": "#/components/schemas/CouponRestriction"
      },
      {
        "$ref": "#/components/schemas/RedemptionRestriction"
      },
      {
        "type": "object",
        "required": [
          "quantity"
        ],
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "Restriction quantity"
          }
        }
      }
    ]
  },
  "minimum-order-amount": {
    "description": "minimum-order-amount restrictions",
    "allOf": [
      {
        "$ref": "#/components/schemas/CouponRestriction"
      },
      {
        "$ref": "#/components/schemas/RedemptionRestriction"
      },
      {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Minimum order quantity"
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          }
        }
      }
    ]
  },
  "redemptions-per-customer": {
    "description": "Quantity per Customer restrictions",
    "allOf": [
      {
        "$ref": "#/components/schemas/CouponRestriction"
      },
      {
        "$ref": "#/components/schemas/RedemptionRestriction"
      },
      {
        "type": "object",
        "required": [
          "quantity"
        ],
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "Restriction value"
          }
        }
      }
    ]
  },
  "restrict-to-invoices": {
    "description": "restrict-to-invoices restrictions",
    "allOf": [
      {
        "$ref": "#/components/schemas/CouponRestriction"
      },
      {
        "$ref": "#/components/schemas/RedemptionRestriction"
      },
      {
        "type": "object",
        "required": [
          "invoiceIds"
        ],
        "properties": {
          "invoiceIds": {
            "type": "array",
            "description": "Invoice IDs coupon can be applied to",
            "items": {
              "type": "string"
            }
          }
        }
      }
    ]
  },
  "restrict-to-plans": {
    "description": "restrict-to-plans restrictions",
    "allOf": [
      {
        "$ref": "#/components/schemas/CouponRestriction"
      },
      {
        "$ref": "#/components/schemas/RedemptionRestriction"
      },
      {
        "type": "object",
        "required": [
          "planIds"
        ],
        "properties": {
          "planIds": {
            "type": "array",
            "description": "Plan IDs coupon can be applied to",
            "items": {
              "type": "string"
            }
          }
        }
      }
    ]
  },
  "restrict-to-products": {
    "description": "restrict-to-products restrictions",
    "allOf": [
      {
        "$ref": "#/components/schemas/CouponRestriction"
      },
      {
        "$ref": "#/components/schemas/RedemptionRestriction"
      },
      {
        "type": "object",
        "required": [
          "productIds"
        ],
        "properties": {
          "productIds": {
            "type": "array",
            "description": "Product IDs coupon can be applied to",
            "items": {
              "type": "string"
            }
          }
        }
      }
    ]
  },
  "restrict-to-subscriptions": {
    "description": "restrict-to-subscriptions restrictions",
    "allOf": [
      {
        "$ref": "#/components/schemas/CouponRestriction"
      },
      {
        "$ref": "#/components/schemas/RedemptionRestriction"
      },
      {
        "type": "object",
        "required": [
          "subscriptionIds"
        ],
        "properties": {
          "subscriptionIds": {
            "type": "array",
            "description": "Subscription IDs coupon can be applied to",
            "items": {
              "type": "string"
            }
          }
        }
      }
    ]
  },
  "total-redemptions": {
    "description": "total-redemptions restrictions",
    "allOf": [
      {
        "$ref": "#/components/schemas/CouponRestriction"
      },
      {
        "$ref": "#/components/schemas/RedemptionRestriction"
      },
      {
        "type": "object",
        "required": [
          "quantity"
        ],
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "Total redemptions quantity"
          }
        }
      }
    ]
  },
  "Discount": {
    "type": "object",
    "discriminator": {
      "propertyName": "type"
    },
    "properties": {
      "type": {
        "description": "Discount type",
        "type": "string",
        "enum": [
          "fixed",
          "percent"
        ]
      }
    }
  },
  "fixed": {
    "description": "Coupon fixed amount discount",
    "allOf": [
      {
        "$ref": "#/components/schemas/Discount"
      },
      {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "description": "Discount amount",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          }
        }
      }
    ]
  },
  "percent": {
    "description": "Coupon percent discount",
    "allOf": [
      {
        "$ref": "#/components/schemas/Discount"
      },
      {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "description": "Discount percent",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "exclusiveMinimum": true,
            "maximum": 100
          }
        }
      }
    ]
  },
  "InvoiceDiscount": {
    "type": "object",
    "readOnly": true,
    "properties": {
      "redemptionCode": {
        "description": "Coupon's redemption code",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "redemptionId": {
        "description": "Redemption ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "amount": {
        "description": "Total amount that was discounted by this Coupon",
        "type": "number",
        "format": "double"
      },
      "description": {
        "type": "string",
        "description": "Discount description"
      }
    }
  },
  "RedemptionRestriction": {
    "description": "Redemption restrictions",
    "type": "object",
    "discriminator": {
      "propertyName": "type"
    },
    "properties": {
      "type": {
        "description": "Redemption's additional restriction type",
        "type": "string",
        "enum": [
          "discounts-per-redemption",
          "minimum-order-amount",
          "restrict-to-invoices",
          "restrict-to-plans",
          "restrict-to-subscriptions",
          "restrict-to-products"
        ]
      }
    },
    "required": [
      "type"
    ]
  },
  "Credential": {
    "type": "object",
    "required": [
      "username",
      "password",
      "customerId"
    ],
    "properties": {
      "id": {
        "description": "The credential identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "username": {
        "description": "Credential's username",
        "type": "string"
      },
      "password": {
        "description": "The credential's password",
        "type": "string",
        "format": "password",
        "writeOnly": true
      },
      "customerId": {
        "description": "The credential's customer ID",
        "type": "string"
      },
      "expiredTime": {
        "description": "The credential's expired time",
        "type": "string",
        "format": "date-time"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/CustomerLink"
            }
          ]
        }
      }
    }
  },
  "CurrencyCode": {
    "type": "string",
    "description": "ISO 4217 alphabetic currency code",
    "minLength": 3,
    "maxLength": 3,
    "example": "USD"
  },
  "Customer": {
    "type": "object",
    "properties": {
      "id": {
        "description": "The customer identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "websiteId": {
        "description": "The website's ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "paymentToken": {
        "type": "string",
        "writeOnly": true,
        "description": "A write-only payment token; if supplied, it will be converted into a\npayment instrument and be set as the `defaultPaymentInstrument`. The\nvalue of this property will override the `defaultPaymentInstrument`\nin the case that both are supplied. The token may only be used once\nbefore it is expired.\n"
      },
      "defaultPaymentInstrument": {
        "$ref": "#/components/schemas/PaymentInstrument"
      },
      "createdTime": {
        "description": "The customer created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "The customer updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      },
      "primaryAddress": {
        "$ref": "#/components/schemas/ContactObject"
      },
      "averageValue": {
        "$ref": "#/components/schemas/CustomerAverageValue"
      },
      "paymentCount": {
        "description": "The number of approved payments for the customer",
        "readOnly": true,
        "type": "integer"
      },
      "lastPaymentTime": {
        "description": "The most recent time of an approved payment for the customer",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "lifetimeRevenue": {
        "$ref": "#/components/schemas/CustomerLifetimeRevenue"
      },
      "invoiceCount": {
        "description": "An auto-incrementing number based on the sequence of invoices. If set to 0, then this record is a Lead, otherwise is a Customer",
        "readOnly": true,
        "type": "integer"
      },
      "tags": {
        "description": "A list of customer's tags",
        "readOnly": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Tag"
        }
      },
      "revision": {
        "description": "The number of times the customer data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
        "type": "integer",
        "readOnly": true
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 3,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/NotesLink"
            },
            {
              "$ref": "#/components/schemas/DefaultPaymentInstrumentLink"
            },
            {
              "$ref": "#/components/schemas/LeadSourceLink"
            },
            {
              "$ref": "#/components/schemas/WebsiteLink"
            }
          ]
        }
      },
      "_embedded": {
        "type": "array",
        "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/LeadSourceEmbed"
            }
          ]
        }
      }
    }
  },
  "AuthenticationOptions": {
    "type": "object",
    "properties": {
      "passwordPattern": {
        "description": "Allowed password pattern",
        "type": "string"
      },
      "credentialTtl": {
        "description": "The default lifetime of the credential in seconds",
        "type": "integer"
      },
      "authTokenTtl": {
        "description": "The default lifetime of the auth-token in seconds",
        "type": "integer"
      },
      "resetTokenTtl": {
        "description": "The default lifetime of the reset-token in seconds",
        "type": "integer"
      },
      "otpRequired": {
        "description": "Should OTP be required to exchange token",
        "type": "boolean"
      }
    }
  },
  "AuthenticationToken": {
    "type": "object",
    "discriminator": {
      "propertyName": "mode"
    },
    "properties": {
      "token": {
        "description": "The token identifier string",
        "type": "string",
        "readOnly": true
      },
      "mode": {
        "description": "The token's generation mode",
        "type": "string",
        "enum": [
          "password",
          "passwordless"
        ],
        "writeOnly": true,
        "default": "password"
      },
      "otpRequired": {
        "description": "Should OTP be required to exchange this token",
        "type": "boolean"
      },
      "credentialId": {
        "description": "The credential's ID",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      }
    }
  },
  "AuthenticationTokenMetadata": {
    "type": "object",
    "properties": {
      "expiredTime": {
        "description": "Token's expired time",
        "type": "string",
        "format": "date-time"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "CustomerJWT": {
    "type": "object",
    "properties": {
      "id": {
        "description": "The session identifier string",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ],
        "readOnly": true
      },
      "type": {
        "description": "Session type",
        "type": "string",
        "readOnly": true,
        "enum": [
          "customer"
        ]
      },
      "token": {
        "description": "The session's token used for authentication",
        "type": "string",
        "readOnly": true
      },
      "invalidate": {
        "description": "Whether to invalidate token after exchange or not",
        "type": "boolean",
        "default": true,
        "example": true,
        "writeOnly": true
      },
      "oneTimePassword": {
        "description": "The one time password sent via an email. Should contain digits only.",
        "type": "string",
        "pattern": "^[0-9]{6}$",
        "example": "123456",
        "writeOnly": true
      },
      "customerId": {
        "description": "The customer's ID",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "createdTime": {
        "description": "Session created time",
        "type": "string",
        "format": "date-time",
        "readOnly": true
      },
      "updatedTime": {
        "description": "Session updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "expiredTime": {
        "description": "Session expired time. Defaults to one hour",
        "type": "string",
        "format": "date-time"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/CustomerLink"
        }
      }
    }
  },
  "password": {
    "required": [
      "username",
      "password"
    ],
    "allOf": [
      {
        "$ref": "#/components/schemas/AuthenticationToken"
      },
      {
        "properties": {
          "username": {
            "description": "The token's username",
            "type": "string"
          },
          "password": {
            "description": "The token's password",
            "type": "string",
            "format": "password",
            "writeOnly": true
          },
          "customerId": {
            "description": "The token's customer ID",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          }
        }
      },
      {
        "$ref": "#/components/schemas/AuthenticationTokenMetadata"
      }
    ]
  },
  "passwordless": {
    "required": [
      "customerId"
    ],
    "allOf": [
      {
        "$ref": "#/components/schemas/AuthenticationToken"
      },
      {
        "properties": {
          "customerId": {
            "description": "The token's customer ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          }
        }
      },
      {
        "$ref": "#/components/schemas/AuthenticationTokenMetadata"
      }
    ]
  },
  "CustomerAverageValue": {
    "type": "object",
    "readOnly": true,
    "properties": {
      "currency": {
        "description": "Merchant's reporting currency",
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "amount": {
        "description": "Average approved payment amount in Merchant's reporting currency",
        "type": "number",
        "format": "double"
      },
      "amountUsd": {
        "description": "Average approved payment amount in USD",
        "type": "number",
        "format": "double"
      }
    }
  },
  "CustomerLifetimeRevenue": {
    "type": "object",
    "readOnly": true,
    "properties": {
      "currency": {
        "description": "Merchant's reporting currency",
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "amount": {
        "description": "Revenue amount in Merchant's reporting currency",
        "type": "number",
        "format": "double"
      },
      "amountUsd": {
        "description": "Revenue amount in USD",
        "type": "number",
        "format": "double"
      }
    }
  },
  "CustomField": {
    "description": "A separate Custom Field schema",
    "type": "object",
    "required": [
      "type"
    ],
    "properties": {
      "name": {
        "description": "The name of the custom field",
        "type": "string",
        "readOnly": true
      },
      "type": {
        "description": "Type value    | Description\n------------- | -------------\narray         | An array of strings up to 255 characters, maximum size is 1000 elements\nboolean       | true or false\ndate          | String of format \"full-date\" (YYYY-MM-DD) from RFC-3339 (full-date)\ndatetime      | String of format \"date-time\" (YYYY-MM-DDTHH:MM:SSZ) from RFC-3339 (date-time)\ninteger       | Cardinal value of -2^31..2^31-1\nnumber        | Float value. It can take cardinal values also which are interpreted as float\nstring        | Regular string up to 255 characters\nmonetary      | A map of 3-letters currency code and amount, e.g. {\"currency\": \"EUR\", \"amount\": 25.30}\n",
        "type": "string",
        "enum": [
          "array",
          "boolean",
          "datetime",
          "integer",
          "number",
          "string",
          "monetary"
        ]
      },
      "description": {
        "description": "The custom field description",
        "type": "string"
      },
      "additionalSchema": {
        "description": "Additional parameters which can be added according to type:\n\nParameter Name | Types         | Description\n-------------- | ------------- | -------------\nallowedValues  | string, array | List of allowed values\nmaxLength      | string        | Maximum allowed length for the string, 255 by default, up to 4000\n"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "Dispute": {
    "type": "object",
    "required": [
      "currency",
      "transactionId",
      "postedTime",
      "type",
      "status",
      "reasonCode"
    ],
    "properties": {
      "id": {
        "description": "The dispute identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "customerId": {
        "description": "The dispute's customer ID",
        "type": "string",
        "readOnly": true
      },
      "transactionId": {
        "description": "The dispute's transaction ID",
        "type": "string"
      },
      "currency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "amount": {
        "description": "The dispute amount",
        "type": "number",
        "format": "double"
      },
      "acquirerReferenceNumber": {
        "description": "The dispute's acquirer reference number",
        "type": "string"
      },
      "reasonCode": {
        "description": "The dispute's reason code",
        "type": "string",
        "enum": [
          "1000",
          "10.1",
          "10.2",
          "10.3",
          "10.4",
          "10.5",
          "11.1",
          "11.2",
          "11.3",
          "12",
          "12.1",
          "12.2",
          "12.3",
          "12.4",
          "12.5",
          "12.6",
          "12.7",
          "13.1",
          "13.2",
          "13.3",
          "13.4",
          "13.5",
          "13.6",
          "13.7",
          "13.8",
          "13.9",
          "2",
          "30",
          "31",
          "35",
          "37",
          "40",
          "41",
          "42",
          "46",
          "47",
          "49",
          "50",
          "53",
          "54",
          "55",
          "57",
          "59",
          "60",
          "62",
          "7",
          "70",
          "71",
          "72",
          "73",
          "74",
          "75",
          "76",
          "77",
          "79",
          "8",
          "80",
          "81",
          "82",
          "83",
          "85",
          "86",
          "93",
          "00",
          "63",
          "A01",
          "A02",
          "A08",
          "F10",
          "F14",
          "F22",
          "F24",
          "F29",
          "C02",
          "C04",
          "C05",
          "C08",
          "C14",
          "C18",
          "C28",
          "C31",
          "C32",
          "M10",
          "M49",
          "P01",
          "P03",
          "P04",
          "P05",
          "P07",
          "P08",
          "P22",
          "P23",
          "R03",
          "R13",
          "M01",
          "FR1",
          "FR4",
          "FR6",
          "AL",
          "AP",
          "AW",
          "CA",
          "CD",
          "CR",
          "DA",
          "DP",
          "DP1",
          "EX",
          "IC",
          "IN",
          "IS",
          "LP",
          "N",
          "NA",
          "NC",
          "P",
          "RG",
          "RM",
          "RN1",
          "RN2",
          "SV",
          "TF",
          "TNM",
          "UA01",
          "UA02",
          "UA32",
          "UA99",
          "UA03",
          "UA10",
          "UA11",
          "UA12",
          "UA18",
          "UA20",
          "UA21",
          "UA22",
          "UA23",
          "UA28",
          "UA30",
          "UA31",
          "UA38",
          "duplicate",
          "fraudulent",
          "subscription_canceled",
          "product_unacceptable",
          "product_not_received",
          "unrecognized",
          "credit_not_processed",
          "customer_initiated",
          "incorrect_account_details",
          "insufficient_funds",
          "bank_cannot_process",
          "debit_not_authorized",
          "general"
        ]
      },
      "category": {
        "description": "The dispute's category",
        "type": "string",
        "readOnly": true,
        "enum": [
          "fraud",
          "unrecognized",
          "product-not-received",
          "product-unacceptable",
          "product-not-refunded",
          "duplicate",
          "subscription-canceled",
          "uncategorized"
        ]
      },
      "type": {
        "description": "The dispute's type",
        "type": "string",
        "enum": [
          "information-request",
          "first-chargeback",
          "second-chargeback",
          "arbitration"
        ]
      },
      "status": {
        "description": "The dispute's status",
        "type": "string",
        "enum": [
          "response-needed",
          "under-review",
          "forfeited",
          "won",
          "lost",
          "unknown"
        ]
      },
      "postedTime": {
        "description": "Dispute posted time",
        "type": "string",
        "format": "date-time"
      },
      "deadlineTime": {
        "description": "Dispute deadline time",
        "type": "string",
        "format": "date-time"
      },
      "rawResponse": {
        "description": "Dispute raw response from gateway",
        "type": "string",
        "readOnly": true
      },
      "resolvedTime": {
        "description": "Dispute resolved time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "createdTime": {
        "description": "Dispute created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Dispute updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/TransactionLink"
            }
          ]
        }
      },
      "_embedded": {
        "type": "array",
        "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/TransactionEmbed"
            }
          ]
        }
      }
    }
  },
  "AuthTransactionEmbed": {
    "type": "object",
    "description": "Auth Transaction object",
    "readOnly": true,
    "properties": {
      "authTransaction": {
        "$ref": "#/components/schemas/Transaction"
      }
    }
  },
  "BankAccountEmbed": {
    "type": "object",
    "description": "Bank Account object",
    "readOnly": true,
    "properties": {
      "bankAccount": {
        "$ref": "#/components/schemas/BankAccount"
      }
    }
  },
  "CustomerEmbed": {
    "type": "object",
    "description": "Customer object",
    "readOnly": true,
    "properties": {
      "customer": {
        "$ref": "#/components/schemas/Customer"
      }
    }
  },
  "FileEmbed": {
    "type": "object",
    "description": "File object",
    "readOnly": true,
    "properties": {
      "file": {
        "$ref": "#/components/schemas/File"
      }
    }
  },
  "GatewayAccountEmbed": {
    "type": "object",
    "description": "Gateway Account object",
    "readOnly": true,
    "properties": {
      "gatewayAccount": {
        "$ref": "https://rebilly.github.io/RebillyUserAPI/openapi.json#/components/schemas/GatewayAccount"
      }
    }
  },
  "InitialInvoiceEmbed": {
    "type": "object",
    "description": "Initial Invoice object",
    "readOnly": true,
    "properties": {
      "initialInvoice": {
        "$ref": "#/components/schemas/Invoice"
      }
    }
  },
  "InvoicesEmbed": {
    "type": "object",
    "description": "Invoices collection",
    "readOnly": true,
    "properties": {
      "invoices": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Invoice"
        }
      }
    }
  },
  "LeadSourceEmbed": {
    "type": "object",
    "description": "Lead Source object",
    "readOnly": true,
    "properties": {
      "leadSource": {
        "$ref": "#/components/schemas/LeadSource"
      }
    }
  },
  "OrganizationEmbed": {
    "type": "object",
    "description": "Organization object",
    "readOnly": true,
    "properties": {
      "organization": {
        "$ref": "https://rebilly.github.io/RebillyUserAPI/openapi.json#/components/schemas/Organization"
      }
    }
  },
  "ParentTransactionEmbed": {
    "type": "object",
    "description": "Retried Transaction object",
    "readOnly": true,
    "properties": {
      "parentTransaction": {
        "$ref": "#/components/schemas/Transaction"
      }
    }
  },
  "PaymentCardEmbed": {
    "type": "object",
    "description": "Payment Card object",
    "readOnly": true,
    "properties": {
      "paymentCard": {
        "$ref": "#/components/schemas/PaymentCard"
      }
    }
  },
  "PlanEmbed": {
    "type": "object",
    "description": "Plan object",
    "readOnly": true,
    "properties": {
      "plan": {
        "$ref": "#/components/schemas/Plan"
      }
    }
  },
  "ProductEmbed": {
    "type": "object",
    "description": "Product object",
    "readOnly": true,
    "properties": {
      "product": {
        "$ref": "#/components/schemas/Product"
      }
    }
  },
  "RecentInvoiceEmbed": {
    "type": "object",
    "description": "Recent Invoice object",
    "readOnly": true,
    "properties": {
      "recentInvoice": {
        "$ref": "#/components/schemas/Invoice"
      }
    }
  },
  "RetriedTransactionEmbed": {
    "type": "object",
    "description": "Parent Transaction object",
    "readOnly": true,
    "properties": {
      "retriedTransaction": {
        "$ref": "#/components/schemas/Transaction"
      }
    }
  },
  "SubscriptionEmbed": {
    "type": "object",
    "description": "Subscription object",
    "readOnly": true,
    "properties": {
      "subscription": {
        "$ref": "#/components/schemas/Subscription"
      }
    }
  },
  "TransactionEmbed": {
    "type": "object",
    "description": "Transaction object",
    "readOnly": true,
    "properties": {
      "transaction": {
        "$ref": "#/components/schemas/Transaction"
      }
    }
  },
  "WebsiteEmbed": {
    "type": "object",
    "description": "Website object",
    "readOnly": true,
    "properties": {
      "website": {
        "type": "object"
      }
    }
  },
  "Error": {
    "type": "object",
    "properties": {
      "status": {
        "type": "integer",
        "minimum": 100,
        "maximum": 600,
        "description": "The HTTP status code."
      },
      "error": {
        "type": "string"
      },
      "type": {
        "type": "string",
        "description": "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \"about:blank\"."
      },
      "title": {
        "type": "string",
        "description": "A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization."
      }
    }
  },
  "EventType": {
    "type": "string",
    "description": "Rebilly event type",
    "readOnly": true,
    "enum": [
      "dispute-created",
      "gateway-account-requested",
      "transaction-processed",
      "subscription-activated",
      "subscription-canceled",
      "subscription-created",
      "subscription-renewed",
      "payment-card-expired",
      "invoice-past-due",
      "invoice-paid",
      "transaction-declined",
      "transaction-process-requested",
      "risk-score-changed",
      "transaction-discrepancy-found"
    ]
  },
  "File": {
    "type": "object",
    "properties": {
      "id": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "name": {
        "description": "Original File name",
        "type": "string"
      },
      "extension": {
        "description": "The File extension",
        "type": "string"
      },
      "description": {
        "description": "The File description",
        "type": "string"
      },
      "tags": {
        "description": "The tags list",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "mime": {
        "description": "The mime type",
        "type": "string",
        "readOnly": true,
        "enum": [
          "image/png",
          "image/jpeg",
          "image/gif",
          "application/pdf",
          "audio/mpeg"
        ]
      },
      "size": {
        "description": "The File size in bytes",
        "type": "integer",
        "readOnly": true
      },
      "width": {
        "description": "Image width, applicable to images only",
        "type": "integer",
        "readOnly": true
      },
      "height": {
        "description": "Image height, applicable to images only",
        "type": "integer",
        "readOnly": true
      },
      "sha1": {
        "description": "Hash sum of the file",
        "type": "string",
        "readOnly": true
      },
      "createdTime": {
        "description": "The upload date/time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "The latest update date/time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "isPublic": {
        "description": "Is the file available publicly (without authentication). If true, the permalink in the _links section contains the public URL.",
        "type": "boolean"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 3,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/FileDownloadLink"
            },
            {
              "$ref": "#/components/schemas/SignedLinkLink"
            },
            {
              "$ref": "#/components/schemas/PermalinkLink"
            }
          ]
        }
      }
    }
  },
  "FileCreateFromInline": {
    "type": "object",
    "required": [
      "file"
    ],
    "properties": {
      "file": {
        "description": "The file in base64 encoded format.",
        "type": "string",
        "example": "R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs="
      },
      "isPublic": {
        "description": "The File visibility. If public a permalink is provided.",
        "type": "boolean",
        "example": false
      },
      "name": {
        "description": "The file name used for downloading",
        "type": "string",
        "example": "logo.png"
      },
      "description": {
        "description": "The file description",
        "type": "string",
        "example": "My file description"
      },
      "tags": {
        "description": "The tags list",
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "test",
          "tags"
        ]
      }
    }
  },
  "FileCreateFromUrl": {
    "type": "object",
    "required": [
      "url"
    ],
    "properties": {
      "url": {
        "description": "The URL of the file to upload.",
        "type": "string",
        "example": "https://blog.rebilly.com/wp-content/uploads/2017/09/rb_LogoInverted_Small.png"
      },
      "isPublic": {
        "description": "The File visibility. If public a permalink is provided.",
        "type": "boolean",
        "example": false
      },
      "name": {
        "description": "The file name used for downloading",
        "type": "string",
        "example": "logo.png"
      },
      "description": {
        "description": "The file description",
        "type": "string",
        "example": "My file description"
      },
      "tags": {
        "description": "The tags list",
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "test",
          "tags"
        ]
      }
    }
  },
  "InvalidError": {
    "description": "Invalid data was sent",
    "allOf": [
      {
        "$ref": "#/components/schemas/Error"
      },
      {
        "type": "object",
        "properties": {
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "description": "The field name. Dot notation is used for nested object field names."
                },
                "message": {
                  "type": "string"
                }
              }
            },
            "example": [
              {
                "field": "field1",
                "message": "field1 is invalid"
              },
              {
                "field": "subObject.field2",
                "message": "field2 is invalid"
              },
              {
                "field": "subObject.field2",
                "message": "another error in the field2"
              }
            ]
          }
        }
      }
    ]
  },
  "Invoice": {
    "type": "object",
    "required": [
      "customerId",
      "websiteId",
      "currency"
    ],
    "properties": {
      "id": {
        "description": "The invoice identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "invoiceNumber": {
        "description": "An auto-incrementing number based on the sequence of invoices for any particular customer.",
        "readOnly": true,
        "type": "integer"
      },
      "customerId": {
        "description": "The customer's ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "websiteId": {
        "description": "The website's ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "organizationId": {
        "description": "The organization's ID",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "subscriptionId": {
        "description": "The related Subscription's ID if available, otherwise null",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "currency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "amount": {
        "description": "The Invoice's amount",
        "type": "number",
        "format": "double",
        "readOnly": true
      },
      "amountDue": {
        "description": "The Invoice's due amount",
        "type": "number",
        "format": "double",
        "readOnly": true
      },
      "subtotalAmount": {
        "description": "The Invoice's subtotal amount",
        "type": "number",
        "format": "double",
        "readOnly": true
      },
      "discountAmount": {
        "description": "The Invoice's discounts amount",
        "type": "number",
        "format": "double",
        "readOnly": true
      },
      "taxAmount": {
        "description": "The Invoice's taxes amount",
        "type": "number",
        "format": "double",
        "readOnly": true
      },
      "shippingAmount": {
        "description": "The Invoice's shipping amount",
        "type": "number",
        "format": "double",
        "readOnly": true
      },
      "billingAddress": {
        "description": "Invoice's billing address",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          }
        ]
      },
      "deliveryAddress": {
        "description": "Invoice's delivery address",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          }
        ]
      },
      "poNumber": {
        "description": "Purchase order number which will be displayed on the invoice",
        "nullable": true,
        "example": "PO123456",
        "type": "string"
      },
      "notes": {
        "description": "Notes for the customer which will be displayed on the invoice",
        "type": "string"
      },
      "items": {
        "type": "array",
        "description": "Invoice Items array",
        "readOnly": true,
        "items": {
          "$ref": "#/components/schemas/InvoiceItem"
        }
      },
      "taxes": {
        "type": "array",
        "description": "Taxes applied to this invoice",
        "readOnly": true,
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/InvoiceTax"
            }
          ]
        }
      },
      "discounts": {
        "type": "array",
        "description": "Discounts applied",
        "readOnly": true,
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/InvoiceDiscount"
            }
          ]
        }
      },
      "transactions": {
        "type": "array",
        "description": "Invoice transactions array",
        "readOnly": true,
        "items": {
          "$ref": "#/components/schemas/Transaction"
        }
      },
      "autopayScheduledTime": {
        "description": "Invoice autopay scheduled time",
        "type": "string",
        "format": "date-time"
      },
      "autopayRetryNumber": {
        "description": "Invoice autopay retry number",
        "readOnly": true,
        "type": "integer",
        "minimum": 0,
        "default": 0
      },
      "retryInstruction": {
        "description": "The invoice retry instruction",
        "type": "object",
        "properties": {
          "attempts": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "scheduleInstruction": {
                  "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
                }
              },
              "required": [
                "scheduleInstruction"
              ]
            }
          },
          "afterAttemptPolicies": {
            "description": "The policy on the attempt finishes",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "change-subscription-renewal-time"
              ]
            }
          },
          "afterRetryEndPolicies": {
            "description": "The policy on the retry ends",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "abandon-invoice",
                "cancel-subscription"
              ]
            }
          }
        },
        "required": [
          "attempts",
          "afterAttemptPolicies",
          "afterRetryEndPolicies"
        ]
      },
      "revision": {
        "description": "The number of times the invoice data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
        "type": "integer",
        "readOnly": true
      },
      "status": {
        "type": "string",
        "description": "Invoice status.",
        "readOnly": true,
        "enum": [
          "draft",
          "unpaid",
          "paid",
          "past-due",
          "delinquent",
          "abandoned",
          "voided",
          "partially-refunded",
          "refunded",
          "disputed"
        ]
      },
      "delinquentCollectionPeriod": {
        "type": "integer",
        "description": "Delinquent Collection Period - difference between paidTime and dueTime in days.",
        "readOnly": true
      },
      "collectionPeriod": {
        "type": "integer",
        "description": "Collection Period - difference between paidTime and issuedTime in days.",
        "readOnly": true
      },
      "abandonedTime": {
        "description": "Invoice abandoned time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "voidedTime": {
        "description": "Invoice voided time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "paidTime": {
        "description": "Invoice paid time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "dueTime": {
        "description": "Invoice due time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "issuedTime": {
        "description": "Invoice issued time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "createdTime": {
        "description": "Invoice created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Invoice updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "dueReminderTime": {
        "description": "Time past due reminder event will be triggered",
        "nullable": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "dueReminderNumber": {
        "description": "Number of past due reminder events triggered",
        "type": "integer",
        "readOnly": true
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/CustomerLink"
            },
            {
              "$ref": "#/components/schemas/WebsiteLink"
            },
            {
              "$ref": "#/components/schemas/OrganizationLink"
            },
            {
              "$ref": "#/components/schemas/LeadSourceLink"
            },
            {
              "$ref": "#/components/schemas/TransactionAllocationsLink"
            }
          ]
        }
      },
      "_embedded": {
        "type": "array",
        "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/CustomerEmbed"
            },
            {
              "$ref": "#/components/schemas/WebsiteEmbed"
            },
            {
              "$ref": "#/components/schemas/OrganizationEmbed"
            },
            {
              "$ref": "#/components/schemas/LeadSourceEmbed"
            }
          ]
        }
      }
    }
  },
  "InvoiceIssue": {
    "type": "object",
    "properties": {
      "issuedTime": {
        "description": "Invoice issued time. Will be issued immediately if `null` or omitted.",
        "type": "string",
        "format": "date-time",
        "nullable": true
      },
      "dueTime": {
        "description": "Invoice due time. Will be set same as `issuedTime` if `null` or omitted.",
        "type": "string",
        "format": "date-time",
        "nullable": true
      }
    }
  },
  "InvoiceItem": {
    "type": "object",
    "required": [
      "type",
      "unitPrice"
    ],
    "properties": {
      "id": {
        "description": "The website identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "type": {
        "description": "Invoice item's type",
        "type": "string",
        "enum": [
          "debit",
          "credit"
        ]
      },
      "description": {
        "description": "Invoice item's description",
        "type": "string"
      },
      "unitPrice": {
        "description": "Invoice item's price",
        "type": "number",
        "format": "double"
      },
      "quantity": {
        "description": "Invoice item's quantity",
        "type": "integer"
      },
      "price": {
        "description": "Invoice item's total price",
        "type": "number",
        "format": "double",
        "readOnly": true
      },
      "subscriptionId": {
        "description": "The subscription's ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "productId": {
        "description": "The product's ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "discountAmount": {
        "description": "Invoice item discount amount",
        "type": "number",
        "format": "double",
        "readOnly": true
      },
      "periodStartTime": {
        "description": "Start time",
        "type": "string",
        "format": "date-time"
      },
      "periodEndTime": {
        "description": "End time",
        "type": "string",
        "format": "date-time"
      },
      "periodNumber": {
        "description": "Invoice item subscription period number",
        "type": "integer"
      },
      "createdTime": {
        "description": "Invoice item created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Invoice item updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/SubscriptionLink"
            },
            {
              "$ref": "#/components/schemas/ProductLink"
            }
          ]
        }
      },
      "_embedded": {
        "type": "array",
        "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/ProductEmbed"
            },
            {
              "$ref": "#/components/schemas/PlanEmbed"
            }
          ]
        }
      }
    }
  },
  "InvoiceReissue": {
    "type": "object",
    "properties": {
      "dueTime": {
        "description": "Invoice due time. Will be set as current date-time if `null` or omitted.",
        "type": "string",
        "format": "date-time",
        "nullable": true
      }
    }
  },
  "InvoiceTax": {
    "type": "object",
    "readOnly": true,
    "properties": {
      "amount": {
        "description": "Tax amount",
        "type": "number",
        "format": "double"
      },
      "description": {
        "type": "string",
        "description": "Tax description"
      }
    }
  },
  "InvoiceTransactionAllocation": {
    "type": "object",
    "properties": {
      "invoiceId": {
        "$ref": "#/components/schemas/ResourceId"
      },
      "transactionId": {
        "$ref": "#/components/schemas/ResourceId"
      },
      "amount": {
        "type": "number"
      },
      "currency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 2,
        "maxItems": 2,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/InvoiceLink"
            },
            {
              "$ref": "#/components/schemas/TransactionLink"
            }
          ]
        }
      }
    }
  },
  "KycDocument": {
    "type": "object",
    "required": [
      "fileId",
      "customerId",
      "documentType",
      "status"
    ],
    "properties": {
      "id": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "fileId": {
        "description": "Linked File object id",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "customerId": {
        "description": "Linked Customer object id",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "documentType": {
        "description": "Document type submitted for validation, only identity-proof type is analyzed in an automated manner",
        "type": "string",
        "enum": [
          "identity-proof",
          "address-proof"
        ]
      },
      "status": {
        "description": "Status of the validation",
        "type": "string",
        "readOnly": true,
        "enum": [
          "pending",
          "in-progress",
          "accepted",
          "rejected"
        ]
      },
      "rejectionReason": {
        "$ref": "#/components/schemas/KycDocumentRejection"
      },
      "documentMatches": {
        "$ref": "#/components/schemas/KycDocumentMatches"
      },
      "createdTime": {
        "description": "Creation date/time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Latest update date/time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "processedTime": {
        "description": "Processing date/time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 3,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/FileLink"
            },
            {
              "$ref": "#/components/schemas/CustomerLink"
            }
          ]
        }
      }
    }
  },
  "KycDocumentMatches": {
    "type": "object",
    "readOnly": true,
    "properties": {
      "score": {
        "description": "The calculated score that represents the % of confidence that this ID represents the given customer",
        "type": "number",
        "format": "double",
        "example": 0.75
      },
      "data": {
        "type": "object",
        "properties": {
          "containsImage": {
            "description": "Flag that indicates if there is an image that contains a face on it",
            "type": "boolean",
            "example": true
          },
          "isIdentityDocument": {
            "description": "Flag that indicates if this looks like and ID",
            "type": "boolean",
            "example": true
          },
          "isPublishedOnline": {
            "description": "If there is an exact match found online",
            "type": "boolean",
            "example": false
          },
          "firstName": {
            "description": "The customer first name if it was matched, null otherwise",
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "description": "The customer last name if it was matched, null otherwise",
            "type": "string",
            "example": "Doe"
          },
          "dateOfBirth": {
            "description": "The date of birth found on the document, null if not found",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "expiryDate": {
            "description": "The expiry date found on the document, null if not found",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "issueDate": {
            "description": "The issued date found on the document, null if not found",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "hasMinimalAge": {
            "description": "Checks the minimal age, 21+ for USA and 18+ for all other countries. Null if dateOfBirth could not be determined.",
            "type": "boolean",
            "example": true
          }
        }
      }
    }
  },
  "KycDocumentRejection": {
    "type": "object",
    "readOnly": true,
    "properties": {
      "type": {
        "type": "string",
        "enum": [
          "document-unreadable",
          "document-expired",
          "document-not-matching",
          "underage-person",
          "other"
        ]
      },
      "message": {
        "description": "The rejection message",
        "type": "string",
        "example": "Provided document is unreadable"
      }
    }
  },
  "LeadSource": {
    "allOf": [
      {
        "$ref": "#/components/schemas/LeadSourceData"
      },
      {
        "type": "object",
        "properties": {
          "original": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LeadSourceData"
              }
            ]
          }
        }
      }
    ]
  },
  "LeadSourceData": {
    "type": "object",
    "properties": {
      "medium": {
        "description": "Lead Source's medium (eg search, display)",
        "type": "string"
      },
      "source": {
        "description": "Lead Source's source (eg google, yahoo)",
        "type": "string"
      },
      "campaign": {
        "description": "Lead Source's campaign (eg go-big-123)",
        "type": "string"
      },
      "term": {
        "description": "Lead Source's term (eg salt shakers)",
        "type": "string"
      },
      "content": {
        "description": "Lead Source's content (eg smiley faces)",
        "type": "string"
      },
      "affiliate": {
        "description": "Lead Source's affiliate (eg 123, Bob Smith)",
        "type": "string"
      },
      "subAffiliate": {
        "description": "Lead Source's sub-affiliate also called a sub-id or click id in some circles (eg 123456)",
        "type": "string"
      },
      "salesAgent": {
        "description": "Lead Source's sales agent (eg James Bond)",
        "type": "string"
      },
      "clickId": {
        "description": "Lead Source's click id (may come from an ad server)",
        "type": "string"
      },
      "path": {
        "description": "Lead Source's path uri (eg www.example.com/some/landing/path)",
        "type": "string"
      },
      "currency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "amount": {
        "description": "The amount that the lead cost",
        "type": "number",
        "format": "double"
      },
      "createdTime": {
        "description": "LeadSource created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/CustomerLink"
            }
          ]
        }
      }
    }
  },
  "ApprovalUrlLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "approvalUrl"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "AttachmentResourceLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "customer",
          "dispute",
          "invoice",
          "note",
          "payment",
          "plan",
          "product",
          "subscription",
          "transaction"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "AuthTransactionLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "authTransaction"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "CancelUrlLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "cancelUrl"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "CustomerLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "customer"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "DefaultPaymentInstrumentLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "defaultPaymentInstrument"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "DisputeLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "dispute"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "FileDownloadLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "download"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "FileLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "file"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "GatewayAccountLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "gatewayAccount"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "InitialInvoiceLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "initialInvoice"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "InvoiceLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "invoice"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "InvoicesLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "invoices"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "LeadSourceLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "leadSource"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "Link": {
    "type": "object",
    "properties": {
      "href": {
        "description": "The link URL",
        "type": "string"
      }
    },
    "required": [
      "href"
    ]
  },
  "NotesLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "notes"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "OrganizationLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "organization"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "ParentTransactionLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "parentTransaction"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "PaymentCardLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "paymentCard"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "PermalinkLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "permalink"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "PlanLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "plan"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "ProductLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "product"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "RecentInvoiceLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "recentInvoice"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "RefundUrlLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "refundUrl"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "RetriedTransactionLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "retriedTransaction"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "SelfLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "self"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "SignedLinkLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "signedLink"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "SubscriptionLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "subscription"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "TransactionAllocationsLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "transactionAllocations"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "TransactionLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "transaction"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "WebsiteLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "website"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "Method": {
    "type": "string",
    "description": "The payment method",
    "enum": [
      "payment-card",
      "ach",
      "bank-account",
      "cash",
      "paypal",
      "Alipay",
      "AstroPay Card",
      "bank-transfer",
      "bitcoin",
      "Boleto",
      "cash-deposit",
      "CASHlib",
      "CashToCode",
      "China UnionPay",
      "domestic-cards",
      "echeck",
      "ecoPayz",
      "ecoVoucher",
      "EPS",
      "ePay.bg",
      "Flexepin",
      "Giropay",
      "Gpaysafe",
      "iDebit",
      "iDEAL",
      "INOVAPAY-pin",
      "INOVAPAY-wallet",
      "InstaDebit",
      "instant-bank-transfer",
      "Interac-online",
      "Interac-eTransfer",
      "Interac-express-connect",
      "Interac",
      "invoice",
      "Jeton",
      "Klarna",
      "LPG-online",
      "LPG-payment-card",
      "miscellaneous",
      "Neteller",
      "Nordea-Solo",
      "OchaPay",
      "online-bank-transfer",
      "Onlineueberweisen",
      "Paysafecard",
      "Pay4Fun",
      "PinPay",
      "phone",
      "POLi",
      "Przelewy24",
      "QQPay",
      "Resurs",
      "SEPA",
      "Skrill",
      "Skrill Rapid Transfer",
      "SMSVoucher",
      "SparkPay",
      "Trustly",
      "UPayCard",
      "voucher",
      "WeChat Pay"
    ]
  },
  "Payment": {
    "type": "object",
    "required": [
      "websiteId",
      "customerId",
      "currency",
      "amount"
    ],
    "properties": {
      "id": {
        "description": "The payment identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "websiteId": {
        "description": "The website identifier string",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "customerId": {
        "description": "The customer identifier string",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "currency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "amount": {
        "description": "The payment amount",
        "type": "number",
        "format": "double"
      },
      "scheduledTime": {
        "description": "The time the payment is scheduled for collection",
        "type": "string",
        "format": "date-time"
      },
      "invoiceIds": {
        "description": "The array of invoice identifiers",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ResourceId"
        }
      },
      "description": {
        "description": "The payment description",
        "type": "string",
        "maxLength": 255
      },
      "retryInstruction": {
        "$ref": "#/components/schemas/PaymentRetry"
      },
      "retryNumber": {
        "readOnly": true,
        "description": "The position in the sequence of retries",
        "type": "integer"
      },
      "retriedPaymentId": {
        "readOnly": true,
        "description": "The retried payment ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      },
      "paymentInstrument": {
        "$ref": "#/components/schemas/PaymentInstrument"
      },
      "billingAddress": {
        "description": "Billing Address",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          }
        ]
      },
      "status": {
        "description": "Payment status",
        "type": "string",
        "readOnly": true,
        "enum": [
          "scheduled",
          "queued",
          "in-progress",
          "incomplete",
          "waiting-gateway",
          "suspended",
          "completed"
        ]
      },
      "result": {
        "description": "Payment result",
        "type": "string",
        "readOnly": true,
        "enum": [
          "approved",
          "declined",
          "canceled",
          "abandoned",
          "unknown"
        ]
      },
      "riskMetadata": {
        "description": "Risk metadata",
        "allOf": [
          {
            "$ref": "#/components/schemas/RiskMetadata"
          }
        ]
      },
      "createdTime": {
        "description": "Payment created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Payment updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/WebsiteLink"
            },
            {
              "$ref": "#/components/schemas/TransactionLink"
            },
            {
              "$ref": "#/components/schemas/ApprovalUrlLink"
            },
            {
              "$ref": "#/components/schemas/LeadSourceLink"
            }
          ]
        }
      },
      "_embedded": {
        "type": "array",
        "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/WebsiteEmbed"
            },
            {
              "$ref": "#/components/schemas/CustomerEmbed"
            },
            {
              "$ref": "#/components/schemas/TransactionEmbed"
            }
          ]
        }
      }
    }
  },
  "PaymentCard": {
    "type": "object",
    "required": [
      "customerId"
    ],
    "properties": {
      "id": {
        "description": "The card identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "customerId": {
        "description": "The Customer's ID.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "method": {
        "description": "The method of payment instrument.",
        "type": "string",
        "readOnly": true,
        "enum": [
          "payment-card"
        ]
      },
      "bin": {
        "description": "The card's bin (the PAN's first 6 digits)",
        "type": "string",
        "format": "bin",
        "readOnly": true
      },
      "last4": {
        "description": "The PAN's last 4 digits",
        "type": "string",
        "readOnly": true
      },
      "expYear": {
        "description": "Card's expiry year.",
        "type": "integer"
      },
      "expMonth": {
        "description": "Card's expiry month.",
        "type": "integer"
      },
      "billingAddress": {
        "description": "The Billing Address.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          }
        ]
      },
      "panFingerprint": {
        "description": "A unique value to identify the PAN regardless of expiration dates.  It contains alphanumeric values.",
        "type": "string",
        "readOnly": true
      },
      "status": {
        "description": "Payment Card status.  When a card is `active` it means it has been used at least once for an approved transaction.\nTo remove a card from being in use, set it as `deactivated` (see the deactivation endpoint).\n",
        "type": "string",
        "readOnly": true,
        "enum": [
          "active",
          "expired",
          "inactive",
          "deactivated",
          "pending",
          "verification-needed"
        ]
      },
      "brand": {
        "readOnly": true,
        "allOf": [
          {
            "type": "string",
            "description": "Payment Card brand",
            "enum": [
              "Visa",
              "MasterCard",
              "American Express",
              "Discover",
              "Maestro",
              "Solo",
              "Electron",
              "JCB",
              "Voyager",
              "Diners Club",
              "Switch",
              "Laser",
              "China UnionPay",
              "AstroPay Card"
            ]
          }
        ]
      },
      "bankCountry": {
        "description": "Payment Card bank country",
        "type": "string",
        "readOnly": true
      },
      "bankName": {
        "description": "Payment Card bank name",
        "type": "string",
        "readOnly": true
      },
      "stickyGatewayAccountId": {
        "description": "Default Gateway Account ID used for transactions",
        "type": "string",
        "readOnly": true
      },
      "createdTime": {
        "description": "Card created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Card updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "expirationReminderTime": {
        "description": "Time expiration reminder event will be triggered",
        "nullable": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "expirationReminderNumber": {
        "description": "Number of expiration reminder events triggered",
        "type": "integer",
        "readOnly": true
      },
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/CustomerLink"
            },
            {
              "$ref": "#/components/schemas/AuthTransactionLink"
            },
            {
              "$ref": "#/components/schemas/ApprovalUrlLink"
            }
          ]
        }
      },
      "_embedded": {
        "type": "array",
        "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/AuthTransactionEmbed"
            },
            {
              "$ref": "#/components/schemas/CustomerEmbed"
            }
          ]
        }
      }
    }
  },
  "PaymentCardCreatePlain": {
    "type": "object",
    "required": [
      "customerId",
      "pan",
      "expYear",
      "expMonth",
      "cvv",
      "billingAddress"
    ],
    "properties": {
      "customerId": {
        "description": "The Customer's ID.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "pan": {
        "description": "The card PAN (Primary Account Number).",
        "type": "string",
        "writeOnly": true
      },
      "expYear": {
        "description": "Card's expiry year.",
        "type": "integer"
      },
      "expMonth": {
        "description": "Card's expiry month.",
        "type": "integer"
      },
      "cvv": {
        "description": "Card's cvv (card verification value).",
        "type": "string",
        "writeOnly": true
      },
      "billingAddress": {
        "description": "The Billing Address.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          }
        ]
      },
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      }
    }
  },
  "PaymentCardCreateToken": {
    "type": "object",
    "required": [
      "customerId",
      "token"
    ],
    "properties": {
      "customerId": {
        "description": "The Customer's ID.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "token": {
        "description": "PaymentCardToken ID.",
        "type": "string"
      },
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      }
    }
  },
  "PaymentInstrument": {
    "type": "object",
    "required": [
      "method"
    ],
    "discriminator": {
      "propertyName": "method",
      "mapping": {
        "ach": "#/components/schemas/achInstrument",
        "Alipay": "#/components/schemas/AlipayInstrument",
        "AstroPay Card": "#/components/schemas/AstroPay-CardInstrument",
        "bank-account": "#/components/schemas/bank-accountInstrument",
        "bitcoin": "#/components/schemas/bitcoinInstrument",
        "Boleto": "#/components/schemas/BoletoInstrument",
        "cash": "#/components/schemas/cashInstrument",
        "China UnionPay": "#/components/schemas/China-UnionPayInstrument",
        "ePay.bg": "#/components/schemas/ePay-bgInstrument",
        "EPS": "#/components/schemas/EPSInstrument",
        "Flexepin": "#/components/schemas/FlexepinInstrument",
        "iDEAL": "#/components/schemas/iDEALInstrument",
        "Klarna": "#/components/schemas/KlarnaInstrument",
        "payment-card": "#/components/schemas/payment-cardInstrument",
        "paypal": "#/components/schemas/paypalInstrument",
        "QQPay": "#/components/schemas/QQPayInstrument",
        "Skrill Rapid Transfer": "#/components/schemas/Skrill-Rapid-TransferInstrument",
        "SMSVoucher": "#/components/schemas/SMSVoucherInstrument",
        "UPayCard": "#/components/schemas/UPayCardInstrument",
        "WeChat Pay": "#/components/schemas/WeChat-PayInstrument"
      }
    },
    "properties": {
      "method": {
        "$ref": "#/components/schemas/Method"
      }
    }
  },
  "achInstrument": {
    "description": "ACH payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      },
      {
        "type": "object",
        "required": [
          "bankAccountId"
        ],
        "properties": {
          "bankAccountId": {
            "description": "The bank account identifier string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          }
        }
      }
    ]
  },
  "AlipayInstrument": {
    "description": "Alipay payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      }
    ]
  },
  "AstroPay-CardInstrument": {
    "description": "AstroPay Card payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      }
    ]
  },
  "bank-accountInstrument": {
    "description": "ACH payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      },
      {
        "type": "object",
        "required": [
          "bankAccountId"
        ],
        "properties": {
          "bankAccountId": {
            "description": "The bank account identifier string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          }
        }
      }
    ]
  },
  "bitcoinInstrument": {
    "description": "Bitcoin payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      }
    ]
  },
  "BoletoInstrument": {
    "description": "Boleto payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      }
    ]
  },
  "cashInstrument": {
    "description": "Cash payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      },
      {
        "type": "object",
        "properties": {
          "receivedBy": {
            "description": "The receiver's name",
            "type": "string"
          }
        }
      }
    ]
  },
  "China-UnionPayInstrument": {
    "description": "China UnionPay payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      }
    ]
  },
  "ePay-bgInstrument": {
    "description": "ePay.bg payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      }
    ]
  },
  "EPSInstrument": {
    "description": "EPS payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      }
    ]
  },
  "FlexepinInstrument": {
    "description": "Flexepin payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      }
    ]
  },
  "iDEALInstrument": {
    "description": "iDEAL payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      }
    ]
  },
  "KlarnaInstrument": {
    "description": "Klarna payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      }
    ]
  },
  "payment-cardInstrument": {
    "description": "Payment card payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      },
      {
        "type": "object",
        "required": [
          "paymentCardId"
        ],
        "properties": {
          "paymentCardId": {
            "description": "The payment card identifier string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          }
        }
      }
    ]
  },
  "paypalInstrument": {
    "description": "PayPal payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      },
      {
        "type": "object",
        "required": [
          "payPalAccountId"
        ],
        "properties": {
          "payPalAccountId": {
            "description": "The PayPal account identifier string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          }
        }
      }
    ]
  },
  "QQPayInstrument": {
    "description": "QQPay payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      }
    ]
  },
  "Skrill-Rapid-TransferInstrument": {
    "description": "Skrill Rapid Transfer payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      }
    ]
  },
  "SMSVoucherInstrument": {
    "description": "SMSVoucher payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      }
    ]
  },
  "UPayCardInstrument": {
    "description": "SMSVoucher payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      }
    ]
  },
  "WeChat-PayInstrument": {
    "description": "WeChat Pay payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      }
    ]
  },
  "PaymentInstrumentValidation": {
    "type": "object",
    "required": [
      "method",
      "paymentInstrumentId"
    ],
    "properties": {
      "id": {
        "description": "Payment instrument validation ID",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "method": {
        "description": "Payment method",
        "type": "string"
      },
      "paymentInstrumentId": {
        "description": "Payment instrument ID",
        "type": "string"
      },
      "actionCode": {
        "description": "Action code",
        "type": "string",
        "readOnly": true
      },
      "responseCode": {
        "description": "Response code",
        "type": "string",
        "readOnly": true
      },
      "avsResult": {
        "description": "Address verification result",
        "type": "string",
        "readOnly": true
      },
      "cvvResult": {
        "description": "CVV result",
        "type": "string",
        "readOnly": true
      },
      "billingAddress": {
        "description": "Billing address.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          }
        ]
      },
      "expYear": {
        "description": "Payment card's expiry year.",
        "type": "integer",
        "readOnly": true
      },
      "expMonth": {
        "description": "Payment card's expiry month.",
        "type": "integer",
        "readOnly": true
      },
      "createdTime": {
        "description": "Payment instrument validation created time.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "AmountAdjustment": {
    "type": "object",
    "discriminator": {
      "propertyName": "method"
    },
    "properties": {
      "method": {
        "type": "string",
        "enum": [
          "none",
          "partial",
          "discount"
        ]
      }
    },
    "required": [
      "method"
    ]
  },
  "PaymentRetry": {
    "type": "object",
    "properties": {
      "attempts": {
        "type": "array",
        "minItems": 1,
        "items": {
          "type": "object",
          "properties": {
            "scheduleInstruction": {
              "$ref": "#/components/schemas/CommonScheduleInstruction"
            },
            "paymentInstruction": {
              "$ref": "#/components/schemas/AmountAdjustment"
            }
          },
          "required": [
            "scheduleInstruction",
            "paymentInstruction"
          ]
        }
      },
      "afterAttemptPolicy": {
        "description": "The policy on the attempt finishes",
        "type": "string",
        "enum": [
          "none",
          "change-subscription-renewal-time"
        ]
      },
      "afterRetryEndPolicy": {
        "description": "The policy on the retry ends",
        "type": "string",
        "enum": [
          "none",
          "cancel-subscription"
        ]
      }
    },
    "required": [
      "attempts",
      "afterAttemptPolicy",
      "afterRetryEndPolicy"
    ]
  },
  "discount": {
    "allOf": [
      {
        "$ref": "#/components/schemas/AmountAdjustment"
      },
      {
        "type": "object",
        "properties": {
          "value": {
            "description": "The payment amount discount",
            "type": "number",
            "format": "float"
          },
          "type": {
            "description": "The payment amount discount type",
            "type": "string",
            "enum": [
              "percent",
              "fixed"
            ]
          }
        },
        "required": [
          "value",
          "type"
        ]
      }
    ]
  },
  "partial": {
    "allOf": [
      {
        "$ref": "#/components/schemas/AmountAdjustment"
      },
      {
        "type": "object",
        "properties": {
          "value": {
            "description": "The payment amount",
            "type": "number",
            "format": "float"
          },
          "type": {
            "description": "The payment amount type",
            "type": "string",
            "enum": [
              "percent",
              "fixed"
            ]
          }
        },
        "required": [
          "value",
          "type"
        ]
      }
    ]
  },
  "BankAccountToken": {
    "type": "object",
    "title": "Bank Account Token",
    "required": [
      "method",
      "paymentInstrument",
      "billingAddress"
    ],
    "properties": {
      "id": {
        "description": "The token identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "isUsed": {
        "description": "Whether the token was already used",
        "type": "boolean",
        "default": false,
        "readOnly": true
      },
      "method": {
        "description": "The token payment method",
        "type": "string",
        "enum": [
          "ach"
        ]
      },
      "paymentInstrument": {
        "description": "The payment instrument details",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenBankAccountInstrument"
          }
        ]
      },
      "fingerprint": {
        "description": "Device fingerprint hash",
        "type": "string"
      },
      "billingAddress": {
        "description": "The billing address object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          }
        ]
      },
      "leadSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LeadSource"
          }
        ],
        "writeOnly": true
      },
      "createdTime": {
        "description": "Token created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Token updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "usageTime": {
        "description": "Token usage time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "expirationTime": {
        "description": "Token expiration time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "PaymentCardToken": {
    "type": "object",
    "title": "Payment Card Token",
    "required": [
      "method",
      "paymentInstrument",
      "billingAddress"
    ],
    "properties": {
      "id": {
        "description": "The token identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "isUsed": {
        "description": "Whether the token was already used",
        "type": "boolean",
        "default": false,
        "readOnly": true
      },
      "method": {
        "description": "The token payment method",
        "type": "string",
        "enum": [
          "payment-card"
        ]
      },
      "paymentInstrument": {
        "description": "The payment instrument details",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenPaymentCardInstrument"
          }
        ]
      },
      "fingerprint": {
        "description": "Device fingerprint hash",
        "type": "string"
      },
      "billingAddress": {
        "description": "The billing address object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          }
        ]
      },
      "leadSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LeadSource"
          }
        ],
        "writeOnly": true
      },
      "createdTime": {
        "description": "Token created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Token updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "usageTime": {
        "description": "Token usage time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "expirationTime": {
        "description": "Token expiration time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "BBANInstrument": {
    "description": "Payment Token instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/TokenBankAccountInstrument"
      },
      {
        "type": "object",
        "required": [
          "accountNumber",
          "routingNumber",
          "accountType"
        ],
        "properties": {
          "accountNumber": {
            "description": "Bank Account Number",
            "type": "string",
            "pattern": "^[0-9]+$",
            "writeOnly": true
          },
          "routingNumber": {
            "description": "Bank Routing Number",
            "type": "string",
            "pattern": "^[0-9]+$"
          },
          "accountType": {
            "description": "Bank Account Type",
            "type": "string",
            "enum": [
              "checking",
              "savings",
              "other"
            ]
          },
          "bic": {
            "description": "Bank Identifier Code",
            "type": "string"
          },
          "bankName": {
            "description": "Bank name",
            "type": "string"
          },
          "last4": {
            "description": "Bank Account Number's last 4 digits",
            "type": "string",
            "readOnly": true
          }
        }
      }
    ]
  },
  "IBANInstrument": {
    "description": "Payment Token instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/TokenBankAccountInstrument"
      },
      {
        "type": "object",
        "required": [
          "accountNumber"
        ],
        "properties": {
          "accountNumber": {
            "description": "Bank Account Number. Detailed information about all ISO 13616-compliant national IBAN formats is available\nin [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban).\n",
            "type": "string",
            "writeOnly": true
          },
          "bic": {
            "description": "Bank Identifier Code",
            "type": "string"
          },
          "bankName": {
            "description": "Bank name",
            "type": "string"
          },
          "last4": {
            "description": "Bank Account Number's last 4 digits",
            "type": "string",
            "readOnly": true
          }
        }
      }
    ]
  },
  "PaymentToken": {
    "type": "object",
    "title": "Payment Token",
    "required": [
      "method",
      "billingAddress"
    ],
    "properties": {
      "id": {
        "description": "The token identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "websiteId": {
        "description": "The website's ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "isUsed": {
        "description": "Whether the token was already used",
        "type": "boolean",
        "default": false,
        "readOnly": true
      },
      "method": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenMethod"
          }
        ]
      },
      "fingerprint": {
        "description": "Device fingerprint hash",
        "type": "string"
      },
      "billingAddress": {
        "description": "The billing address object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          }
        ]
      },
      "leadSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LeadSource"
          }
        ],
        "writeOnly": true
      },
      "createdTime": {
        "description": "Token created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Token updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "usageTime": {
        "description": "Token usage time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "expirationTime": {
        "description": "Token expiration time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "TokenBankAccountInstrument": {
    "type": "object",
    "required": [
      "accountNumberType"
    ],
    "discriminator": {
      "propertyName": "accountNumberType",
      "mapping": {
        "BBAN": "#/components/schemas/BBANInstrument",
        "IBAN": "#/components/schemas/IBANInstrument"
      }
    },
    "properties": {
      "accountNumberType": {
        "description": "Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).",
        "type": "string",
        "default": "BBAN",
        "enum": [
          "IBAN",
          "BBAN"
        ]
      }
    }
  },
  "TokenMethod": {
    "type": "string",
    "description": "The token payment method",
    "enum": [
      "cash",
      "paypal",
      "Alipay",
      "AstroPay Card",
      "bank-transfer",
      "bitcoin",
      "Boleto",
      "cash-deposit",
      "CASHlib",
      "CashToCode",
      "China UnionPay",
      "domestic-cards",
      "echeck",
      "ecoPayz",
      "ecoVoucher",
      "EPS",
      "ePay.bg",
      "Flexepin",
      "Giropay",
      "Gpaysafe",
      "iDebit",
      "iDEAL",
      "INOVAPAY-pin",
      "INOVAPAY-wallet",
      "InstaDebit",
      "instant-bank-transfer",
      "Interac-online",
      "Interac-eTransfer",
      "invoice",
      "Jeton",
      "Klarna",
      "miscellaneous",
      "Neteller",
      "Nordea-Solo",
      "OchaPay",
      "online-bank-transfer",
      "Onlineueberweisen",
      "Paysafecard",
      "Pay4Fun",
      "PinPay",
      "phone",
      "POLi",
      "Przelewy24",
      "QQPay",
      "Resurs",
      "SEPA",
      "Skrill",
      "Skrill Rapid Transfer",
      "SMSVoucher",
      "SparkPay",
      "Trustly",
      "UPayCard",
      "voucher",
      "WeChat Pay"
    ]
  },
  "TokenPaymentCardInstrument": {
    "type": "object",
    "description": "Payment Token instrument object",
    "required": [
      "pan",
      "billingAddress",
      "expMonth",
      "expYear"
    ],
    "properties": {
      "pan": {
        "description": "Payment Card PAN (Primary Account Number)",
        "type": "string",
        "writeOnly": true
      },
      "bin": {
        "description": "Payment Card BIN (the PAN's first 6 digits)",
        "type": "string",
        "format": "bin",
        "readOnly": true
      },
      "last4": {
        "description": "Payment Card PAN's last 4 digits",
        "type": "string",
        "readOnly": true
      },
      "brand": {
        "readOnly": true,
        "allOf": [
          {
            "type": "string",
            "description": "Payment Card brand",
            "enum": [
              "Visa",
              "MasterCard",
              "American Express",
              "Discover",
              "Maestro",
              "Solo",
              "Electron",
              "JCB",
              "Voyager",
              "Diners Club",
              "Switch",
              "Laser",
              "China UnionPay",
              "AstroPay Card"
            ]
          }
        ]
      },
      "expMonth": {
        "description": "Payment Card expiry month",
        "type": "integer"
      },
      "expYear": {
        "description": "Payment Card expiry year",
        "type": "integer"
      },
      "cvv": {
        "description": "Payment Card CVV/CVC",
        "type": "string",
        "writeOnly": true
      }
    }
  },
  "PayPalAccount": {
    "type": "object",
    "properties": {
      "id": {
        "description": "The PayPal identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "method": {
        "description": "The method of payment instrument.",
        "type": "string",
        "readOnly": true,
        "enum": [
          "paypal"
        ]
      },
      "customerId": {
        "description": "The Customer's ID.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "billingAddress": {
        "description": "The Customer's Billing Address.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          }
        ]
      },
      "username": {
        "description": "PayPal username.",
        "type": "string",
        "readOnly": true
      },
      "status": {
        "description": "PayPal Account status",
        "type": "string",
        "readOnly": true,
        "enum": [
          "inactive",
          "active",
          "deactivated"
        ]
      },
      "createdTime": {
        "description": "PayPal Account created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "PayPal Account updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/CustomerLink"
            },
            {
              "$ref": "#/components/schemas/ApprovalUrlLink"
            }
          ]
        }
      }
    },
    "required": [
      "customerId",
      "billingAddress"
    ]
  },
  "fixed-fee": {
    "allOf": [
      {
        "$ref": "#/components/schemas/PlanPriceFormula"
      },
      {
        "type": "object",
        "required": [
          "price"
        ],
        "properties": {
          "price": {
            "description": "For the very simple price when it's fixed and does not depend on the quantity chosen by customer.\n\nIf the price is 0, it's free.\n",
            "type": "number",
            "format": "double",
            "example": 99.95
          }
        }
      }
    ]
  },
  "flat-rate": {
    "allOf": [
      {
        "$ref": "#/components/schemas/PlanPriceFormula"
      },
      {
        "type": "object",
        "required": [
          "price"
        ],
        "properties": {
          "price": {
            "description": "Flat-rate pricing is represented in a simple price per unit.\nSome examples:\n\n- $30 per unit\n- $0.10 per transaction\n- $50 per period\n\nIf the price is 0, it's free.\n",
            "type": "number",
            "format": "double",
            "example": 99.95
          },
          "maxQuantity": {
            "description": "If the value is `null`, it's assumed to be infinite.",
            "type": "integer",
            "example": 1
          }
        }
      }
    ]
  },
  "stairstep": {
    "allOf": [
      {
        "$ref": "#/components/schemas/PlanPriceFormula"
      },
      {
        "type": "object",
        "required": [
          "brackets"
        ],
        "properties": {
          "brackets": {
            "description": "The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe \"stairstep\" example:\n\nPrice total | Max quantity | Description\n------------|--------------|------------\n$5          | 1            | 1\n$13         | 5            | 2 to 5\n$30         | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $13. For 2 to 5 apples, the price is $13 in any case.\n",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "price": {
                  "description": "If the price is 0, it's free.",
                  "type": "number",
                  "format": "double",
                  "example": 99.95
                },
                "maxQuantity": {
                  "description": "If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }
        }
      }
    ]
  },
  "tiered": {
    "allOf": [
      {
        "$ref": "#/components/schemas/PlanPriceFormula"
      },
      {
        "type": "object",
        "required": [
          "brackets"
        ],
        "properties": {
          "brackets": {
            "description": "The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe \"tiered\" example:\n\nPrice per apple | Max quantity | Description\n----------------|--------------|------------\n$5              | 1            | 1\n$4              | 5            | 2 to 5\n$3              | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $9. $5 per apple for the first apple, then $4 per apple for the 2nd to 5th apple.\n",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "price": {
                  "description": "If the price is 0, it's free.",
                  "type": "number",
                  "format": "double",
                  "example": 99.95
                },
                "maxQuantity": {
                  "description": "If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }
        }
      }
    ]
  },
  "volume": {
    "allOf": [
      {
        "$ref": "#/components/schemas/PlanPriceFormula"
      },
      {
        "type": "object",
        "required": [
          "brackets"
        ],
        "properties": {
          "brackets": {
            "description": "The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe \"volume\" example:\n\nPrice per apple | Max quantity | Description\n----------------|--------------|------------\n$5              | 1            | 1\n$4              | 5            | 2 to 5\n$3              | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $8. For 2 to 5 apples, the price is $4 per apple.\n",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "price": {
                  "description": "If the price is 0, it's free.",
                  "type": "number",
                  "format": "double",
                  "example": 99.95
                },
                "maxQuantity": {
                  "description": "If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }
        }
      }
    ]
  },
  "Plan": {
    "type": "object",
    "required": [
      "name",
      "currency",
      "productId",
      "pricing"
    ],
    "properties": {
      "id": {
        "description": "The plan identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "name": {
        "description": "The plan name, displayed on invoices and receipts.",
        "type": "string"
      },
      "isActive": {
        "description": "If the plan is not active, customers cannot subscribe to the plan.",
        "type": "boolean"
      },
      "productId": {
        "description": "The related product identifier string",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "productOptions": {
        "type": "object",
        "description": "Name-value pairs to specify the product options.",
        "additionalProperties": {
          "type": "string"
        },
        "example": {
          "color": "red",
          "size": "xxl"
        }
      },
      "currency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "currencySign": {
        "description": "Currency sign",
        "readOnly": true,
        "type": "string"
      },
      "pricing": {
        "$ref": "#/components/schemas/PlanPriceFormula"
      },
      "recurringInterval": {
        "description": "The service interval. For a one-time item, use `null`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PlanPeriod"
          },
          {
            "type": "object",
            "properties": {
              "limit": {
                "description": "The number of invoices this subscription will generate (if 1, it will not generate any beyond the initial subscription creation).  For example, set this property to `12`, when the `periodUnit` is month and the `periodLength` is 1, for a 1 year contract billed monthly.",
                "type": "integer"
              },
              "billingTiming": {
                "$ref": "#/components/schemas/PlanBillingTiming"
              },
              "periodAnchorInstruction": {
                "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
              }
            }
          }
        ]
      },
      "trial": {
        "type": "object",
        "description": "The trial. Set `null` if no trial.",
        "required": [
          "price",
          "period"
        ],
        "properties": {
          "price": {
            "description": "The price of the trial. For a free trial, use `0`.",
            "type": "number",
            "format": "double"
          },
          "period": {
            "$ref": "#/components/schemas/PlanPeriod"
          }
        }
      },
      "setup": {
        "type": "object",
        "description": "The setup. Set `null` if no setup.",
        "required": [
          "price"
        ],
        "properties": {
          "price": {
            "description": "The price of a setup - 0 is a valid value (for free)",
            "type": "number",
            "format": "double"
          }
        }
      },
      "billingAnchor": {
        "description": "The billing anchor settings for this plan.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PlanBillingAnchor"
          }
        ]
      },
      "subscriptionCount": {
        "type": "integer",
        "readOnly": true,
        "description": "Number of subscriptions associated with this plan"
      },
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      },
      "createdTime": {
        "description": "Plan created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Plan updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "PlanBillingAnchor": {
    "type": "object",
    "description": "The billing anchor in conjunction with `billingTiming` allows to setup different billing use cases such as:\n\n- Bill immediately when the service period _starts_\n- Bill immediately after the service period _ends_\n- Bill _interval of time_ before the service period _starts_\n- Bill _interval of time_ after the service period _starts_\n- Bill _interval of time_ before the service period _ends_\n- Bill _interval of time_ after the service period _ends_\n",
    "properties": {
      "chronology": {
        "type": "string",
        "description": "The chronology of the billing time relatively to the service period start.",
        "enum": [
          "before",
          "after"
        ]
      },
      "billingAnchorInstruction": {
        "$ref": "#/components/schemas/BillingScheduleInstruction"
      }
    }
  },
  "PlanBillingTiming": {
    "type": "string",
    "default": "prepaid",
    "description": "The billing timing in relation to the service period.\nFor `prepaid` plans the customer pays when the service period starts,\nwhereas, for `postpaid` plans, the customer pays when the service period ends.\n",
    "enum": [
      "prepaid",
      "postpaid"
    ]
  },
  "PlanPeriod": {
    "type": "object",
    "required": [
      "unit",
      "length"
    ],
    "properties": {
      "unit": {
        "description": "The unit of time",
        "type": "string",
        "enum": [
          "day",
          "week",
          "month",
          "year"
        ]
      },
      "length": {
        "description": "The length of time",
        "type": "integer"
      }
    }
  },
  "PlanPriceFormula": {
    "type": "object",
    "discriminator": {
      "propertyName": "formula"
    },
    "required": [
      "formula"
    ],
    "properties": {
      "formula": {
        "type": "string",
        "description": "The price formula determines what algorithm is used to calculate the invoice price based on a few factors,\n- the quantity in the subscription (which may be variable if usage pricing, otherwise determined when creating the subscription)\n- the price brackets data\n\nTo determine which formula is correct, please see the price formula documentation.\n",
        "enum": [
          "fixed-fee",
          "flat-rate",
          "stairstep",
          "tiered",
          "volume"
        ]
      }
    }
  },
  "PriceBasedShippingRate": {
    "type": "object",
    "required": [
      "name",
      "currency",
      "price"
    ],
    "properties": {
      "name": {
        "description": "The shipping rate name",
        "type": "string",
        "maxLength": 255
      },
      "minOrderSubtotal": {
        "description": "Minimum order subtotal for which this shipping rate is applicable, defaults to 0.00",
        "type": "number",
        "format": "double",
        "default": 0
      },
      "maxOrderSubtotal": {
        "description": "Maximum order subtotal for which this shipping rate is applicable (NULL if no maximum)",
        "type": "number",
        "format": "double"
      },
      "price": {
        "description": "The shipping price - 0 is a valid value (for free)",
        "type": "number",
        "format": "double"
      },
      "currency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "Product": {
    "type": "object",
    "required": [
      "name"
    ],
    "description": "Products include digital goods, services, and physical goods.\nProducts appear on invoice line items. If you set a tax category identifier,\ntaxes will be calculated upon invoice generation.  If it is shippable,\nshipping will be calculated upon invoice generation.  Pricing and \nvariations are set within Plans.\n",
    "properties": {
      "id": {
        "description": "The product identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ],
        "example": "membership"
      },
      "name": {
        "description": "The product name",
        "type": "string",
        "maxLength": 255,
        "example": "Premium membership"
      },
      "unitLabel": {
        "description": "The unit label, such as per `seat` or per `unit`.",
        "type": "string",
        "maxLength": 50,
        "example": "seat",
        "default": "unit"
      },
      "description": {
        "description": "The product description",
        "type": "string",
        "maxLength": 512
      },
      "taxCategoryId": {
        "description": "The product's tax category identifier string",
        "type": "string",
        "enum": [
          "00000",
          "99999",
          "20010",
          "40030",
          "51020",
          "51010",
          "31000",
          "30070"
        ]
      },
      "requiresShipping": {
        "description": "If the product requires shipping, shipping calculations will be applied",
        "type": "boolean",
        "example": false
      },
      "accountingCode": {
        "description": "The product accounting code",
        "type": "string",
        "example": "4010"
      },
      "options": {
        "description": "The product options such as Color, Size, etc.  The product options definition does not include option values.  Those are defined within the Plans.",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      },
      "createdTime": {
        "description": "The product created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "The product updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "ResetPasswordToken": {
    "type": "object",
    "required": [
      "username",
      "password"
    ],
    "properties": {
      "token": {
        "description": "The token's identifier string",
        "type": "string",
        "readOnly": true
      },
      "username": {
        "description": "The token's username",
        "type": "string"
      },
      "credentialId": {
        "description": "Token's credential ID",
        "type": "string",
        "readOnly": true
      },
      "expiredTime": {
        "description": "Password expired time",
        "type": "string",
        "format": "date-time"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "ResourceCustomFields": {
    "description": "\"Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}\"`.\nThe format must follow the saved format (see Custom Fields section for the formats).\n",
    "type": "object"
  },
  "ResourceId": {
    "type": "string",
    "description": "The resource ID. Defaults to UUID v4",
    "maxLength": 50,
    "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
  },
  "RiskMetadata": {
    "type": "object",
    "properties": {
      "ipAddress": {
        "description": "The customer's IP",
        "type": "string",
        "format": "ipv4"
      },
      "isProxy": {
        "description": "True if customer's ip address is related to proxy",
        "type": "boolean",
        "readOnly": true
      },
      "isVpn": {
        "description": "True if customer's ip address is related to VPN",
        "type": "boolean",
        "readOnly": true
      },
      "isTor": {
        "description": "True if customer's ip address is related to TOR",
        "type": "boolean",
        "readOnly": true
      },
      "isHosting": {
        "description": "True if customer's ip address is related to hosting",
        "type": "boolean",
        "readOnly": true
      },
      "vpnServiceName": {
        "description": "VPN service name, if available",
        "type": "string",
        "readOnly": true
      },
      "isp": {
        "description": "Internet Service Provider name, if available",
        "type": "string",
        "readOnly": true
      },
      "country": {
        "description": "Country ISO Alpha-2 code for specified ipAddress",
        "maxLength": 2,
        "type": "string",
        "readOnly": true,
        "example": "US"
      },
      "region": {
        "description": "Region for specified ipAddress",
        "type": "string",
        "readOnly": true,
        "example": "NY"
      },
      "city": {
        "description": "City for specified ipAddress",
        "type": "string",
        "readOnly": true,
        "example": "New York"
      },
      "latitude": {
        "description": "Latitude for specified ipAddress",
        "type": "number",
        "format": "double",
        "readOnly": true
      },
      "longitude": {
        "description": "Longitude for specified ipAddress",
        "type": "number",
        "format": "double",
        "readOnly": true
      },
      "postalCode": {
        "description": "Postal code for specified ipAddress",
        "type": "string",
        "maxLength": 10,
        "readOnly": true
      },
      "timeZone": {
        "description": "Time zone for specified ipAddress",
        "type": "string",
        "readOnly": true,
        "example": "America/New_York"
      },
      "accuracyRadius": {
        "description": "Accuracy radius for specified ipAddress (kilometers)",
        "type": "integer",
        "readOnly": true
      },
      "fingerprint": {
        "description": "The fingerprint",
        "type": "string"
      },
      "httpHeaders": {
        "description": "HTTP headers",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "example": {
          "User-Agent": "Mozilla/5.0",
          "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
        }
      },
      "distance": {
        "description": "Distance between IP Address and Billing Address geolocation (kilometers)",
        "type": "integer",
        "readOnly": true
      },
      "score": {
        "description": "Risk score computed per all the factors",
        "type": "integer",
        "readOnly": true
      }
    }
  },
  "MatchedRule": {
    "type": "object",
    "readOnly": true,
    "properties": {
      "id": {
        "description": "Event tracking id",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "event": {
        "$ref": "#/components/schemas/EventType"
      },
      "description": {
        "description": "Rule's description",
        "type": "string"
      },
      "rulesVersion": {
        "type": "integer",
        "description": "Rule version"
      },
      "occurredTime": {
        "description": "Time when event occurred.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "context": {
        "type": "object",
        "description": "Event's context",
        "additionalProperties": {
          "type": "string"
        }
      },
      "processedRules": {
        "type": "object",
        "description": "Processed rules",
        "properties": {
          "name": {
            "type": "string",
            "description": "Rule name"
          },
          "actions": {
            "type": "array",
            "description": "Rule actions applied",
            "items": {
              "type": "string"
            }
          },
          "result": {
            "type": "string",
            "description": "Rule result"
          }
        }
      }
    }
  },
  "BillingScheduleInstruction": {
    "type": "object",
    "description": "The calculation instruction of billing time.\nThis is used in conjunction with the **service period anchor** to calculate the time the invoice is issued.\n",
    "discriminator": {
      "propertyName": "method"
    },
    "default": {
      "method": "immediately"
    },
    "required": [
      "method"
    ],
    "properties": {
      "method": {
        "type": "string",
        "default": "immediately",
        "enum": [
          "immediately",
          "date-interval"
        ]
      }
    }
  },
  "CommonScheduleInstruction": {
    "type": "object",
    "description": "The calculation instruction of scheduled time",
    "discriminator": {
      "propertyName": "method"
    },
    "properties": {
      "method": {
        "type": "string",
        "enum": [
          "auto",
          "intelligent",
          "immediately",
          "date-interval",
          "day-of-month",
          "day-of-week"
        ]
      }
    },
    "required": [
      "method"
    ]
  },
  "CustomEventScheduleInstruction": {
    "type": "object",
    "description": "The calculation instruction of scheduled time",
    "discriminator": {
      "propertyName": "method"
    },
    "properties": {
      "method": {
        "type": "string",
        "enum": [
          "date-interval",
          "day-of-month",
          "day-of-week"
        ]
      }
    },
    "required": [
      "method"
    ]
  },
  "InvoiceRetryScheduleInstruction": {
    "type": "object",
    "description": "The calculation instruction of scheduled time",
    "discriminator": {
      "propertyName": "method"
    },
    "properties": {
      "method": {
        "type": "string",
        "enum": [
          "intelligent",
          "immediately",
          "date-interval",
          "day-of-month",
          "day-of-week"
        ]
      }
    },
    "required": [
      "method"
    ]
  },
  "auto": {
    "allOf": [
      {
        "$ref": "#/components/schemas/CommonScheduleInstruction"
      }
    ]
  },
  "date-interval": {
    "allOf": [
      {
        "$ref": "#/components/schemas/CommonScheduleInstruction"
      },
      {
        "$ref": "#/components/schemas/CustomEventScheduleInstruction"
      },
      {
        "$ref": "#/components/schemas/BillingScheduleInstruction"
      },
      {
        "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
      },
      {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "description": "The number of the units",
            "minimum": 1
          },
          "unit": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "second",
                  "minute",
                  "hour",
                  "day",
                  "month",
                  "year"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "seconds",
                  "minutes",
                  "hours",
                  "days",
                  "months",
                  "years"
                ]
              }
            ]
          }
        },
        "required": [
          "duration",
          "unit"
        ]
      }
    ]
  },
  "day-of-month": {
    "allOf": [
      {
        "$ref": "#/components/schemas/CommonScheduleInstruction"
      },
      {
        "$ref": "#/components/schemas/CustomEventScheduleInstruction"
      },
      {
        "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
      },
      {
        "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
      },
      {
        "type": "object",
        "properties": {
          "day": {
            "type": "integer",
            "minimum": 1,
            "maximum": 31,
            "description": "The day of the month when event will be scheduled.\nBe aware if the month has less days,\nthe last day of the month will be selected.\n"
          },
          "time": {
            "type": "string",
            "description": "Extended ISO-8601 format of time",
            "pattern": "^(([01][0-9]|2[0-3]):([0-5][0-9])(?::([0-5][0-9]))?)((?:[+-](?:0[0-9]|1[12])(?::?[0-5][0-9])?)|Z)?$"
          }
        },
        "required": [
          "day"
        ]
      }
    ]
  },
  "day-of-week": {
    "allOf": [
      {
        "$ref": "#/components/schemas/CommonScheduleInstruction"
      },
      {
        "$ref": "#/components/schemas/CustomEventScheduleInstruction"
      },
      {
        "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
      },
      {
        "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
      },
      {
        "type": "object",
        "properties": {
          "day": {
            "type": "string",
            "enum": [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"
            ]
          },
          "week": {
            "type": "string",
            "default": "next",
            "enum": [
              "next",
              "first-in-month",
              "last-in-month"
            ]
          },
          "time": {
            "type": "string",
            "description": "Extended ISO-8601 format of time",
            "pattern": "^(([01][0-9]|2[0-3]):([0-5][0-9])(?::([0-5][0-9]))?)((?:[+-](?:0[0-9]|1[12])(?::?[0-5][0-9])?)|Z)?$"
          }
        },
        "required": [
          "day"
        ]
      }
    ]
  },
  "immediately": {
    "allOf": [
      {
        "$ref": "#/components/schemas/CommonScheduleInstruction"
      },
      {
        "$ref": "#/components/schemas/BillingScheduleInstruction"
      },
      {
        "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
      },
      {
        "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
      }
    ]
  },
  "intelligent": {
    "allOf": [
      {
        "$ref": "#/components/schemas/CommonScheduleInstruction"
      },
      {
        "$ref": "#/components/schemas/CustomEventScheduleInstruction"
      },
      {
        "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
      },
      {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "description": "The number of the units",
            "minimum": 1
          },
          "unit": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "second",
                  "minute",
                  "hour",
                  "day",
                  "month",
                  "year"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "seconds",
                  "minutes",
                  "hours",
                  "days",
                  "months",
                  "years"
                ]
              }
            ]
          }
        },
        "required": [
          "duration",
          "unit"
        ]
      }
    ]
  },
  "ServicePeriodAnchorInstruction": {
    "type": "object",
    "description": "Instruction for calculating the service period anchor.\nThis is used in conjunction with the **subscription start** to calculate the time the service period starts and ends.\n",
    "discriminator": {
      "propertyName": "method"
    },
    "default": {
      "method": "immediately"
    },
    "required": [
      "method"
    ],
    "properties": {
      "method": {
        "type": "string",
        "default": "immediately",
        "enum": [
          "immediately",
          "day-of-month",
          "day-of-week"
        ]
      }
    }
  },
  "Search": {
    "type": "object",
    "properties": {
      "customers": {
        "description": "List of returned customers",
        "readOnly": true,
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Customer"
            }
          ]
        }
      },
      "invoices": {
        "description": "List of returned invoices",
        "readOnly": true,
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Invoice"
            }
          ]
        }
      },
      "orders": {
        "description": "List of returned orders",
        "readOnly": true,
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Subscription"
            }
          ]
        }
      },
      "transactions": {
        "description": "List of returned transactions",
        "readOnly": true,
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Transaction"
            }
          ]
        }
      },
      "searched": {
        "description": "Names of searched resources, even if they returned nothing",
        "readOnly": true,
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    }
  },
  "ServerTimestamp": {
    "type": "string",
    "description": "Read-only timestamp, automatically assigned on back-end.",
    "format": "date-time",
    "readOnly": true
  },
  "ShippingZone": {
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "id": {
        "description": "The shipping zone identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "name": {
        "description": "The shipping zone name",
        "type": "string",
        "maxLength": 255
      },
      "countries": {
        "description": "Countries covered by the shipping zone. A country can only belong to one shipping zone (no overlapping).\nThis property can be empty or null to create a default shipping zone for countries that were not specified in other zones.\n",
        "type": "array",
        "items": {
          "description": "Country ISO Alpha-2 code",
          "type": "string",
          "pattern": "^[A-Z]{2}$"
        }
      },
      "rates": {
        "description": "Price-based shipping rate instructions",
        "type": "array",
        "items": {
          "description": "Price based shipping rate instruction",
          "allOf": [
            {
              "$ref": "#/components/schemas/PriceBasedShippingRate"
            }
          ]
        }
      },
      "isDefault": {
        "description": "Is this Shipping Zone default",
        "readOnly": true
      },
      "createdTime": {
        "description": "The shipping zone created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "The shipping zone updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "Subscription": {
    "type": "object",
    "discriminator": {
      "propertyName": "orderType"
    },
    "required": [
      "customerId",
      "websiteId",
      "items"
    ],
    "properties": {
      "id": {
        "description": "The Subscription identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "orderType": {
        "description": "Specifies the type of order, a subscription or a one-time purchase.\n",
        "type": "string",
        "enum": [
          "subscription-order",
          "one-time-order"
        ],
        "default": "subscription-order"
      },
      "status": {
        "type": "string",
        "description": "The status of the subscription service. A subscription starts\nin the `pending` status, and will become `active` when the\nservice period begins.\n",
        "readOnly": true,
        "enum": [
          "pending",
          "active",
          "canceled",
          "churned",
          "suspended",
          "paused",
          "abandoned"
        ]
      },
      "billingStatus": {
        "description": "The billing status of the most recent invoice.  It may\nhelp you determine if you should change the service status\nsuch as suspending the service.\n",
        "type": "string",
        "readOnly": true,
        "enum": [
          "unpaid",
          "past-due",
          "delinquent",
          "paid",
          "voided",
          "refunded",
          "disputed",
          "voided"
        ]
      },
      "customerId": {
        "description": "Unique id for each customer",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "websiteId": {
        "description": "Unique id for each website",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "initialInvoiceId": {
        "description": "Unique id for the initial invoice",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "recentInvoiceId": {
        "description": "Unique id for the most recently issued invoice. It might not be `paid` yet.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "items": {
        "type": "array",
        "minItems": 1,
        "items": {
          "type": "object",
          "required": [
            "planId"
          ],
          "properties": {
            "planId": {
              "description": "Unique id for each plan",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "quantity": {
              "description": "Number of units of the product on the given plan",
              "type": "integer"
            }
          }
        }
      },
      "billingAnchor": {
        "description": "The billing anchor settings to override plan settings. To use plan settings, set `null`.\nTo use multiple plans in one subscription they all must have the same billing period,\nthis property allows to subscribe to different plans.\n",
        "nullable": true,
        "example": null,
        "allOf": [
          {
            "$ref": "#/components/schemas/PlanBillingAnchor"
          }
        ]
      },
      "recurringInterval": {
        "type": "object",
        "description": "The recurring interval to override plan settings. To use plan settings, set `null`.\nTo use multiple plans in one subscription they all must have the same recurring period length,\nthis property allows to subscribe to different plans.\n",
        "nullable": true,
        "example": null,
        "properties": {
          "periodAnchorInstruction": {
            "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
          }
        }
      },
      "deliveryAddress": {
        "description": "Delivery address",
        "nullable": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          }
        ]
      },
      "billingAddress": {
        "description": "Billing address",
        "nullable": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          }
        ]
      },
      "autopay": {
        "description": "Autopay determines if a payment attempt will be automatic",
        "type": "boolean",
        "default": true
      },
      "riskMetadata": {
        "nullable": true,
        "example": null,
        "description": "Risk metadata. If null, the value would coalesce to the risk metadata captured when creating the payment token.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RiskMetadata"
          }
        ]
      },
      "startTime": {
        "description": "Subscription start time.  When the value is sent as null, it will use the current time. This value can't be in past more than one service period.",
        "nullable": true,
        "example": null,
        "type": "string",
        "format": "date-time"
      },
      "activationTime": {
        "description": "Subscription activation time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "couponIds": {
        "type": "array",
        "nullable": true,
        "description": "A list of coupons to redeem on the customer and restrict to this subscription.\nRead more about [coupons here](https://help.rebilly.com/invoices-and-subscriptions/coupons-discounts).\n\nThis parameter respects the following logic:\n\n- When not passed then applied coupons will not be changed.\n\n- When empty array passed then all applied coupon redemptions will be canceled.\n\n- When list of coupons is passed then not applied yet coupons will be applied, already applied coupons\nwill not change their state, applied coupons that are not presented in passed list will be canceled.\n\nIf list of applied coupons on pending subscription will be changed due to this param during update subscription,\n Invoice for the subscription will be reissued.\n",
        "writeOnly": true,
        "items": {
          "type": "string",
          "description": "Coupon ID"
        }
      },
      "poNumber": {
        "description": "Purchase order number, will be displayed on the issued invoices",
        "nullable": true,
        "example": "PO123456",
        "type": "string"
      },
      "renewalReminderTime": {
        "description": "Time renewal reminder event will be triggered",
        "nullable": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "renewalReminderNumber": {
        "description": "Number of renewal reminder events triggered",
        "type": "integer",
        "readOnly": true
      },
      "trialReminderTime": {
        "description": "Time renewal reminder event will be triggered",
        "nullable": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "trialReminderNumber": {
        "description": "Number of renewal reminder events triggered",
        "type": "integer",
        "readOnly": true
      },
      "revision": {
        "description": "The number of times the subscription data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
        "type": "integer",
        "readOnly": true
      },
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/CustomerLink"
            },
            {
              "$ref": "#/components/schemas/InitialInvoiceLink"
            },
            {
              "$ref": "#/components/schemas/RecentInvoiceLink"
            },
            {
              "$ref": "#/components/schemas/WebsiteLink"
            }
          ]
        }
      },
      "_embedded": {
        "type": "array",
        "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/RecentInvoiceEmbed"
            },
            {
              "$ref": "#/components/schemas/InitialInvoiceEmbed"
            },
            {
              "$ref": "#/components/schemas/CustomerEmbed"
            },
            {
              "$ref": "#/components/schemas/WebsiteEmbed"
            },
            {
              "$ref": "#/components/schemas/LeadSourceEmbed"
            }
          ]
        }
      }
    }
  },
  "one-time-order": {
    "allOf": [
      {
        "$ref": "#/components/schemas/Subscription"
      },
      {
        "properties": {
          "status": {
            "description": "One-time order status",
            "type": "string",
            "readOnly": true,
            "enum": [
              "pending",
              "paid",
              "canceled"
            ]
          }
        }
      },
      {
        "$ref": "#/components/schemas/UpcomingInvoice"
      },
      {
        "$ref": "#/components/schemas/SubscriptionMetadata"
      },
      {
        "$ref": "#/components/schemas/SubscriptionCancellationState"
      }
    ]
  },
  "subscription-order": {
    "allOf": [
      {
        "$ref": "#/components/schemas/Subscription"
      },
      {
        "properties": {
          "status": {
            "description": "Subscription status is deprecated and the values will change to `active`, `canceled`.",
            "type": "string",
            "readOnly": true,
            "enum": [
              "Active",
              "Will become active at a future date",
              "Active but set to cancel at next rebill date",
              "Cancelled",
              "Inactive",
              "Suspended"
            ]
          },
          "inTrial": {
            "description": "True if the subscription is currently in a trial period",
            "type": "boolean",
            "readOnly": true
          },
          "trial": {
            "type": "object",
            "description": "To use plan defaults do not send the `trial` key, or send a `null` value with it.",
            "required": [
              "endTime"
            ],
            "properties": {
              "enabled": {
                "description": "Enable or disable the trial for this subscription. If enabled for plans without trial prices, the trial will be free.",
                "type": "boolean"
              },
              "endTime": {
                "description": "The time the trial should end",
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "endTime": {
            "description": "Subscription end time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "renewalTime": {
            "description": "Subscription renewal time",
            "type": "string",
            "format": "date-time"
          },
          "rebillNumber": {
            "description": "The current period number",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      {
        "$ref": "#/components/schemas/UpcomingInvoice"
      },
      {
        "$ref": "#/components/schemas/SubscriptionMetadata"
      },
      {
        "$ref": "#/components/schemas/SubscriptionCancellationState"
      }
    ]
  },
  "SubscriptionCancellation": {
    "type": "object",
    "required": [
      "subscriptionId",
      "churnTime"
    ],
    "properties": {
      "id": {
        "description": "Cancellation identifier",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "subscriptionId": {
        "description": "Identifier of the canceled subscription",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "proratedInvoiceId": {
        "description": "Identifier of the invoice on which the cancellation proration is calculated.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "appliedInvoiceId": {
        "description": "The identifier of the invoice where the cancellation fees or credits are applied.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "canceledBy": {
        "description": "Who did the cancellation",
        "type": "string",
        "default": "customer",
        "enum": [
          "merchant",
          "customer"
        ]
      },
      "reason": {
        "description": "Cancellation reason",
        "type": "string",
        "default": "other",
        "enum": [
          "did-not-use",
          "did-not-want",
          "missing-features",
          "bugs-or-problems",
          "do-not-remember",
          "risk-warning",
          "contract-expired",
          "too-expensive",
          "other",
          "billing-failure"
        ]
      },
      "description": {
        "description": "Cancel reason description in free form",
        "type": "string",
        "maxLength": 255
      },
      "prorated": {
        "description": "Defines if the customer gets a pro-rata credit for the time remaining between `churnTime` and\nsubscription's next renewal time.\n",
        "type": "boolean",
        "default": false
      },
      "status": {
        "description": "\"draft\" defines that the cancellation isn't applied on an invoice and subscription but\ncan be inspected to see the charge.\n\"confirmed\" will set a subscription to be canceled when the `churnTime` is reached.\n\"completed\" is a read-only status which is set by the system when the churnTime is reached.\nThe cancellation may not be changed or deleted when the status is \"completed\".\n",
        "type": "string",
        "default": "confirmed",
        "enum": [
          "draft",
          "confirmed",
          "completed",
          "revoked"
        ]
      },
      "canceledTime": {
        "description": "The cancellation time (when the status is confirmed which is by default unless specified \"draft\").",
        "type": "string",
        "format": "date-time",
        "readOnly": true
      },
      "createdTime": {
        "description": "The time of resource creation (when it is posted).",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "churnTime": {
        "description": "The time when the subscription will be deactivated.",
        "type": "string",
        "format": "date-time"
      },
      "lineItems": {
        "description": "Items to be added to the new invoice. Proration item is generated and added automatically.",
        "allOf": [
          {
            "$ref": "#/components/schemas/UpcomingInvoiceItemCollection"
          }
        ]
      },
      "lineItemSubtotal": {
        "description": "Subtotal of the line items which will be added after the subscription's cancellation",
        "readOnly": true,
        "type": "number",
        "example": 49.95
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "SubscriptionCancellationState": {
    "type": "object",
    "properties": {
      "canceledTime": {
        "description": "Subscription canceled time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "canceledBy": {
        "description": "Canceled by",
        "type": "string",
        "readOnly": true,
        "enum": [
          "merchant",
          "customer",
          "rebilly"
        ]
      },
      "cancelCategory": {
        "description": "Cancel category",
        "type": "string",
        "readOnly": true,
        "enum": [
          "billing-failure",
          "did-not-use",
          "did-not-want",
          "missing-features",
          "bugs-or-problems",
          "do-not-remember",
          "risk-warning",
          "contract-expired",
          "too-expensive",
          "never-started",
          "switched-plan",
          "other"
        ]
      },
      "cancelDescription": {
        "description": "Cancel reason description in free form",
        "type": "string",
        "readOnly": true,
        "maxLength": 255
      }
    }
  },
  "SubscriptionMetadata": {
    "type": "object",
    "properties": {
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      },
      "createdTime": {
        "description": "Subscription created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Subscription updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/CustomerLink"
            },
            {
              "$ref": "#/components/schemas/WebsiteLink"
            },
            {
              "$ref": "#/components/schemas/LeadSourceLink"
            }
          ]
        }
      }
    }
  },
  "SubscriptionReactivation": {
    "type": "object",
    "required": [
      "subscriptionId"
    ],
    "properties": {
      "id": {
        "description": "Reactivation identifier",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "subscriptionId": {
        "description": "Identifier of the reactivated subscription",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "cancellationId": {
        "description": "Identifier of the related cancellation",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "description": {
        "description": "Reactivation reason description in free form",
        "type": "string",
        "maxLength": 255
      },
      "effectiveTime": {
        "description": "The date from which the service period would start, unless the subscription is canceled but still active.\nIn case the susbcription is still active, the subscription will continue the current service period.\nIf omitted, it will default to the current time.\n",
        "type": "string",
        "format": "date-time"
      },
      "renewalTime": {
        "description": "The time of the next subscription renewal. If omitted then it is computed from the effective time.\nIf the subscription is canceled but active it is ignored, so the next renewal will happen as scheduled.\n",
        "type": "string",
        "format": "date-time"
      },
      "createdTime": {
        "description": "The time of resource creation (when it is posted).",
        "type": "string",
        "format": "date-time",
        "readOnly": true
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "UpcomingInvoice": {
    "type": "object",
    "properties": {
      "lineItems": {
        "description": "Subscription line items which queue until the next renewal (or interim) invoice is issued for the subscription.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/UpcomingInvoiceItemCollection"
          }
        ]
      },
      "lineItemSubtotal": {
        "description": "Subtotal of line items in this subscription (signed value).  If credits exceed debits, it will be a negative number.",
        "readOnly": true,
        "type": "number",
        "example": 49.95
      }
    }
  },
  "UpcomingInvoiceItem": {
    "type": "object",
    "description": "Line item",
    "required": [
      "type",
      "unitPriceAmount",
      "unitPriceCurrency",
      "quantity"
    ],
    "properties": {
      "type": {
        "description": "Type of line item",
        "type": "string",
        "enum": [
          "debit",
          "credit"
        ]
      },
      "description": {
        "description": "Description of line item",
        "type": "string"
      },
      "unitPriceAmount": {
        "description": "Unit price of the line item",
        "type": "number",
        "format": "double",
        "example": 49.95
      },
      "unitPriceCurrency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "quantity": {
        "description": "Quantity of line item",
        "type": "integer",
        "example": 1
      },
      "periodStartTime": {
        "description": "Date-time when the period begins for this item",
        "type": "string",
        "format": "date-time"
      },
      "periodEndTime": {
        "description": "Date-time when the period ends for this item",
        "type": "string",
        "format": "date-time"
      },
      "createdTime": {
        "description": "Date-time when the item was added to the subscription",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      }
    }
  },
  "UpcomingInvoiceItemCollection": {
    "type": "array",
    "items": {
      "$ref": "#/components/schemas/UpcomingInvoiceItem"
    }
  },
  "SubscriptionChange": {
    "type": "object",
    "required": [
      "planId",
      "renewalPolicy",
      "prorated"
    ],
    "properties": {
      "planId": {
        "description": "The plan identifier string",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "renewalPolicy": {
        "description": "The value determines whether the subscription retains its current `renewalTime` or resets it to a newly calculated `renewalTime`.",
        "type": "string",
        "enum": [
          "reset",
          "retain"
        ]
      },
      "prorated": {
        "description": "Whether or not to give a pro rata credit for the amount of time remaining between the `effectiveTime` and the end of the current period.\nIn addition, if the `renewalTime` is retained (by setting the `renewalPolicy` to `retain`), then a pro rata debit will occur as well,\nfor the amount between the `effectiveTime` and the `renewalTime` as a percentage of the normal period size.\n",
        "type": "boolean"
      },
      "effectiveTime": {
        "description": "The date from which the renewal time (for `reset` operations) and proration calculations are made.  If omitted, it will default to the current time.",
        "type": "string",
        "format": "date-time"
      },
      "preview": {
        "description": "If set to true, it will not change the subscription.  It allows for a way to preview the changes that would be made to a subscription.",
        "type": "boolean",
        "default": false
      }
    }
  },
  "SubscriptionInvoice": {
    "type": "object",
    "properties": {
      "transactionId": {
        "description": "If present, applies a payment to the invoice created.  If the payment is for the invoice total, it would be marked as paid.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      }
    }
  },
  "Tag": {
    "type": "object",
    "description": "Tag",
    "required": [
      "name"
    ],
    "properties": {
      "id": {
        "description": "The tag's identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "name": {
        "description": "The tag's unique name, which is case-insensitive.",
        "type": "string",
        "maxLength": 255,
        "pattern": "^[@~\\-\\.\\w\\s]+$",
        "example": "New"
      },
      "createdTime": {
        "description": "The tag's created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "The tag's updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            }
          ]
        }
      }
    }
  },
  "ThreeDSecure": {
    "type": "object",
    "required": [
      "enrolled",
      "enrollmentEci",
      "customerId",
      "gatewayAccountId",
      "paymentCardId",
      "websiteId",
      "currency",
      "amount"
    ],
    "properties": {
      "id": {
        "description": "The 3D Secure entry identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "customerId": {
        "description": "Related customer ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "gatewayAccountId": {
        "description": "Related gateway account ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "paymentCardId": {
        "description": "Related payment card ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "websiteId": {
        "description": "Related Website ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "enrolled": {
        "description": "Is the cardholder enrolled in 3DSecure",
        "type": "string",
        "enum": [
          "Y",
          "N",
          "U"
        ]
      },
      "enrollmentEci": {
        "description": "The 3D Secure entry enrollment eci",
        "type": "string"
      },
      "eci": {
        "description": "The 3D Secure entry electronic commerce indicator",
        "type": "integer"
      },
      "cavv": {
        "description": "The 3D Secure entry cardholder authentication verification value",
        "type": "string"
      },
      "xid": {
        "description": "The 3D Secure entry transaction Id",
        "type": "string"
      },
      "payerAuthResponseStatus": {
        "description": "The 3D Secure entry Auth Response Status",
        "type": "string",
        "enum": [
          "Y",
          "N",
          "U",
          "A"
        ]
      },
      "signatureVerification": {
        "description": "If signature was verified",
        "type": "string",
        "enum": [
          "Y",
          "N"
        ]
      },
      "amount": {
        "description": "Transaction amount",
        "type": "number",
        "format": "double"
      },
      "currency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "createdTime": {
        "description": "The 3D Secure entry created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "redemption-cancel": {
    "description": "Cancel Redemption",
    "allOf": [
      {
        "$ref": "#/components/schemas/TimelineAction"
      },
      {
        "type": "object",
        "properties": {
          "redemptionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          }
        }
      }
    ]
  },
  "resend-email": {
    "description": "Resend Email action",
    "allOf": [
      {
        "$ref": "#/components/schemas/TimelineAction"
      },
      {
        "type": "object",
        "properties": {
          "messageId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          }
        }
      }
    ]
  },
  "CustomerTimeline": {
    "type": "object",
    "properties": {
      "id": {
        "description": "The Timeline message identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "type": {
        "description": "Timeline message type",
        "type": "string",
        "enum": [
          "customer-comment-created",
          "customer-created",
          "primary-address-changed",
          "default-payment-instrument-changed",
          "lead-source-changed",
          "custom-fields-changed",
          "coupon-redeemed",
          "coupon-redemption-canceled",
          "kyc-document-created",
          "kyc-document-accepted",
          "kyc-document-manually-accepted",
          "kyc-document-rejected",
          "kyc-document-manually-rejected",
          "payment-card-expired",
          "payment-instrument-created",
          "payment-instrument-deactivated",
          "customer-blacklisted",
          "customer-payment-card-blacklisted",
          "invoice-created",
          "invoice-issued",
          "invoice-abandoned",
          "invoice-voided",
          "invoice-past-due",
          "invoice-paid",
          "invoice-partially-paid",
          "invoice-disputed",
          "invoice-refunded",
          "invoice-partially-refunded",
          "order-created",
          "order-renewed",
          "order-activated",
          "order-reactivated",
          "order-canceled",
          "order-upgraded",
          "order-downgraded",
          "order-churned",
          "transaction-approved",
          "transaction-canceled",
          "transaction-declined",
          "transaction-abandoned",
          "transaction-refunded",
          "transaction-voided",
          "transaction-discrepancy-found",
          "transaction-amount-discrepancy-found",
          "email-message-sent",
          "custom-event-processed",
          "custom-event",
          "transaction-waiting-gateway"
        ]
      },
      "customEventType": {
        "description": "Timeline custom event type. Used with `custom-event` type. Must be defined using [Customer Timeline custom event API](#operation/PostCustomerTimelineCustomEventType)",
        "type": "string",
        "nullable": true,
        "minLength": 1,
        "maxLength": 255
      },
      "customData": {
        "description": "Timeline custom event data. Used with `custom-event` type. Will be transformed to `extraData` two-column table in response",
        "type": "object",
        "writeOnly": true,
        "example": {
          "customAttribute": "customValue",
          "otherAttribute": "otherValue"
        }
      },
      "triggeredBy": {
        "description": "Shows who or what triggered the Timeline message",
        "type": "string",
        "readOnly": true,
        "enum": [
          "rebilly",
          "app",
          "direct-api"
        ]
      },
      "message": {
        "description": "The message that describes the message details",
        "type": "string"
      },
      "extraData": {
        "$ref": "#/components/schemas/TimelineExtraData"
      },
      "occurredTime": {
        "description": "Timeline message time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "CustomerTimelineCustomEvent": {
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "id": {
        "description": "Customer Timeline Custom Event identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "name": {
        "description": "Customer Timeline Custom Event type name. It must not be similar to any Rebilly system event.",
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "createdTime": {
        "description": "Customer Timeline Custom event created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Customer Timeline Custom event updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "InvoiceTimeline": {
    "type": "object",
    "properties": {
      "id": {
        "description": "The Timeline message identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "type": {
        "description": "Timeline message type",
        "type": "string",
        "readOnly": true,
        "enum": [
          "timeline-comment-created",
          "invoice-created",
          "invoice-issued",
          "invoice-abandoned",
          "invoice-voided",
          "invoice-past-due",
          "invoice-paid",
          "invoice-partially-paid",
          "invoice-disputed",
          "invoice-refunded",
          "invoice-partially-refunded",
          "invoice-renewal-payment-declined",
          "email-message-sent"
        ]
      },
      "triggeredBy": {
        "description": "Shows who or what triggered the Timeline event",
        "type": "string",
        "readOnly": true,
        "enum": [
          "rebilly",
          "app",
          "direct-api"
        ]
      },
      "message": {
        "description": "The message that describes the message details",
        "type": "string"
      },
      "extraData": {
        "$ref": "#/components/schemas/TimelineExtraData"
      },
      "occurredTime": {
        "description": "Timeline message time",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "OrderTimeline": {
    "type": "object",
    "properties": {
      "id": {
        "description": "The Timeline message identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "type": {
        "description": "Timeline message type",
        "type": "string",
        "readOnly": true,
        "enum": [
          "timeline-comment-created",
          "order-renewed",
          "order-activated",
          "order-reactivated",
          "order-canceled",
          "order-upgraded",
          "order-downgraded",
          "order-billing-address-changed",
          "order-delivery-address-changed",
          "order-renewal-time-changed",
          "order-churned",
          "order-custom-fields-changed",
          "order-items-changed",
          "order-billing-anchor-changed",
          "order-recurring-interval-changed",
          "order-risk-metadata-changed",
          "email-message-sent",
          "coupon-applied",
          "invoice-created",
          "invoice-issued",
          "invoice-abandoned",
          "invoice-voided",
          "invoice-past-due",
          "invoice-paid",
          "invoice-partially-paid",
          "invoice-disputed",
          "invoice-refunded",
          "invoice-partially-refunded",
          "invoice-renewal-payment-declined"
        ]
      },
      "triggeredBy": {
        "description": "Shows who or what triggered the Timeline message",
        "type": "string",
        "readOnly": true,
        "enum": [
          "rebilly",
          "app",
          "direct-api"
        ]
      },
      "message": {
        "description": "The message that describes the message details",
        "type": "string"
      },
      "extraData": {
        "$ref": "#/components/schemas/TimelineExtraData"
      },
      "occurredTime": {
        "description": "Timeline message time",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "three-columns": {
    "allOf": [
      {
        "$ref": "#/components/schemas/TimelineTable"
      },
      {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Table data. Each array element represents a table row",
            "items": {
              "type": "object",
              "properties": {
                "attribute": {
                  "type": "string"
                },
                "previousValue": {
                  "type": "string"
                },
                "newValue": {
                  "type": "string"
                }
              },
              "example": {
                "attribute": "Descriptor",
                "previousValue": "test.com",
                "newValue": "new-test.com"
              }
            }
          }
        }
      }
    ]
  },
  "TimelineAction": {
    "type": "object",
    "discriminator": {
      "propertyName": "action"
    },
    "readOnly": true,
    "properties": {
      "action": {
        "type": "string",
        "enum": [
          "resend-email",
          "redemption-cancel"
        ]
      }
    }
  },
  "TimelineExtraData": {
    "type": "object",
    "description": "Additional data",
    "readOnly": true,
    "properties": {
      "actions": {
        "description": "Actions available to a Timeline message. Can be empty in case no actions are available for a message",
        "type": "array",
        "minItems": 0,
        "items": {
          "$ref": "#/components/schemas/TimelineAction"
        }
      },
      "tables": {
        "type": "array",
        "minItems": 0,
        "items": {
          "$ref": "#/components/schemas/TimelineTable"
        }
      },
      "author": {
        "type": "object",
        "description": "Timeline comment author data",
        "properties": {
          "userFullName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "mentions": {
        "type": "object",
        "additionalProperties": {
          "type": "string",
          "example": {
            "@test@mail.com": "userId-1"
          }
        }
      },
      "links": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "resourceType": {
              "type": "string",
              "enum": [
                "kyc-document",
                "invoice",
                "subscription",
                "transaction",
                "email-message",
                "dispute"
              ]
            },
            "resourceId": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "placeholder": {
              "type": "string",
              "example": "KYC Document"
            }
          }
        }
      }
    }
  },
  "TimelineTable": {
    "type": "object",
    "description": "Additional information about Timeline message",
    "discriminator": {
      "propertyName": "type"
    },
    "properties": {
      "type": {
        "type": "string",
        "enum": [
          "two-columns",
          "three-columns"
        ]
      },
      "title": {
        "type": "string",
        "description": "Data table title"
      },
      "footer": {
        "type": "string",
        "description": "Data table footer"
      }
    }
  },
  "TransactionTimeline": {
    "type": "object",
    "properties": {
      "id": {
        "description": "The Timeline message identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "type": {
        "description": "Timeline message type",
        "type": "string",
        "readOnly": true,
        "enum": [
          "timeline-comment-created",
          "transaction-approved",
          "transaction-canceled",
          "transaction-declined",
          "transaction-abandoned",
          "transaction-refunded",
          "transaction-voided",
          "transaction-discrepancy-found",
          "transaction-amount-discrepancy-found",
          "transaction-reconciled",
          "transaction-initiated",
          "transaction-retried",
          "risk-score-changed",
          "transaction-timeout-resolved",
          "dispute-created",
          "dispute-won",
          "dispute-lost",
          "dispute-responded",
          "dispute-forfeited",
          "dispute-changed",
          "gateway-response-received",
          "transaction-scheduled-time-changed",
          "transaction-rules-processed",
          "transaction-capture-delayed",
          "transaction-captured",
          "transaction-waiting-gateway"
        ]
      },
      "triggeredBy": {
        "description": "Shows who or what triggered the Timeline message",
        "type": "string",
        "readOnly": true,
        "enum": [
          "rebilly",
          "app",
          "direct-api"
        ]
      },
      "message": {
        "description": "The message that describes the message details",
        "type": "string"
      },
      "extraData": {
        "$ref": "#/components/schemas/TimelineExtraData"
      },
      "occurredTime": {
        "description": "Timeline message time",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "two-columns": {
    "allOf": [
      {
        "$ref": "#/components/schemas/TimelineTable"
      },
      {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Table data. Each array element represents a table row",
            "items": {
              "type": "object",
              "properties": {
                "attribute": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "example": {
                "attribute": "Who",
                "value": "John Doe"
              }
            }
          }
        }
      }
    ]
  },
  "TransactionGatewayLog": {
    "type": "object",
    "readOnly": true,
    "properties": {
      "headers": {
        "description": "The request headers",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "url": {
        "description": "The request URL",
        "type": "string"
      },
      "request": {
        "description": "The request body",
        "type": "string"
      },
      "response": {
        "description": "The response body",
        "type": "string"
      },
      "duration": {
        "description": "The request time, msec",
        "type": "integer"
      },
      "createdTime": {
        "description": "The log entry created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/TransactionLink"
        }
      }
    }
  },
  "TransactionRefund": {
    "type": "object",
    "required": [
      "amount"
    ],
    "properties": {
      "amount": {
        "description": "Refund amount",
        "type": "number",
        "format": "double"
      }
    }
  },
  "RedirectUrls": {
    "type": "object",
    "deprecated": true,
    "description": "The redirect URIs, now deprecated.  Use `redirectUrl` instead.",
    "required": [
      "error",
      "success",
      "decline",
      "cancel"
    ],
    "properties": {
      "error": {
        "type": "string",
        "format": "url"
      },
      "success": {
        "type": "string",
        "format": "url"
      },
      "decline": {
        "type": "string",
        "format": "url"
      },
      "cancel": {
        "type": "string",
        "format": "url"
      }
    }
  },
  "ThreeDSecureResult": {
    "type": "object",
    "readOnly": true,
    "required": [
      "enrolled",
      "authenticated",
      "liability"
    ],
    "properties": {
      "enrolled": {
        "description": "Is the cardholder enrolled in 3D Secure",
        "type": "string",
        "enum": [
          "yes",
          "no",
          "invalid card/timeout",
          "unavailable"
        ]
      },
      "authenticated": {
        "description": "The 3D Secure entry Auth Response Status",
        "type": "string",
        "enum": [
          "yes",
          "no",
          "not applicable",
          "attempted"
        ]
      },
      "liability": {
        "type": "string",
        "enum": [
          "protected",
          "not protected",
          "protected (attempt)"
        ]
      }
    }
  },
  "Transaction": {
    "type": "object",
    "properties": {
      "id": {
        "description": "The transaction identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "type": {
        "description": "Transaction type",
        "type": "string",
        "readOnly": true,
        "enum": [
          "authorize",
          "capture",
          "credit",
          "refund",
          "sale",
          "void"
        ]
      },
      "status": {
        "description": "Transaction status",
        "type": "string",
        "readOnly": true,
        "enum": [
          "completed",
          "connection-error",
          "disputed",
          "never-sent",
          "partially-refunded",
          "pending",
          "refunded",
          "sending",
          "suspended",
          "timeout",
          "voided",
          "waiting-capture",
          "waiting-refund"
        ]
      },
      "result": {
        "description": "Transaction result",
        "type": "string",
        "readOnly": true,
        "enum": [
          "abandoned",
          "approved",
          "canceled",
          "declined",
          "unknown"
        ]
      },
      "amount": {
        "description": "The transactions's amount",
        "type": "number",
        "format": "double",
        "readOnly": true
      },
      "currency": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "purchaseAmount": {
        "description": "The transactions's purchase amount",
        "type": "number",
        "format": "double",
        "readOnly": true
      },
      "purchaseCurrency": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "requestAmount": {
        "description": "The transactions's amount received in the payment request",
        "type": "number",
        "format": "double",
        "readOnly": true
      },
      "requestCurrency": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "parentTransactionId": {
        "description": "The transactions's parent ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ],
        "readOnly": true
      },
      "childTransactions": {
        "description": "The child transaction IDs",
        "readOnly": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ResourceId"
        }
      },
      "invoiceIds": {
        "description": "The invoice IDs related to transaction",
        "readOnly": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ResourceId"
        }
      },
      "subscriptionIds": {
        "description": "The subscription IDs related to transaction's invoice(s)",
        "readOnly": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ResourceId"
        }
      },
      "planIds": {
        "description": "The plan IDs related to transaction's subscription(s)",
        "readOnly": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ResourceId"
        }
      },
      "isRebill": {
        "type": "boolean",
        "readOnly": true
      },
      "rebillNumber": {
        "description": "The transactions's rebill number",
        "type": "integer",
        "readOnly": true
      },
      "gatewayAccountId": {
        "description": "The transactions's Gateway Account ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ],
        "readOnly": true
      },
      "gatewayTransactionId": {
        "description": "The gateway's transaction ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ],
        "readOnly": true
      },
      "gateway": {
        "type": "object",
        "description": "The related gateway information",
        "readOnly": true,
        "properties": {
          "response": {
            "description": "The gateway's response",
            "type": "object",
            "properties": {
              "code": {
                "description": "The gateway's response code",
                "type": "string"
              },
              "message": {
                "description": "The gateway's response message",
                "type": "string"
              },
              "type": {
                "description": "The gateway's response type",
                "type": "string"
              },
              "originalCode": {
                "description": "The raw, unmapped gateway's response code",
                "type": "string"
              },
              "originalMessage": {
                "description": "The raw, unmapped gateway's response message",
                "type": "string"
              }
            }
          },
          "avsResponse": {
            "description": "The AVS gateway's response",
            "type": "object",
            "properties": {
              "code": {
                "description": "The response code",
                "type": "string"
              },
              "message": {
                "description": "The response message",
                "type": "string"
              },
              "originalCode": {
                "description": "The raw response code",
                "type": "string"
              },
              "originalMessage": {
                "description": "The raw response message",
                "type": "string"
              }
            }
          },
          "cvvResponse": {
            "description": "The CVV gateway's response",
            "type": "object",
            "properties": {
              "code": {
                "description": "The response code",
                "type": "string"
              },
              "message": {
                "description": "The response message",
                "type": "string"
              },
              "originalCode": {
                "description": "The raw response code",
                "type": "string"
              },
              "originalMessage": {
                "description": "The raw response message",
                "type": "string"
              }
            }
          }
        }
      },
      "gatewayName": {
        "readOnly": true,
        "description": "Payment Gateway name, available only when transaction use gateway, else null",
        "allOf": [
          {
            "type": "string",
            "description": "The payment gateway name",
            "enum": [
              "A1Gateway",
              "AmexVPC",
              "ApcoPay",
              "AstroPay",
              "AstroPayCard",
              "AuthorizeNet",
              "Bambora",
              "BitPay",
              "BlueSnap",
              "BraintreePayments",
              "Cardknox",
              "Cashflows",
              "CASHlib",
              "CashToCode",
              "CauriPayment",
              "Cayan",
              "Chase",
              "Coppr",
              "Credorax",
              "Cryptonator",
              "DataCash",
              "Dengi",
              "ecoPayz",
              "EcorePay",
              "Elavon",
              "eMerchantPay",
              "Flexepin",
              "FinTecSystems",
              "FundSend",
              "Forte",
              "GET",
              "Gigadat",
              "GlobalOnePay",
              "Gpaysafe",
              "Greenbox",
              "iCanPay",
              "iCheque",
              "iDebit",
              "Ilixium",
              "Ingenico",
              "INOVAPAY",
              "Inovio",
              "Intuit",
              "InstaDebit",
              "IpayOptions",
              "JetPay",
              "Jeton",
              "LPG",
              "Moneris",
              "MtaPay",
              "Neteller",
              "NinjaWallet",
              "NMI",
              "OchaPay",
              "Onlineueberweisen",
              "Optimal",
              "Pagsmile",
              "Panamerican",
              "ParamountEft",
              "PandaGateway",
              "Pay4Fun",
              "Payeezy",
              "Payflow",
              "PayPal",
              "Payr",
              "Paysafe",
              "Paysafecash",
              "Payvision",
              "Plugnpay",
              "Realex",
              "Realtime",
              "RebillyProcessor",
              "Redsys",
              "Rotessa",
              "RPN",
              "Sagepay",
              "SeamlessChex",
              "Skrill",
              "SmartInvoice",
              "SMSVoucher",
              "SparkPay",
              "StaticGateway",
              "Stripe",
              "UPayCard",
              "USAePay",
              "VantivLitle",
              "vegaaH",
              "Walpay",
              "Wirecard",
              "Worldpay",
              "Zotapay"
            ]
          }
        ]
      },
      "acquirerName": {
        "readOnly": true,
        "description": "Acquirer name, available only when transaction use gateway, else null",
        "allOf": [
          {
            "type": "string",
            "description": "The acquirer name",
            "enum": [
              "Alipay",
              "AIB",
              "ApcoPay",
              "AstroPay Card",
              "Ipay Options",
              "B+S",
              "Bambora",
              "BitPay",
              "Bank of America",
              "Bank of Moscow",
              "Bank of Rebilly",
              "Bank One",
              "BMO Harris Bank",
              "Borgun",
              "BraintreePayments",
              "Cardknox",
              "CASHlib",
              "Catalunya Caixa",
              "Chase",
              "ChinaUnionPay",
              "CIM",
              "Coppr",
              "Credorax",
              "Cryptonator",
              "ecoPayz",
              "EcorePay",
              "Elavon",
              "EMS",
              "Fifth Third Bank",
              "First Data Buypass",
              "First Data Nashville",
              "First Data North",
              "First Data Omaha",
              "FinTecSystems",
              "Flexepin",
              "Forte",
              "FundSend",
              "Gigadat",
              "Global East",
              "Gpaysafe",
              "Heartland",
              "HSBC",
              "iCanPay",
              "iCheque",
              "Ilixium",
              "Ingenico",
              "INOVAPAY",
              "Intuit",
              "Jeton",
              "LPG",
              "Masapay",
              "Merrick",
              "Mission Valley Bank",
              "Moneris",
              "NATWEST",
              "Neteller",
              "NinjaWallet",
              "NMI",
              "OchaPay",
              "Onlineueberweisen",
              "Other",
              "Panamerican",
              "Panda Bank",
              "Paramount",
              "ParamountEft",
              "Pay4fun",
              "PayPal",
              "Payr",
              "Payvision",
              "Peoples Trust Company",
              "Privatbank",
              "QQPay",
              "RBC",
              "RBS WorldPay",
              "RealTime",
              "RebillyProcessor",
              "Rotessa",
              "Skrill",
              "SmartInvoice",
              "SMSVoucher",
              "SparkPay",
              "State Bank of Mauritius",
              "Stripe",
              "TBI",
              "TrustPay",
              "TSYS",
              "UPayCard",
              "Vantiv",
              "VoicePay",
              "WeChat Pay",
              "Wells Fargo",
              "Wing Hang Bank",
              "Wirecard",
              "WorldPay",
              "Zotapay"
            ]
          }
        ]
      },
      "websiteId": {
        "description": "Website's ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ],
        "readOnly": true
      },
      "customerId": {
        "description": "Customer's ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ],
        "readOnly": true
      },
      "method": {
        "description": "Payment Method",
        "allOf": [
          {
            "$ref": "#/components/schemas/Method"
          }
        ]
      },
      "velocity": {
        "description": "The number of transactions by the same customer in the past 24 hours",
        "type": "integer"
      },
      "revision": {
        "description": "The number of times the transaction data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
        "type": "integer",
        "readOnly": true
      },
      "referenceData": {
        "description": "Transaction reference data",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "example": {
          "gatewayTransactionId": "GAT123"
        },
        "readOnly": true,
        "nullable": true
      },
      "bin": {
        "description": "Payment Card BIN",
        "type": "string",
        "format": "bin",
        "readOnly": true
      },
      "paymentInstrument": {
        "$ref": "#/components/schemas/PaymentInstrument"
      },
      "billingAddress": {
        "description": "Billing Address",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          }
        ]
      },
      "has3ds": {
        "type": "boolean",
        "readOnly": true
      },
      "3ds": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ThreeDSecureResult"
          }
        ]
      },
      "hasDcc": {
        "description": "True if transaction has Dynamic Currency Conversion applied",
        "type": "boolean",
        "readOnly": true
      },
      "dcc": {
        "description": "Dynamic Currency Conversion detailed information. Null if hasDcc is false",
        "type": "object",
        "readOnly": true,
        "properties": {
          "base": {
            "type": "object",
            "description": "Initial amount and currency to convert from",
            "properties": {
              "amount": {
                "type": "number",
                "format": "double"
              },
              "currency": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CurrencyCode"
                  }
                ]
              }
            }
          },
          "quote": {
            "type": "object",
            "description": "Suggested amount and currency to convert to",
            "properties": {
              "amount": {
                "type": "number",
                "format": "double"
              },
              "currency": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CurrencyCode"
                  }
                ]
              }
            }
          },
          "usdMarkup": {
            "description": "The amount of markup translated to USD",
            "type": "number",
            "format": "double"
          },
          "outcome": {
            "type": "string",
            "description": "Dynamic Currency Conversion outcome",
            "enum": [
              "rejected",
              "selected",
              "unknown"
            ]
          }
        }
      },
      "hasBumpOffer": {
        "description": "True if transaction has a Bump offer",
        "type": "boolean",
        "readOnly": true
      },
      "bumpOffer": {
        "description": "Bump offer information. Null if hasBumpOffer is false",
        "type": "object",
        "readOnly": true,
        "properties": {
          "order": {
            "type": "object",
            "description": "Initial amount and currency",
            "properties": {
              "amount": {
                "type": "number",
                "format": "double"
              },
              "currency": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CurrencyCode"
                  }
                ]
              }
            }
          },
          "bump": {
            "type": "object",
            "description": "Bump amount and currency",
            "properties": {
              "amount": {
                "type": "number",
                "format": "double"
              },
              "currency": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CurrencyCode"
                  }
                ]
              }
            }
          },
          "bonus": {
            "type": "object",
            "description": "Bonus amount and currency",
            "properties": {
              "amount": {
                "type": "number",
                "format": "double"
              },
              "currency": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CurrencyCode"
                  }
                ]
              }
            }
          },
          "usdOrder": {
            "description": "The amount of initial amount translated to USD",
            "type": "number",
            "format": "double"
          },
          "usdBump": {
            "description": "The amount of bump amount translated to USD",
            "type": "number",
            "format": "double"
          },
          "usdBonus": {
            "description": "The amount of bonus amount translated to USD",
            "type": "number",
            "format": "double"
          },
          "version": {
            "description": "The name of the version that was picked (useful for measuring split tests)",
            "type": "string"
          },
          "language": {
            "description": "The language of the bump offer that was displayed to user (useful for finding any translation problems)",
            "type": "string"
          },
          "outcome": {
            "type": "string",
            "description": "Bump offer outcome",
            "enum": [
              "rejected",
              "selected",
              "unknown"
            ]
          }
        }
      },
      "riskScore": {
        "description": "The transactions's risk score",
        "type": "integer",
        "readOnly": true
      },
      "riskMetadata": {
        "description": "Risk metadata",
        "allOf": [
          {
            "$ref": "#/components/schemas/RiskMetadata"
          }
        ]
      },
      "notificationUrl": {
        "description": "The URL where a server-to-server POST notification will be sent.  It  will be sent when the\ntransaction's result is finalized after a timeout or an offsite interaction. Do not trust the\nnotification; follow with a GET request to confirm the result of the transaction. Please\nrespond with a 2xx HTTP status code, or we will reattempt the request again.\n",
        "type": "string",
        "format": "uri"
      },
      "redirectUrl": {
        "description": "The URL to redirect the end-user when an offsite transaction is completed.  Defaults to the website's configured URL.",
        "type": "string",
        "format": "uri"
      },
      "redirectUrls": {
        "$ref": "#/components/schemas/RedirectUrls"
      },
      "retryInstruction": {
        "$ref": "#/components/schemas/PaymentRetry"
      },
      "retryNumber": {
        "type": "integer",
        "readOnly": true,
        "description": "The position in the sequence of retries"
      },
      "retriedTransactionId": {
        "readOnly": true,
        "description": "The retried transaction ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "retriesResult": {
        "type": "string",
        "readOnly": true,
        "description": "Retries sequence result",
        "enum": [
          "approved",
          "canceled",
          "declined",
          "scheduled"
        ]
      },
      "isRetry": {
        "type": "boolean",
        "readOnly": true,
        "description": "True if this transaction is retry."
      },
      "billingDescriptor": {
        "type": "string",
        "readOnly": true,
        "description": "The billing descriptor that appears on the periodic billing statement. Commonly 12 or fewer characters for a credit card statement."
      },
      "description": {
        "type": "string",
        "description": "The payment description",
        "maxLength": 255
      },
      "isDisputed": {
        "description": "True if transaction is disputed",
        "type": "boolean",
        "readOnly": true
      },
      "isReconciled": {
        "description": "True if the transaction has been verified with gateway batch data",
        "type": "boolean",
        "readOnly": true
      },
      "hadDiscrepancy": {
        "description": "True if the transaction has been updated due to a disprepancy with its source of truth",
        "type": "boolean",
        "readOnly": true
      },
      "orderId": {
        "deprecated": true,
        "description": "The transactions's order ID.  This ID must be unique within a 24 hour period. This field was renamed to the `requestId`.",
        "type": "string"
      },
      "requestId": {
        "description": "The transactions's request ID.  This ID must be unique within a 24 hour period. Use this field to prevent duplicated transactions.",
        "type": "string"
      },
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      },
      "scheduledTime": {
        "type": "string",
        "description": "The time the transaction is scheduled for collection",
        "format": "date-time"
      },
      "processedTime": {
        "description": "Transaction processed time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "createdTime": {
        "description": "Transaction created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Transaction updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/WebsiteLink"
            },
            {
              "$ref": "#/components/schemas/CustomerLink"
            },
            {
              "$ref": "#/components/schemas/GatewayAccountLink"
            },
            {
              "$ref": "#/components/schemas/PaymentCardLink"
            },
            {
              "$ref": "#/components/schemas/ParentTransactionLink"
            },
            {
              "$ref": "#/components/schemas/RetriedTransactionLink"
            },
            {
              "$ref": "#/components/schemas/LeadSourceLink"
            },
            {
              "$ref": "#/components/schemas/ApprovalUrlLink"
            },
            {
              "$ref": "#/components/schemas/CancelUrlLink"
            },
            {
              "$ref": "#/components/schemas/RefundUrlLink"
            },
            {
              "$ref": "#/components/schemas/DisputeLink"
            },
            {
              "$ref": "#/components/schemas/InvoicesLink"
            }
          ]
        }
      },
      "_embedded": {
        "type": "array",
        "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/ParentTransactionEmbed"
            },
            {
              "$ref": "#/components/schemas/RetriedTransactionEmbed"
            },
            {
              "$ref": "#/components/schemas/GatewayAccountEmbed"
            },
            {
              "$ref": "#/components/schemas/CustomerEmbed"
            },
            {
              "$ref": "#/components/schemas/LeadSourceEmbed"
            },
            {
              "$ref": "#/components/schemas/WebsiteEmbed"
            },
            {
              "$ref": "#/components/schemas/PaymentCardEmbed"
            },
            {
              "$ref": "#/components/schemas/BankAccountEmbed"
            },
            {
              "$ref": "#/components/schemas/InvoicesEmbed"
            }
          ]
        }
      }
    }
  },
  "TransactionRequest": {
    "type": "object",
    "required": [
      "websiteId",
      "customerId",
      "currency",
      "amount",
      "type"
    ],
    "properties": {
      "id": {
        "description": "The payment identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "websiteId": {
        "description": "The website identifier string",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "customerId": {
        "description": "The customer identifier string",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "currency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "type": {
        "description": "The type of transaction requested.\nYou should always include the type within your API request.\nThis supports a limited subset of Transaction types.  To refund or void, use the refund endpoint.\nTo `capture` use the `sale` endpoint.  It will capture if there are any eligible\ntransactions of type `authorize` that can be captured.\n",
        "type": "string",
        "enum": [
          "sale",
          "authorize",
          "credit"
        ]
      },
      "amount": {
        "description": "The transaction amount.  Use `0` for a zero dollar verification. This is important if\nyou want to authorize a payment instrument before giving access to a free trial, for example.\n",
        "type": "number",
        "format": "double",
        "example": 97.97
      },
      "invoiceIds": {
        "description": "The array of invoice identifiers.  It's important to note that the transaction\namount can be more or less than the combined invoice amounts.  If the transaction\nis a type `sale` and it is `approved` it will be applied to these invoices in\nthe order of the first issued invoice to the most recently issued invoice.  If\nthere are enough funds to fully pay an invoice, the invoice status will be marked\nas paid.\n",
        "nullable": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ResourceId"
        }
      },
      "paymentInstrument": {
        "$ref": "#/components/schemas/PaymentInstrument"
      },
      "billingAddress": {
        "description": "Billing Address. If not supplied, we use the billing address associated with the payment instrument, and then customer.",
        "nullable": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          }
        ]
      },
      "requestId": {
        "description": "The request id is **recommended**. It prevents duplicate transaction requests within a short period of time. If a duplicate request is sent with the same `requestId` it will be ignored to prevent double-billing anyone.  It must be unique within a 24-hour period.  We recommend generating a UUID v4 as its value.",
        "type": "string",
        "nullable": true,
        "maxLength": 50,
        "pattern": "^[\\-\\w]+$",
        "example": "44433322-2c4y-483z-a0a9-158621f77a21"
      },
      "description": {
        "nullable": true,
        "description": "The payment description",
        "type": "string",
        "maxLength": 255
      },
      "notificationUrl": {
        "nullable": true,
        "description": "The URL where a server-to-server notification request type `POST` with a transaction payload will be sent\nwhen the transaction's result is finalized. Do not trust the notification;\nfollow with a `GET` request to confirm the result of the transaction.  Please respond with a `2xx`\nHTTP status code, or we will reattempt the request again.\n",
        "type": "string",
        "format": "uri"
      },
      "redirectUrl": {
        "nullable": true,
        "description": "The URL to redirect the end-user when an offsite transaction is completed.  Defaults to the website's configured URL.",
        "type": "string",
        "format": "uri"
      },
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      }
    }
  },
  "AclPermissions": {
    "type": "array",
    "items": {
      "type": "object",
      "required": [
        "resourceName",
        "methods"
      ],
      "properties": {
        "resourceName": {
          "description": "The ACL resource name. Send `null` to match all resources.",
          "type": "string",
          "enum": [
            "3dsecure",
            "activity-feed",
            "api-keys",
            "api-tracking",
            "attachments",
            "authentication-options",
            "authentication-tokens",
            "aws-ses-credentials",
            "bank-accounts",
            "blacklists",
            "checkout-pages",
            "contacts",
            "coupons",
            "coupons-redemptions",
            "credentials",
            "custom-events",
            "custom-fields",
            "customer-timeline",
            "customers",
            "data-exports",
            "disputes",
            "email-messages",
            "email-notifications",
            "email-notifications-tracking",
            "events",
            "files",
            "gateway-account-downtimes",
            "gateway-account-timeline",
            "gateway-accounts",
            "histograms",
            "integrations",
            "invoices",
            "kyc",
            "layouts",
            "lead-sources",
            "lists",
            "lists-tracking",
            "mailgun-credentials",
            "matched-rules",
            "mgs",
            "momentum",
            "nmi",
            "notes",
            "oauth2-credentials",
            "organizations",
            "password-tokens",
            "payment-cards",
            "payment-cards-migrations",
            "payment-instrument-validation",
            "payments",
            "paypal-accounts",
            "plans",
            "postmark-credentials",
            "products",
            "profile",
            "reports",
            "reset-sandbox",
            "rulesets",
            "search",
            "send-preview-email",
            "send-preview-webhook",
            "sendgrid-credentials",
            "shipping-zones",
            "smtp-credentials",
            "subscription-tracking",
            "subscriptions",
            "tags",
            "tokens",
            "transaction-timeline",
            "transactions",
            "users",
            "webhook-credentials",
            "webhooks",
            "webhooks-tracking",
            "websites",
            "websites-webhook"
          ]
        },
        "methods": {
          "description": "The HTTP methods allowed for this resource. Send `null` to match all methods.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE"
            ]
          }
        }
      }
    },
    "example": [
      {
        "resourceName": "plans",
        "methods": [
          "GET",
          "POST",
          "PUT",
          "DELETE"
        ]
      },
      {
        "resourceName": "invoices",
        "methods": null
      }
    ]
  },
  "ApiKey": {
    "type": "object",
    "description": "API secret Key.",
    "properties": {
      "id": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "description": {
        "description": "API key description",
        "type": "string"
      },
      "datetimeFormat": {
        "description": "Date time format",
        "type": "string",
        "default": "iso8601",
        "enum": [
          "mysql",
          "iso8601"
        ]
      },
      "type": {
        "description": "Type of API key",
        "type": "string",
        "default": "secret",
        "enum": [
          "secret",
          "publishable"
        ]
      },
      "permissions": {
        "description": "Specify individual permissions here if creating a restricted API key. Send `null` to allow all permissions.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AclPermissions"
          }
        ]
      },
      "apiUser": {
        "description": "API user name",
        "type": "string",
        "readOnly": true
      },
      "secretKey": {
        "description": "API secret key's value",
        "type": "string",
        "readOnly": true
      },
      "createdTime": {
        "description": "The API key created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "AstroPayBanks": {
    "type": "string",
    "enum": [
      "CU",
      "SE",
      "BV",
      "BM",
      "SM",
      "OX",
      "BQ",
      "EN",
      "FA",
      "BW",
      "SS",
      "SU",
      "WA",
      "FB",
      "TC",
      "I",
      "BB",
      "B",
      "CA",
      "SB",
      "BL",
      "NB",
      "UI"
    ]
  },
  "CheckoutPage": {
    "type": "object",
    "required": [
      "planId",
      "websiteId",
      "urlPathSegment",
      "name"
    ],
    "properties": {
      "id": {
        "description": "Checkout page identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "planId": {
        "description": "Checkout page plan ID.  If the plan is deactivated, the submit button on the checkout page will be deactivated and the page will display \"Sold Out.\"",
        "type": "string",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "websiteId": {
        "description": "Checkout page website ID",
        "type": "string",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "urlPathSegment": {
        "description": "Your own custom url path segment for this Checkout Page. It will be appended to checkout url https://checkout.rebilly.com/checkout/`urlPathSegment`",
        "type": "string",
        "minLength": 5,
        "maxLength": 50
      },
      "name": {
        "description": "Checkout page name, used for internal display to help you organize your various checkout pages.",
        "type": "string",
        "maxLength": 100
      },
      "redirect": {
        "type": "object",
        "description": "After a successful checkout, the customer can optionally be redirected to a url of your choice.",
        "properties": {
          "url": {
            "description": "After a successful checkout, the customer can be redirected to a url of your choice.  If left empty, the customer will remain on the thank you page.",
            "type": "string"
          },
          "timeout": {
            "description": "The time (in seconds) that the customer will remain on the thank you page before being redirected to the corresponding `url`.",
            "type": "integer",
            "default": 5
          }
        }
      },
      "isCustomCustomerIdAllowed": {
        "description": "Set to true if you want to supply your own customer ID's in a querystring parameter on your checkout page.",
        "type": "boolean",
        "default": false
      },
      "isBillingAddressHidden": {
        "description": "Set to true if you want to hide billing address on your checkout page.",
        "type": "boolean",
        "default": false
      },
      "isPlanSummaryHidden": {
        "description": "Set to true if you want to hide plan summary on your checkout page.",
        "type": "boolean",
        "default": false
      },
      "isPreCheckedTerms": {
        "description": "Set to true if you want to pre-checked checkbox of terms on your checkout page.",
        "type": "boolean",
        "default": false
      },
      "oneTimeOffer": {
        "type": "object",
        "description": "One time offer for checkout page.",
        "properties": {
          "planId": {
            "description": "Reference to Plan ID.",
            "type": "string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "isTiedToQuantity": {
            "description": "Set to true if you want to tie one time offer to quantity on your checkout page.",
            "type": "boolean",
            "default": false
          }
        }
      },
      "thankYouOneTimeOffer": {
        "type": "object",
        "description": "One time offer for thank you page.",
        "properties": {
          "planId": {
            "description": "Reference to Plan ID.",
            "type": "string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "isTiedToQuantity": {
            "description": "Set to true if you want to tie one time offer to quantity on your checkout page.",
            "type": "boolean",
            "default": false
          }
        }
      },
      "suggestedUpgrade": {
        "type": "object",
        "description": "Suggested upgrade for checkout page.",
        "properties": {
          "planId": {
            "description": "Reference to Plan ID.",
            "type": "string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "hasProration": {
            "description": "Set to true if you want to pro rata credits given due change a subscription's plan.",
            "type": "boolean",
            "default": false
          }
        }
      },
      "theme": {
        "description": "Select from pre-designed themes for your checkout page.",
        "type": "string",
        "default": "classic",
        "enum": [
          "classic",
          "long-copy"
        ]
      },
      "logoAlignment": {
        "description": "Checkout page logo position.",
        "type": "string",
        "enum": [
          "left",
          "center",
          "right"
        ],
        "default": "left"
      },
      "quantityLabel": {
        "description": "Checkout page quantity label, used in case you want to customize the quantity field label.",
        "type": "string",
        "maxLength": 255
      },
      "quantityType": {
        "description": "Checkout page quantity type, used in case you want to customize the quantity field type.",
        "type": "string",
        "enum": [
          "selectbox",
          "textinput"
        ],
        "default": "selectbox"
      },
      "quantityMin": {
        "description": "Checkout page quantity min, used in case you want to set the minimun quantity.",
        "type": "integer",
        "minimum": 1,
        "maximum": 255
      },
      "markup": {
        "description": "Sections of styled content that will display within the page body, keyed by \"section.\"\nThe themes rely on specific \"section\" key values, for example \"header\", \"button\", \"footer\", \"body\", \"thank-you\", \"terms\".\n",
        "type": "array",
        "uniqueItems": true,
        "items": {
          "$ref": "#/components/schemas/Section"
        }
      },
      "fields": {
        "description": "Take granular control over the default field settings.  You can make specific fields hidden, optional, or required.  You can specify labels and default values.",
        "type": "array",
        "uniqueItems": true,
        "items": {
          "$ref": "#/components/schemas/FieldConfig"
        }
      },
      "taxes": {
        "type": "object",
        "description": "Taxes, you can specify description and list of name-value items.",
        "properties": {
          "description": {
            "description": "Taxes description.",
            "type": "string"
          },
          "items": {
            "description": "Taxes values.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Taxes"
            }
          }
        }
      },
      "status": {
        "description": "If `inactive`, the checkout page url will result in a 404.",
        "type": "string",
        "enum": [
          "active",
          "inactive"
        ],
        "default": "active"
      },
      "createdTime": {
        "description": "Checkout page created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Checkout page updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "FieldConfig": {
    "type": "object",
    "description": "A configuration for a field.",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "description": "The name of the field, as defined in our APIs. You can also include custom fields.\n",
        "type": "string",
        "enum": [
          "companyName",
          "phoneNumber",
          "address",
          "addressLine2",
          "city",
          "region",
          "country",
          "postalCode",
          "couponCode",
          "quantity"
        ]
      },
      "setting": {
        "description": "If you want the field hidden, optional, or required.  Some fields may be required by a specific theme, and these settings will not override that.\nDefaults are that most fields are shown.  You may wish to hide `couponCode`, if you don't use coupons.  You may wish to require specific fields\nthat are optional (eg `phoneNumber`).\n",
        "type": "string",
        "enum": [
          "hidden",
          "optional",
          "required"
        ]
      },
      "label": {
        "description": "If you want to override the default label, you can set a value here (eg, instead of \"First Name\", you can set \"Given Name\").",
        "type": "string"
      },
      "default": {
        "description": "Set a default value for the field.  It will default to being empty, or 1 for `quantity`.",
        "type": "string"
      }
    }
  },
  "Section": {
    "type": "object",
    "required": [
      "section",
      "content",
      "style",
      "enabled"
    ],
    "properties": {
      "section": {
        "description": "A key for this section of content.\n",
        "type": "string",
        "enum": [
          "header",
          "body",
          "order-summary",
          "button",
          "footer",
          "thank-you",
          "terms"
        ]
      },
      "style": {
        "description": "Control the font and background colors.",
        "$ref": "#/components/schemas/Style"
      },
      "content": {
        "description": "The text you want to appear in the section, can be styled in html markup.  You can include image references.",
        "type": "string"
      },
      "enabled": {
        "description": "Set to false if you want to disable this markup section on checkout page.",
        "type": "boolean",
        "default": true
      }
    }
  },
  "Style": {
    "type": "object",
    "properties": {
      "background": {
        "description": "Background color for the section in hexadecimal format.",
        "type": "string",
        "maxLength": 6,
        "default": "ffffff"
      },
      "color": {
        "description": "Font color for the section in hexadecimal format.",
        "type": "string",
        "maxLength": 6,
        "default": "cccccc"
      }
    }
  },
  "Taxes": {
    "type": "object",
    "description": "A configuration for a tax.",
    "required": [
      "label",
      "value"
    ],
    "properties": {
      "label": {
        "description": "Tax name",
        "type": "string",
        "example": "VAT"
      },
      "value": {
        "description": "Value of tax.",
        "type": "number",
        "format": "float",
        "minimum": 0,
        "exclusiveMinimum": true,
        "example": 0.5
      }
    }
  },
  "PatchCredential": {
    "type": "object",
    "required": [
      "status"
    ],
    "properties": {
      "status": {
        "description": "The credential status",
        "type": "string",
        "enum": [
          "deactivated"
        ]
      }
    }
  },
  "Condition": {
    "type": "object",
    "discriminator": {
      "propertyName": "op"
    },
    "properties": {
      "op": {
        "type": "string",
        "description": "The condition operation",
        "enum": [
          "and",
          "or",
          "not",
          "between",
          "equals",
          "in",
          "gt",
          "gte",
          "lt",
          "lte"
        ]
      }
    },
    "required": [
      "op"
    ]
  },
  "and": {
    "type": "object",
    "description": "Logical AND",
    "allOf": [
      {
        "$ref": "#/components/schemas/Condition"
      },
      {
        "$ref": "#/components/schemas/logical"
      }
    ]
  },
  "between": {
    "type": "object",
    "description": "Between condition",
    "allOf": [
      {
        "$ref": "#/components/schemas/Condition"
      },
      {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "min": {
            "type": "string"
          },
          "max": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "min",
          "max"
        ]
      }
    ]
  },
  "compare": {
    "type": "object",
    "properties": {
      "path": {
        "type": "string"
      },
      "value": {
        "type": "string"
      }
    },
    "required": [
      "path",
      "value"
    ]
  },
  "equals": {
    "type": "object",
    "description": "Equals condition",
    "allOf": [
      {
        "$ref": "#/components/schemas/Condition"
      },
      {
        "$ref": "#/components/schemas/compare"
      }
    ]
  },
  "gt": {
    "type": "object",
    "description": "Greater than condition",
    "allOf": [
      {
        "$ref": "#/components/schemas/Condition"
      },
      {
        "$ref": "#/components/schemas/compare"
      }
    ]
  },
  "gte": {
    "type": "object",
    "description": "Greater than or equals condition",
    "allOf": [
      {
        "$ref": "#/components/schemas/Condition"
      },
      {
        "$ref": "#/components/schemas/compare"
      }
    ]
  },
  "in": {
    "type": "object",
    "description": "In condition",
    "allOf": [
      {
        "$ref": "#/components/schemas/Condition"
      },
      {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "path",
          "values"
        ]
      }
    ]
  },
  "logical-not": {
    "type": "object",
    "properties": {
      "condition": {
        "$ref": "#/components/schemas/Condition"
      }
    },
    "required": [
      "condition"
    ],
    "example": {
      "operation": "not",
      "condition": {
        "operation": "equals",
        "path": "/name",
        "value": "John Dou"
      }
    }
  },
  "logical": {
    "type": "object",
    "properties": {
      "conditions": {
        "type": "array",
        "minItems": 2,
        "items": {
          "$ref": "#/components/schemas/Condition"
        }
      }
    },
    "required": [
      "conditions"
    ]
  },
  "lt": {
    "type": "object",
    "description": "Less than condition",
    "allOf": [
      {
        "$ref": "#/components/schemas/Condition"
      },
      {
        "$ref": "#/components/schemas/compare"
      }
    ]
  },
  "lte": {
    "type": "object",
    "description": "Less than or equals condition",
    "allOf": [
      {
        "$ref": "#/components/schemas/Condition"
      },
      {
        "$ref": "#/components/schemas/compare"
      }
    ]
  },
  "not": {
    "type": "object",
    "description": "Logical NOT",
    "allOf": [
      {
        "$ref": "#/components/schemas/Condition"
      },
      {
        "$ref": "#/components/schemas/logical-not"
      }
    ]
  },
  "or": {
    "type": "object",
    "description": "Logical OR",
    "allOf": [
      {
        "$ref": "#/components/schemas/Condition"
      },
      {
        "$ref": "#/components/schemas/logical"
      }
    ]
  },
  "CustomEvent": {
    "type": "object",
    "properties": {
      "id": {
        "description": "The custom event identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "eventType": {
        "$ref": "#/components/schemas/CustomEventType"
      },
      "title": {
        "type": "string",
        "description": "The custom event title"
      },
      "description": {
        "type": "string",
        "description": "The custom event description"
      },
      "chronology": {
        "type": "string",
        "description": "The emitting time of the custom event relatively to the system event",
        "enum": [
          "before",
          "after"
        ]
      },
      "scheduleInstruction": {
        "$ref": "#/components/schemas/CustomEventScheduleInstruction"
      },
      "createdTime": {
        "$ref": "#/components/schemas/ServerTimestamp"
      },
      "rulesCount": {
        "type": "integer",
        "readOnly": true
      },
      "bindsCount": {
        "type": "integer",
        "readOnly": true
      }
    },
    "required": [
      "eventType",
      "title",
      "chronology",
      "scheduleInstruction"
    ]
  },
  "CustomEventType": {
    "type": "string",
    "description": "Rebilly custom event type",
    "readOnly": true,
    "enum": [
      "subscription-ended",
      "subscription-trial-ended",
      "subscription-renewed",
      "payment-card-expired",
      "invoice-past-due"
    ]
  },
  "SmtpAuthorization": {
    "type": "object",
    "discriminator": {
      "propertyName": "type",
      "mapping": {
        "none": "#/components/schemas/SmtpAuthorizationNone"
      }
    },
    "properties": {
      "type": {
        "type": "string",
        "enum": [
          "none",
          "plain",
          "login",
          "cram-md5"
        ],
        "default": "none"
      }
    }
  },
  "cram-md5": {
    "allOf": [
      {
        "$ref": "#/components/schemas/SmtpAuthorization"
      },
      {
        "$ref": "#/components/schemas/UserPasswordAuthorization"
      }
    ]
  },
  "login": {
    "allOf": [
      {
        "$ref": "#/components/schemas/SmtpAuthorization"
      },
      {
        "$ref": "#/components/schemas/UserPasswordAuthorization"
      }
    ]
  },
  "plain": {
    "allOf": [
      {
        "$ref": "#/components/schemas/SmtpAuthorization"
      },
      {
        "$ref": "#/components/schemas/UserPasswordAuthorization"
      }
    ]
  },
  "SmtpAuthorizationNone": {
    "allOf": [
      {
        "$ref": "#/components/schemas/SmtpAuthorization"
      }
    ]
  },
  "SmtpCredential": {
    "type": "object",
    "properties": {
      "hash": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "status": {
        "description": "The credential status",
        "type": "string",
        "enum": [
          "active",
          "deactivated"
        ]
      },
      "deactivationTime": {
        "description": "The time when the credential was deactivated",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "host": {
        "type": "string",
        "description": "The host name"
      },
      "port": {
        "type": "integer",
        "description": "The port value",
        "minimum": 1,
        "maximum": 65535,
        "default": 25
      },
      "encryption": {
        "type": "string",
        "description": "The encryption value",
        "enum": [
          "none",
          "tls",
          "ssl"
        ],
        "default": "none"
      },
      "auth": {
        "$ref": "#/components/schemas/SmtpAuthorization"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    },
    "description": "SMTP Credential",
    "required": [
      "host"
    ]
  },
  "UserPasswordAuthorization": {
    "type": "object",
    "properties": {
      "username": {
        "type": "string"
      },
      "password": {
        "type": "string",
        "format": "password"
      }
    },
    "required": [
      "username",
      "password"
    ]
  },
  "EmailDeliverySetting": {
    "type": "object",
    "required": [
      "from",
      "name"
    ],
    "properties": {
      "id": {
        "description": "The email delivery setting's identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "from": {
        "description": "The sender's email address",
        "type": "string",
        "format": "email",
        "maxLength": 254,
        "example": "from-example@rebilly.com"
      },
      "name": {
        "description": "The sender's name",
        "type": "string",
        "example": "John Doe"
      },
      "status": {
        "description": "The email message's status",
        "readOnly": true,
        "type": "string",
        "enum": [
          "pending",
          "verified"
        ]
      },
      "credentialId": {
        "type": "string",
        "description": "SMTP or any Email Service Provider credential identifier string.",
        "example": "b120c2ca-6c2b-4690-9dff-3b0d87852dc7"
      },
      "provider": {
        "readOnly": true,
        "description": "The service provider name",
        "type": "string",
        "enum": [
          "rebilly",
          "smtp",
          "aws-ses",
          "mailgun",
          "postmark",
          "sendgrid"
        ],
        "example": "rebilly"
      },
      "createdTime": {
        "description": "The created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "The updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      }
    }
  },
  "EmailMessage": {
    "type": "object",
    "required": [
      "from",
      "to",
      "subject",
      "text",
      "html"
    ],
    "properties": {
      "id": {
        "description": "The email message's identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "status": {
        "description": "The email message's status",
        "type": "string",
        "enum": [
          "draft",
          "outbox",
          "sending",
          "sent",
          "failed"
        ],
        "default": "draft"
      },
      "metadata": {
        "description": "The email message's metadata",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "example": {
          "eventType": "subscription-canceled"
        }
      },
      "credentialHash": {
        "type": "string",
        "description": "SMTP or any Email Service Provider credential identifier string.",
        "example": "b120c2ca-6c2b-4690-9dff-3b0d87852dc7"
      },
      "from": {
        "description": "The email message's sender address",
        "type": "string",
        "format": "email",
        "maxLength": 254,
        "example": "from-example@rebilly.com"
      },
      "to": {
        "description": "The email message's recipients address list",
        "type": "array",
        "minItems": 1,
        "items": {
          "type": "string",
          "format": "email",
          "maxLength": 254
        },
        "example": [
          "to-example@rebilly.com"
        ]
      },
      "cc": {
        "description": "The email message's CC address list",
        "type": "array",
        "items": {
          "type": "string",
          "format": "email",
          "maxLength": 254
        },
        "example": [
          "сс-example@rebilly.com"
        ]
      },
      "bcc": {
        "description": "The email message's BCC address list",
        "type": "array",
        "items": {
          "type": "string",
          "format": "email",
          "maxLength": 254
        },
        "example": [
          "сс-example@rebilly.com"
        ]
      },
      "subject": {
        "description": "The email message's subject",
        "type": "string",
        "maxLength": 998,
        "example": "Welcome dear customer!"
      },
      "text": {
        "description": "The email message's text body",
        "type": "string",
        "example": "Email message text body"
      },
      "html": {
        "description": "The email message's html body",
        "type": "string",
        "example": "<p>Email message html body</p>"
      },
      "attachments": {
        "description": "The email message's attachemnts",
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "resourceType",
            "resourceId"
          ],
          "properties": {
            "resourceType": {
              "description": "The attachment's resource type",
              "type": "string",
              "example": "invoice"
            },
            "resourceId": {
              "description": "The attachment's resource identifier string",
              "example": "INV-1",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            }
          }
        }
      },
      "createdTime": {
        "description": "The email message's created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "The email message's updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to the resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "CustomEmailNotification": {
    "type": "object",
    "description": "The custom email notification event",
    "readOnly": true,
    "properties": {
      "eventType": {
        "$ref": "#/components/schemas/CustomEventType"
      },
      "count": {
        "type": "integer",
        "readOnly": true,
        "description": "The count of binds with `send-email` actions per event"
      },
      "notifications": {
        "readOnly": true,
        "type": "array",
        "minItems": 1,
        "description": "The list of notifications",
        "items": {
          "type": "object",
          "properties": {
            "labels": {
              "description": "The notification labels",
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            },
            "title": {
              "type": "string",
              "description": "The notification title"
            }
          }
        }
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "EmailNotification": {
    "type": "object",
    "description": "The email notification event",
    "readOnly": true,
    "properties": {
      "eventType": {
        "$ref": "#/components/schemas/EventType"
      },
      "count": {
        "type": "integer",
        "readOnly": true,
        "description": "The count of binds with `send-email` actions per event"
      },
      "notifications": {
        "readOnly": true,
        "type": "array",
        "minItems": 1,
        "description": "The list of notifications",
        "items": {
          "type": "object",
          "properties": {
            "labels": {
              "description": "The notification labels",
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            },
            "title": {
              "type": "string",
              "description": "The notification title"
            }
          }
        }
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "SystemEvent": {
    "type": "object",
    "description": "The application event",
    "readOnly": true,
    "properties": {
      "eventType": {
        "$ref": "#/components/schemas/EventType"
      },
      "title": {
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "rulesCount": {
        "type": "integer",
        "readOnly": true
      },
      "bindsCount": {
        "type": "integer",
        "readOnly": true
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "ForgotPassword": {
    "type": "object",
    "required": [
      "email"
    ],
    "properties": {
      "email": {
        "description": "Email",
        "type": "string",
        "format": "email"
      }
    }
  },
  "GatewayAccount": {
    "type": "object",
    "required": [
      "gatewayName",
      "acquirerName",
      "merchantCategoryCode",
      "websites",
      "acceptedCurrencies",
      "organizationId"
    ],
    "discriminator": {
      "propertyName": "gatewayName"
    },
    "properties": {
      "id": {
        "description": "The gateway identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "status": {
        "description": "The gateway account's status",
        "readOnly": true,
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "pending",
          "closed"
        ]
      },
      "gatewayName": {
        "type": "string",
        "description": "The payment gateway name",
        "enum": [
          "A1Gateway",
          "AmexVPC",
          "ApcoPay",
          "AstroPay",
          "AstroPayCard",
          "AuthorizeNet",
          "Bambora",
          "BitPay",
          "BlueSnap",
          "BraintreePayments",
          "Cardknox",
          "Cashflows",
          "CASHlib",
          "CashToCode",
          "CauriPayment",
          "Cayan",
          "Chase",
          "Coppr",
          "Credorax",
          "Cryptonator",
          "DataCash",
          "Dengi",
          "ecoPayz",
          "EcorePay",
          "Elavon",
          "eMerchantPay",
          "Flexepin",
          "FinTecSystems",
          "FundSend",
          "Forte",
          "GET",
          "Gigadat",
          "GlobalOnePay",
          "Gpaysafe",
          "Greenbox",
          "iCanPay",
          "iCheque",
          "iDebit",
          "Ilixium",
          "Ingenico",
          "INOVAPAY",
          "Inovio",
          "Intuit",
          "InstaDebit",
          "IpayOptions",
          "JetPay",
          "Jeton",
          "LPG",
          "Moneris",
          "MtaPay",
          "Neteller",
          "NinjaWallet",
          "NMI",
          "OchaPay",
          "Onlineueberweisen",
          "Optimal",
          "Pagsmile",
          "Panamerican",
          "ParamountEft",
          "PandaGateway",
          "Pay4Fun",
          "Payeezy",
          "Payflow",
          "PayPal",
          "Payr",
          "Paysafe",
          "Paysafecash",
          "Payvision",
          "Plugnpay",
          "Realex",
          "Realtime",
          "RebillyProcessor",
          "Redsys",
          "Rotessa",
          "RPN",
          "Sagepay",
          "SeamlessChex",
          "Skrill",
          "SmartInvoice",
          "SMSVoucher",
          "SparkPay",
          "StaticGateway",
          "Stripe",
          "UPayCard",
          "USAePay",
          "VantivLitle",
          "vegaaH",
          "Walpay",
          "Wirecard",
          "Worldpay",
          "Zotapay"
        ]
      },
      "acquirerName": {
        "type": "string",
        "description": "The acquirer name",
        "enum": [
          "Alipay",
          "AIB",
          "ApcoPay",
          "AstroPay Card",
          "Ipay Options",
          "B+S",
          "Bambora",
          "BitPay",
          "Bank of America",
          "Bank of Moscow",
          "Bank of Rebilly",
          "Bank One",
          "BMO Harris Bank",
          "Borgun",
          "BraintreePayments",
          "Cardknox",
          "CASHlib",
          "Catalunya Caixa",
          "Chase",
          "ChinaUnionPay",
          "CIM",
          "Coppr",
          "Credorax",
          "Cryptonator",
          "ecoPayz",
          "EcorePay",
          "Elavon",
          "EMS",
          "Fifth Third Bank",
          "First Data Buypass",
          "First Data Nashville",
          "First Data North",
          "First Data Omaha",
          "FinTecSystems",
          "Flexepin",
          "Forte",
          "FundSend",
          "Gigadat",
          "Global East",
          "Gpaysafe",
          "Heartland",
          "HSBC",
          "iCanPay",
          "iCheque",
          "Ilixium",
          "Ingenico",
          "INOVAPAY",
          "Intuit",
          "Jeton",
          "LPG",
          "Masapay",
          "Merrick",
          "Mission Valley Bank",
          "Moneris",
          "NATWEST",
          "Neteller",
          "NinjaWallet",
          "NMI",
          "OchaPay",
          "Onlineueberweisen",
          "Other",
          "Panamerican",
          "Panda Bank",
          "Paramount",
          "ParamountEft",
          "Pay4fun",
          "PayPal",
          "Payr",
          "Payvision",
          "Peoples Trust Company",
          "Privatbank",
          "QQPay",
          "RBC",
          "RBS WorldPay",
          "RealTime",
          "RebillyProcessor",
          "Rotessa",
          "Skrill",
          "SmartInvoice",
          "SMSVoucher",
          "SparkPay",
          "State Bank of Mauritius",
          "Stripe",
          "TBI",
          "TrustPay",
          "TSYS",
          "UPayCard",
          "Vantiv",
          "VoicePay",
          "WeChat Pay",
          "Wells Fargo",
          "Wing Hang Bank",
          "Wirecard",
          "WorldPay",
          "Zotapay"
        ]
      },
      "merchantCategoryCode": {
        "description": "The gateway account's merchant category code",
        "type": "integer",
        "minimum": 742,
        "maximum": 9950
      },
      "dccMarkup": {
        "description": "Dynamic currency conversion markup in basis points",
        "type": "integer",
        "minimum": -10000,
        "maximum": 10000
      },
      "dccForceCurrency": {
        "type": "string",
        "description": "Force dynamic currency conversion to the specified currency on each sale.\nLeave it empty to disable force DCC.\n"
      },
      "descriptor": {
        "description": "The gateway account's descriptor",
        "type": "string"
      },
      "cityField": {
        "description": "The gateway account's city field (also known as line 2 descriptor)",
        "type": "string"
      },
      "organizationId": {
        "description": "Organization ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "excludedDccQuoteCurrencies": {
        "description": "Excluded Dynamic Currency Conversion Quote Currencies",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "monthlyLimit": {
        "description": "Monthly Limit",
        "type": "number",
        "format": "double",
        "minimum": 0
      },
      "approvalWindowTtl": {
        "description": "The time window (in seconds) allotted for approving a suspended transaction before it is automatically canceled",
        "type": "integer",
        "default": 3600,
        "minimum": 300,
        "maximum": 16777215
      },
      "threeDSecure": {
        "description": "True, if Gateway Account allows 3DSecure",
        "type": "boolean"
      },
      "dynamicDescriptor": {
        "description": "True, if Gateway Account allows dynamic descriptor",
        "type": "boolean"
      },
      "acceptedCurrencies": {
        "description": "Accepted currencies (array of the currency three letter code)",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "method": {
        "$ref": "#/components/schemas/Method"
      },
      "paymentCardSchemes": {
        "description": "Accepted payment card brands",
        "type": "array",
        "items": {
          "type": "string",
          "description": "Payment Card brand",
          "enum": [
            "Visa",
            "MasterCard",
            "American Express",
            "Discover",
            "Maestro",
            "Solo",
            "Electron",
            "JCB",
            "Voyager",
            "Diners Club",
            "Switch",
            "Laser",
            "China UnionPay",
            "AstroPay Card"
          ]
        }
      },
      "isDown": {
        "description": "True if gateway is currently in downtime period.",
        "type": "boolean",
        "readOnly": true
      },
      "additionalCriteria": {
        "description": "The additional criteria that allows to check whether the gateway account can be selected for the transaction to be processed.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          }
        ]
      },
      "timeout": {
        "description": "Gateway Account request timeout in seconds",
        "type": "integer",
        "nullable": true,
        "minimum": 10,
        "maximum": 120
      },
      "token": {
        "description": "Gateway Account token",
        "type": "string",
        "readOnly": true,
        "example": "TwiX3f92k4AiBE27BzTbQ38hHjicBz_w"
      },
      "createdTime": {
        "description": "Gateway Account created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Gateway Account updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/OnBoardingUrlLink"
            }
          ]
        }
      }
    }
  },
  "A1Gateway": {
    "description": "A1Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "A1Gateway credentials object",
            "properties": {
              "accountId": {
                "type": "string",
                "description": "A1Gateway account ID"
              },
              "password": {
                "type": "string",
                "description": "A1Gateway password",
                "format": "password"
              }
            },
            "required": [
              "accountId",
              "password"
            ]
          },
          "mpi": {
            "$ref": "#/components/schemas/A1GatewayMpis"
          }
        }
      }
    ]
  },
  "AmexVPC": {
    "description": "AmexVPC config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials",
          "settings"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "AmexVPC credentials object",
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "Merchant ID"
              },
              "accessCode": {
                "type": "string",
                "description": "Access Code",
                "format": "password"
              },
              "user": {
                "type": "string",
                "description": "User (used for refund, void and capture)"
              },
              "password": {
                "type": "string",
                "description": "Password (used for refund, void and capture)",
                "format": "password"
              }
            },
            "required": [
              "merchantId",
              "accessCode",
              "user",
              "password"
            ]
          },
          "settings": {
            "type": "object",
            "description": "AmexVPC settings object",
            "properties": {
              "url": {
                "type": "string",
                "description": "Virtual Payment Client URL"
              }
            },
            "required": [
              "url"
            ]
          }
        }
      }
    ]
  },
  "ApcoPay": {
    "description": "ApcoPay config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "ApcoPay credentials object",
            "properties": {
              "profileID": {
                "type": "string",
                "description": "ApcoPay profile ID"
              },
              "secretWord": {
                "type": "string",
                "description": "ApcoPay secret word",
                "format": "password"
              },
              "MerchantID": {
                "type": "string",
                "description": "ApcoPay merchant ID"
              },
              "MerchantPassword": {
                "type": "string",
                "description": "ApcoPay merchant password",
                "format": "password"
              }
            },
            "required": [
              "profileID",
              "secretWord",
              "MerchantID",
              "MerchantPassword"
            ]
          },
          "settings": {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "description": "ApcoPay's method",
                "enum": [
                  "AFTERPAY",
                  "IDEAL",
                  "CREDITCLICK",
                  "BANCONTACT",
                  "ONLINEUBERWEISEN"
                ]
              }
            },
            "required": [
              "method"
            ]
          }
        }
      }
    ]
  },
  "AstroPay": {
    "description": "AstroPay config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "AstroPay credentials object",
            "properties": {
              "x_login": {
                "type": "string",
                "description": "AstroPay login"
              },
              "x_tran_key": {
                "type": "string",
                "description": "AstroPay transaction key",
                "format": "password"
              },
              "secret_key": {
                "type": "string",
                "description": "AstroPay secret key",
                "format": "password"
              },
              "web_pay_login": {
                "type": "string",
                "description": "AstroPay web pay status login"
              },
              "web_pay_tran_key": {
                "type": "string",
                "description": "AstroPay web pay status password",
                "format": "password"
              }
            },
            "required": [
              "x_login",
              "x_tran_key",
              "secret_key",
              "web_pay_login",
              "web_pay_tran_key"
            ]
          },
          "settings": {
            "type": "object",
            "description": "AstroPay settings object",
            "properties": {
              "banks": {
                "type": "array",
                "description": "list of banks which will show on hook page",
                "items": {
                  "$ref": "#/components/schemas/AstroPayBanks"
                }
              },
              "skipStep": {
                "type": "boolean",
                "description": "Skip step for user to enter their personal information."
              }
            }
          }
        }
      }
    ]
  },
  "AstroPayCard": {
    "description": "AstroPay Card config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "AstroPay Card credentials object",
            "properties": {
              "x_login": {
                "type": "string",
                "description": "AstroPay Card login"
              },
              "x_tran_key": {
                "type": "string",
                "description": "AstroPay Card transaction key",
                "format": "password"
              },
              "secret_key": {
                "type": "string",
                "description": "AstroPay Card secret key",
                "format": "password"
              }
            },
            "required": [
              "x_login",
              "x_tran_key",
              "secret_key"
            ]
          }
        }
      }
    ]
  },
  "AuthorizeNet": {
    "description": "AuthorizeNet Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "apiLoginId": {
                "type": "string",
                "description": "AuthorizeNet Gateway api login ID"
              },
              "transactionKey": {
                "description": "AuthorizeNet Gateway Transaction Key",
                "type": "string",
                "format": "password"
              }
            },
            "required": [
              "apiLoginId",
              "transactionKey"
            ]
          }
        }
      }
    ]
  },
  "Bambora": {
    "description": "Bambora Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "Bambora Gateway merchant ID"
              },
              "apiPasscode": {
                "type": "string",
                "description": "Bambora Gateway API Passcode",
                "format": "password"
              }
            },
            "required": [
              "merchantId",
              "apiPasscode"
            ]
          }
        }
      }
    ]
  },
  "BitPay": {
    "description": "BitPay Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "BitPay credentials object",
            "properties": {
              "token": {
                "type": "string",
                "description": "BitPay merchant API token",
                "format": "password"
              }
            },
            "required": [
              "token"
            ]
          }
        }
      }
    ]
  },
  "BlueSnap": {
    "description": "BlueSnap config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "BlueSnap credentials object",
            "properties": {
              "username": {
                "type": "string",
                "description": "BlueSnap merchant's api username."
              },
              "password": {
                "type": "string",
                "description": "BlueSnap merchant's api password.",
                "format": "password"
              }
            },
            "required": [
              "username",
              "password"
            ]
          }
        }
      }
    ]
  },
  "BraintreePayments": {
    "description": "BraintreePayments Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "publicKey": {
                "type": "string",
                "description": "BraintreePayments Public Key"
              },
              "privateKey": {
                "type": "string",
                "description": "BraintreePayments Private Key",
                "format": "password"
              },
              "merchantId": {
                "type": "string",
                "description": "BraintreePayments merchant ID",
                "format": "password"
              },
              "merchantAccountId": {
                "type": "string",
                "description": "BraintreePayments merchant account ID",
                "format": "password"
              }
            },
            "required": [
              "publicKey",
              "privateKey",
              "merchantId",
              "merchantAccountId"
            ]
          }
        }
      }
    ]
  },
  "Cardknox": {
    "description": "Cardknox Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "xKey": {
                "type": "string",
                "description": "Cardknox xKey",
                "format": "password"
              }
            },
            "required": [
              "xKey"
            ]
          }
        }
      }
    ]
  },
  "Cashflows": {
    "description": "Cashflows Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "authId": {
                "type": "string",
                "description": "Cashflows Gateway auth ID"
              },
              "authPassword": {
                "type": "string",
                "description": "Cashflows Gateway auth password",
                "format": "password"
              }
            },
            "required": [
              "authPassword",
              "authId"
            ]
          }
        }
      }
    ]
  },
  "CASHlib": {
    "description": "CASHlib config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "CASHlib credentials object",
            "properties": {
              "apiKey": {
                "type": "string",
                "description": "CASHlib API Key",
                "format": "password"
              },
              "merchantId": {
                "type": "string",
                "description": "CASHlib merchant id"
              }
            },
            "required": [
              "apiKey",
              "merchantId"
            ]
          }
        }
      }
    ]
  },
  "CashToCode": {
    "description": "CashToCode config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "CashToCode credentials object",
            "properties": {
              "cashToCodeUsername": {
                "type": "string",
                "description": "CashToCode credentials Username"
              },
              "cashToCodePassword": {
                "type": "string",
                "description": "CashToCode credentials password",
                "format": "password"
              },
              "merchantUsername": {
                "type": "string",
                "description": "Merchant credentials Username"
              },
              "merchantPassword": {
                "type": "string",
                "description": "Merchant credentials password",
                "format": "password"
              }
            },
            "required": [
              "cashToCodeUsername",
              "cashToCodePassword",
              "merchantUsername",
              "merchantPassword"
            ]
          },
          "settings": {
            "type": "object",
            "properties": {
              "skipAmountSelection": {
                "type": "boolean",
                "description": "Skip amount selection screen",
                "default": false
              }
            }
          }
        }
      }
    ]
  },
  "CauriPayment": {
    "description": "CauriPayment config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "CauriPayment credentials object",
            "properties": {
              "publicKey": {
                "type": "string",
                "description": "CauriPayment merchant's public key."
              },
              "privateKey": {
                "type": "string",
                "description": "CauriPayment merchant's private key.",
                "format": "password"
              }
            },
            "required": [
              "publicKey",
              "privateKey"
            ]
          }
        }
      }
    ]
  },
  "Cayan": {
    "description": "Cayan Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "merchantSiteId": {
                "type": "string",
                "description": "Cayan Gateway merchant site ID"
              },
              "merchantName": {
                "type": "string",
                "description": "Cayan Gateway merchant name"
              },
              "merchantKey": {
                "type": "string",
                "description": "Cayan Gateway merchant key",
                "format": "password"
              }
            },
            "required": [
              "merchantSiteId",
              "merchantName",
              "merchantKey"
            ]
          }
        }
      }
    ]
  },
  "Chase": {
    "description": "Chase Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "Chase Gateway Net Connect username"
              },
              "password": {
                "type": "string",
                "description": "Chase Gateway Net Connect password",
                "format": "password"
              },
              "coNumber": {
                "type": "string",
                "description": "Chase Gateway CO Number used for delimited file reports"
              },
              "divisionId": {
                "type": "string",
                "description": "Chase Gateway division ID"
              },
              "partialAuth": {
                "type": "boolean",
                "description": "Support for Partial Auths",
                "default": false
              }
            },
            "required": [
              "username",
              "password",
              "coNumber",
              "divisionId",
              "partialAuth"
            ]
          }
        }
      }
    ]
  },
  "Coppr": {
    "description": "Coppr config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Coppr credentials object",
            "properties": {
              "organizationId": {
                "type": "string",
                "description": "Coppr Organization's ID"
              },
              "apiKey": {
                "type": "string",
                "description": "Coppr api key",
                "format": "password"
              }
            },
            "required": [
              "organizationId",
              "apiKey"
            ]
          }
        }
      }
    ]
  },
  "Credorax": {
    "description": "Credorax Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "Credorax Gateway merchant ID"
              },
              "merchantMd5Signature": {
                "type": "string",
                "description": "Credorax Gateway md5 signature",
                "format": "password"
              }
            },
            "required": [
              "merchantId",
              "merchantMd5Signature"
            ]
          }
        }
      }
    ]
  },
  "Cryptonator": {
    "description": "Cryptonator config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Cryptonator credentials object",
            "properties": {
              "merchant_id": {
                "type": "string",
                "description": "Cryptonator merchant ID"
              },
              "secret": {
                "type": "string",
                "description": "Cryptonator secret",
                "format": "password"
              }
            },
            "required": [
              "merchant_id",
              "secret"
            ]
          }
        }
      }
    ]
  },
  "DataCash": {
    "description": "DataCash Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "client": {
                "type": "string",
                "description": "DataCash Gateway client"
              },
              "password": {
                "type": "string",
                "description": "DataCash Gateway password",
                "format": "password"
              },
              "reportGroup": {
                "type": "string",
                "description": "DataCash report group"
              },
              "reportUser": {
                "type": "string",
                "description": "DataCash report user"
              },
              "reportPassword": {
                "type": "string",
                "description": "DataCash report password",
                "format": "password"
              },
              "visaPayoutsClient": {
                "type": "string",
                "description": "DataCash Gateway client for Visa payouts (OCT)"
              },
              "visaPayoutsPassword": {
                "type": "string",
                "description": "DataCash Gateway password for Visa payouts (OCT)",
                "format": "password"
              },
              "masterCardPayoutsClient": {
                "type": "string",
                "description": "DataCash Gateway client for MasterCard payouts (OCT)"
              },
              "masterCardPayoutsPassword": {
                "type": "string",
                "description": "DataCash Gateway password for MasterCard payouts (OCT)",
                "format": "password"
              }
            },
            "required": [
              "client",
              "password"
            ]
          },
          "settings": {
            "type": "object",
            "description": "Datacash settings object",
            "properties": {
              "policy": {
                "type": "integer",
                "description": "Policy",
                "minimum": 0,
                "maximum": 7,
                "default": 2
              },
              "delay": {
                "type": "integer",
                "description": "Auto Capture delay (in hours)",
                "minimum": 0,
                "default": 0
              }
            }
          },
          "mpi": {
            "$ref": "#/components/schemas/DataCashMpis"
          }
        }
      }
    ]
  },
  "Dengi": {
    "description": "Dengi Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "projectId": {
                "type": "string",
                "description": "Dengi Gateway project ID"
              },
              "publicKey": {
                "type": "string",
                "description": "Dengi Gateway public key",
                "format": "password"
              },
              "refundKey": {
                "type": "string",
                "description": "Dengi Gateway refund key",
                "format": "password"
              }
            },
            "required": [
              "projectId",
              "publicKey",
              "refundKey"
            ]
          }
        }
      }
    ]
  },
  "ecoPayz": {
    "description": "ecoPayz config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "ecoPayz credentials object",
            "properties": {
              "paymentPageId": {
                "type": "string",
                "description": "ecoPayz payment page ID"
              },
              "merchantAccountNumber": {
                "type": "string",
                "description": "ecoPayz merchant account number"
              },
              "merchantPassword": {
                "type": "string",
                "description": "ecoPayz merchant password",
                "format": "password"
              }
            },
            "required": [
              "paymentPageId",
              "merchantAccountNumber",
              "merchantPassword"
            ]
          },
          "settings": {
            "type": "object",
            "description": "ecoPayz settings object",
            "properties": {
              "validCurrency": {
                "type": "string",
                "description": "Three letter currency code",
                "enum": [
                  "CAD",
                  "EUR",
                  "GBP",
                  "USD"
                ]
              }
            },
            "required": [
              "validCurrency"
            ]
          }
        }
      }
    ]
  },
  "EcorePay": {
    "description": "EcorePay Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "accountId": {
                "type": "string",
                "description": "EcorePay Account ID"
              },
              "accountAuth": {
                "type": "string",
                "description": "EcorePay Account Auth",
                "format": "password"
              }
            },
            "required": [
              "accountId",
              "accountAuth"
            ]
          }
        }
      }
    ]
  },
  "Elavon": {
    "description": "Elavon config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Elavon credentials object",
            "properties": {
              "ssl_merchant_id": {
                "type": "string",
                "description": "Elavon merchant ID"
              },
              "ssl_user_id": {
                "type": "string",
                "description": "Elavon user ID"
              },
              "ssl_pin": {
                "type": "string",
                "description": "Elavon pin",
                "format": "password"
              }
            },
            "required": [
              "ssl_merchant_id",
              "ssl_user_id",
              "ssl_pin"
            ]
          }
        }
      }
    ]
  },
  "eMerchantPay": {
    "description": "eMerchantPay Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "clientId": {
                "type": "string",
                "description": "eMerchantPay Gateway client ID"
              },
              "apiKey": {
                "type": "string",
                "description": "eMerchantPay Gateway api key",
                "format": "password"
              },
              "username": {
                "type": "string",
                "description": "eMerchantPay username for Genesis platform"
              },
              "token": {
                "type": "string",
                "description": "eMerchantPay token for Genesis platform"
              },
              "password": {
                "type": "string",
                "description": "eMerchantPay password for Genesis platform",
                "format": "password"
              }
            }
          },
          "settings": {
            "type": "object",
            "description": "eMerchantPay settings object",
            "properties": {
              "platform": {
                "type": "string",
                "description": "eMerchantPay platform to process payment. default to IPG",
                "enum": [
                  "IPG",
                  "Genesis"
                ]
              }
            }
          },
          "mpi": {
            "$ref": "#/components/schemas/eMerchantPayMpis"
          }
        }
      }
    ]
  },
  "FinTecSystems": {
    "description": "FinTecSystems config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials",
          "settings"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "FinTecSystems credentials object",
            "properties": {
              "apiKey": {
                "type": "string",
                "description": "FinTecSystems api key",
                "format": "password"
              }
            },
            "required": [
              "apiKey"
            ]
          },
          "settings": {
            "type": "object",
            "description": "FinTecSystems settings object",
            "properties": {
              "recipientIBAN": {
                "type": "string",
                "description": "IBAN of the recipient account"
              },
              "recipientBIC": {
                "type": "string",
                "description": "BIC of the recipient account"
              },
              "recipientCountry": {
                "type": "string",
                "description": "Two letter country code",
                "enum": [
                  "AT",
                  "CH",
                  "DE"
                ]
              },
              "recipientHolder": {
                "type": "string",
                "description": "Account holder of the recipient account"
              }
            },
            "required": [
              "recipientIBAN",
              "recipientBIC",
              "recipientHolder",
              "recipientCountry"
            ]
          }
        }
      }
    ]
  },
  "Flexepin": {
    "description": "Flexepin Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "apiKey": {
                "type": "string",
                "description": "Flexepin API Key"
              },
              "apiSecret": {
                "type": "string",
                "description": "Flexepin API Secret",
                "format": "password"
              }
            },
            "required": [
              "apiKey",
              "apiSecret"
            ]
          }
        }
      }
    ]
  },
  "Forte": {
    "description": "Forte Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "accountId": {
                "type": "string",
                "description": "Forte Gateway account ID"
              },
              "locationId": {
                "type": "string",
                "description": "Forte Gateway location ID"
              },
              "apiAccessId": {
                "type": "string",
                "description": "Forte Gateway api access ID",
                "format": "password"
              },
              "apiSecretKey": {
                "type": "string",
                "description": "Forte Gateway api secret key",
                "format": "password"
              }
            },
            "required": [
              "accountId",
              "locationId",
              "apiAccessId",
              "apiSecretKey"
            ]
          }
        }
      }
    ]
  },
  "FundSend": {
    "description": "FundSend Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "clientId": {
                "type": "string",
                "description": "FundSend Gateway client ID"
              },
              "secretWord": {
                "type": "string",
                "description": "FundSend Gateway secret word",
                "format": "password"
              }
            },
            "required": [
              "clientId",
              "secretWord"
            ]
          }
        }
      }
    ]
  },
  "GET": {
    "description": "GET Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "accountId": {
                "type": "string",
                "description": "GET Gateway account ID"
              }
            },
            "required": [
              "accountId"
            ]
          },
          "mpi": {
            "$ref": "#/components/schemas/GETMpis"
          }
        }
      }
    ]
  },
  "Gigadat": {
    "description": "Gigadat config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Gigadat credentials object",
            "properties": {
              "campaignId": {
                "type": "string",
                "description": "Gigadat campaign ID"
              },
              "accessToken": {
                "type": "string",
                "description": "Gigadat access token",
                "format": "password"
              },
              "securityToken": {
                "type": "string",
                "description": "Gigadat security token",
                "format": "password"
              }
            },
            "required": [
              "campaignId",
              "accessToken",
              "securityToken"
            ]
          },
          "settings": {
            "type": "object",
            "properties": {
              "sandbox": {
                "type": "boolean",
                "description": "True if gateway account is in sandbox mode",
                "default": false
              }
            },
            "required": [
              "sandbox"
            ]
          }
        }
      }
    ]
  },
  "GlobalOne": {
    "description": "GlobalOne Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "terminalId": {
                "type": "string",
                "description": "GlobalOne Gateway terminal ID"
              },
              "sharedSecret": {
                "type": "string",
                "description": "GlobalOne Gateway shared secret",
                "format": "password"
              }
            },
            "required": [
              "terminalId",
              "sharedSecret"
            ]
          }
        }
      }
    ]
  },
  "Gpaysafe": {
    "description": "Gpaysafe Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "apiKey": {
                "type": "string",
                "description": "Gpaysafe apiKey"
              }
            },
            "required": [
              "apiKey"
            ]
          }
        }
      }
    ]
  },
  "Greenbox": {
    "description": "Greenbox config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Greenbox credentials object",
            "properties": {
              "clientId": {
                "type": "string",
                "description": "Greenbox client ID"
              },
              "locationId": {
                "type": "string",
                "description": "Greenbox location ID"
              },
              "clientSecret": {
                "type": "string",
                "description": "Greenbox client secret",
                "format": "password"
              }
            },
            "required": [
              "clientId",
              "clientSecret",
              "locationId"
            ]
          }
        }
      }
    ]
  },
  "iCanPay": {
    "description": "iCanPay Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "authenticateId": {
                "type": "string",
                "description": "iCanPay Gateway authenticate ID"
              },
              "authenticatePw": {
                "type": "string",
                "description": "iCanPay Gateway authenticate password",
                "format": "password"
              },
              "publicKey": {
                "type": "string",
                "description": "iCanPay Gateway API public key"
              },
              "secretKey": {
                "type": "string",
                "description": "iCanPay Gateway API secret key",
                "format": "password"
              }
            },
            "required": [
              "authenticateId",
              "authenticatePw",
              "publicKey",
              "secretKey"
            ]
          }
        }
      }
    ]
  },
  "iCheque": {
    "description": "iCheque Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "clientId": {
                "type": "string",
                "description": "iCheque Gateway client ID"
              },
              "secretWord": {
                "type": "string",
                "description": "iCheque Gateway secret word",
                "format": "password"
              },
              "apiUserId": {
                "type": "string",
                "description": "Username for the Alliance API (transaction reporting)"
              },
              "apiSecurityToken": {
                "type": "string",
                "description": "Hash of the password for the Alliance API (transaction reporting)",
                "format": "password"
              }
            },
            "required": [
              "clientId",
              "secretWord"
            ]
          }
        }
      }
    ]
  },
  "iDebit": {
    "description": "iDebit config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "iDebit credentials object",
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "iDebit merchant account number"
              },
              "password": {
                "type": "string",
                "description": "iDebit merchant account password",
                "format": "password"
              }
            },
            "required": [
              "merchantId",
              "password"
            ]
          }
        }
      }
    ]
  },
  "Ilixium": {
    "description": "Ilixium Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Ilixium credentials object",
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "Ilixium Gateway merchant ID"
              },
              "accountId": {
                "type": "string",
                "description": "Ilixium Gateway account ID"
              },
              "digestPassword": {
                "type": "string",
                "description": "Ilixium Gateway digest password",
                "format": "password"
              }
            },
            "required": [
              "merchantId",
              "accountId",
              "digestPassword"
            ]
          },
          "settings": {
            "type": "object",
            "description": "Ilixium settings object",
            "properties": {
              "useIpFrame": {
                "type": "boolean",
                "description": "Force Ilixium to process via Ip Frame"
              }
            }
          },
          "mpi": {
            "$ref": "#/components/schemas/IlixiumMpis"
          }
        }
      }
    ]
  },
  "Ingenico": {
    "description": "Ingenico Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "Ingenico Gateway merchant ID"
              },
              "apiKeyId": {
                "type": "string",
                "description": "Ingenico Gateway api key ID"
              },
              "apiSecretKey": {
                "type": "string",
                "description": "Ingenico Gateway api secret key",
                "format": "password"
              },
              "skipFraudService": {
                "type": "boolean",
                "description": "Ingenico skip fraud service"
              }
            },
            "required": [
              "merchantId",
              "apiKeyId",
              "apiSecretKey"
            ]
          },
          "mpi": {
            "$ref": "#/components/schemas/IngenicoMpis"
          }
        }
      }
    ]
  },
  "INOVAPAY": {
    "description": "INOVAPAY config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "INOVAPAY credentials object",
            "properties": {
              "apiKey": {
                "type": "string",
                "description": "INOVAPAY API key"
              },
              "apiSecret": {
                "type": "string",
                "description": "INOVAPAY API secret",
                "format": "password"
              }
            },
            "required": [
              "apiKey",
              "apiSecret"
            ]
          }
        }
      }
    ]
  },
  "Inovio": {
    "description": "Inovio config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials",
          "settings"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Inovio credentials object",
            "properties": {
              "username": {
                "type": "string",
                "description": "Inovio username"
              },
              "password": {
                "type": "string",
                "description": "Inovio password",
                "format": "password"
              }
            },
            "required": [
              "username",
              "password"
            ]
          },
          "settings": {
            "type": "object",
            "description": "Inovio settings object",
            "properties": {
              "websiteId": {
                "type": "string",
                "description": "Inovio website ID"
              },
              "merchantAccountId": {
                "type": "string",
                "description": "Inovio merchant account ID"
              },
              "productId": {
                "type": "string",
                "description": "Inovio product ID"
              }
            },
            "required": [
              "websiteId",
              "merchantAccountId",
              "productId"
            ]
          },
          "mpi": {
            "$ref": "#/components/schemas/InovioMpis"
          }
        }
      }
    ]
  },
  "InstaDebit": {
    "description": "InstaDebit config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "InstaDebit credentials object",
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "InstaDebit merchant account number"
              },
              "password": {
                "type": "string",
                "description": "InstaDebit merchant account password",
                "format": "password"
              }
            },
            "required": [
              "merchantId",
              "password"
            ]
          }
        }
      }
    ]
  },
  "Intuit": {
    "description": "Intuit Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "clientId": {
                "type": "string",
                "description": "The Intuit client_id key"
              },
              "clientSecret": {
                "type": "string",
                "description": "The Intuit client_secret key",
                "format": "password"
              }
            },
            "required": [
              "clientId",
              "clientSecret"
            ]
          }
        }
      }
    ]
  },
  "IpayOptions": {
    "description": "Ipay Options config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials",
          "settings"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Ipay Options credentials object",
            "properties": {
              "sid": {
                "type": "string",
                "description": "Ipay Options website ID"
              },
              "rcode": {
                "type": "string",
                "description": "Ipay Options rcode",
                "format": "password"
              }
            },
            "required": [
              "sid",
              "rcode"
            ]
          },
          "settings": {
            "type": "object",
            "description": "Ipay Options settings object",
            "properties": {
              "extraStep": {
                "type": "boolean",
                "description": "Show extra step for user to enter their email and DNI number"
              },
              "subdomain": {
                "type": "string",
                "description": "Subdomain to use when sending request to IpayOptions.",
                "enum": [
                  "miglite",
                  "w88asiapay"
                ]
              },
              "platform": {
                "type": "string",
                "description": "Platform which IpayOptions will process.",
                "enum": [
                  "SOAP",
                  "TxHandler"
                ]
              }
            }
          }
        }
      }
    ]
  },
  "Jeton": {
    "description": "Jeton Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "apiKey": {
                "type": "string",
                "description": "Jeton apiKey",
                "format": "password"
              }
            },
            "required": [
              "apiKey"
            ]
          },
          "settings": {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "description": "Jeton's method",
                "enum": [
                  "CHECKOUT",
                  "DIRECT",
                  "QR",
                  "JETGO"
                ]
              }
            },
            "required": [
              "method"
            ]
          }
        }
      }
    ]
  },
  "JetPay": {
    "description": "JetPay Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "TerminalID": {
                "type": "string",
                "description": "JetPay Gateway terminal ID"
              }
            },
            "required": [
              "TerminalID"
            ]
          }
        }
      }
    ]
  },
  "LPG": {
    "description": "LPG config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "LPG credentials object",
            "properties": {
              "publicKey": {
                "type": "string",
                "description": "LPG public API key"
              },
              "secureKey": {
                "type": "string",
                "description": "LPG secure API key",
                "format": "password"
              }
            },
            "required": [
              "publicKey",
              "secureKey"
            ]
          }
        }
      }
    ]
  },
  "Moneris": {
    "description": "Moneris Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "apiToken": {
                "type": "string",
                "description": "Moneris Gateway api token",
                "format": "password"
              },
              "storeId": {
                "type": "string",
                "description": "Moneris Gateway store ID"
              }
            },
            "required": [
              "storeId",
              "apiToken"
            ]
          }
        }
      }
    ]
  },
  "MtaPay": {
    "description": "MTA Pay Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials",
          "settings"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "accountId": {
                "type": "string",
                "description": "MTA Pay Gateway account ID"
              },
              "partyId": {
                "type": "string",
                "description": "MTA Pay Gateway party ID"
              },
              "md5key": {
                "type": "string",
                "description": "MTA Pay Gateway md5key",
                "format": "password"
              }
            },
            "required": [
              "accountId",
              "partyId",
              "md5key"
            ]
          },
          "settings": {
            "type": "object",
            "description": "MTA Pay settings object",
            "properties": {
              "goods": {
                "type": "string",
                "description": "MTA Pay Gateway goods"
              },
              "mobilePay": {
                "type": "string",
                "description": "MTA Pay Gateway mobile pay param"
              }
            },
            "required": [
              "mobilePay",
              "goods"
            ]
          }
        }
      }
    ]
  },
  "Neteller": {
    "description": "Neteller Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Neteller credentials object",
            "properties": {
              "clientId": {
                "type": "string",
                "description": "Neteller App Client ID"
              },
              "clientSecret": {
                "type": "string",
                "description": "Neteller App Client Secret",
                "format": "password"
              },
              "webhookSecretKey": {
                "type": "string",
                "description": "Neteller Webhook Secret Key",
                "format": "password"
              }
            },
            "required": [
              "clientId",
              "clientSecret",
              "webhookSecretKey"
            ]
          },
          "settings": {
            "type": "object",
            "description": "Neteller settings object",
            "properties": {
              "netellerGo": {
                "type": "boolean",
                "description": "Enable NETELLERgo! payment flow"
              }
            }
          }
        }
      }
    ]
  },
  "NinjaWallet": {
    "description": "NinjaWallet config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "NinjaWallet credentials object",
            "properties": {
              "apiKey": {
                "type": "string",
                "description": "NinjaWallet api key",
                "format": "password"
              },
              "secret": {
                "type": "string",
                "description": "NinjaWallet secret",
                "format": "password"
              },
              "passphrase": {
                "type": "string",
                "description": "NinjaWallet passphrase",
                "format": "password"
              }
            },
            "required": [
              "apiKey",
              "secret",
              "passphrase"
            ]
          }
        }
      }
    ]
  },
  "NMI": {
    "description": "NMI Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "NMI Gateway api token"
              },
              "password": {
                "type": "string",
                "description": "NMI Gateway store ID",
                "format": "password"
              }
            },
            "required": [
              "username",
              "password"
            ]
          },
          "mpi": {
            "$ref": "#/components/schemas/NMIMpis"
          }
        }
      }
    ]
  },
  "OchaPay": {
    "description": "OchaPay Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "apiUsername": {
                "type": "string",
                "description": "OchaPay Gateway username"
              },
              "apiPassword": {
                "type": "string",
                "description": "OchaPay Gateway api password",
                "format": "password"
              },
              "secretWord": {
                "type": "string",
                "description": "OchaPay Gateway secret word",
                "format": "password"
              }
            },
            "required": [
              "apiUsername",
              "apiPassword",
              "secretWord"
            ]
          }
        }
      }
    ]
  },
  "Onlineueberweisen": {
    "description": "Onlineueberweisen config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials",
          "settings"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Onlineueberweisen credentials object",
            "properties": {
              "apiKey": {
                "type": "string",
                "description": "Onlineueberweisen API Key",
                "format": "password"
              }
            },
            "required": [
              "apiKey"
            ]
          },
          "settings": {
            "type": "object",
            "description": "Onlineueberweisen settings object",
            "properties": {
              "payformCode": {
                "type": "string",
                "description": "Onlineueberweisen payform code to use customized Payform template",
                "default": "default"
              }
            }
          }
        }
      }
    ]
  },
  "Optimal": {
    "description": "Optimal Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "storeId": {
                "type": "string",
                "description": "Optimal Gateway store ID"
              },
              "storePwd": {
                "type": "string",
                "description": "Optimal Gateway store password",
                "format": "password"
              },
              "accountNum": {
                "type": "string",
                "description": "Optimal Gateway account number"
              }
            },
            "required": [
              "storeId",
              "storePwd",
              "accountNum"
            ]
          },
          "mpi": {
            "$ref": "#/components/schemas/OptimalMpis"
          }
        }
      }
    ]
  },
  "Pagsmile": {
    "description": "Pagsmile Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "Pagsmile merchant ID"
              },
              "appId": {
                "type": "string",
                "description": "Pagsmile app ID"
              },
              "secretKey": {
                "type": "string",
                "description": "Pagsmile secret key",
                "format": "password"
              }
            },
            "required": [
              "merchantId",
              "appId",
              "secretKey"
            ]
          }
        }
      }
    ]
  },
  "Panamerican": {
    "description": "Panamerican config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials",
          "settings"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Panamerican credentials object",
            "properties": {
              "key": {
                "type": "string",
                "description": "Panamerican's key"
              },
              "password": {
                "type": "string",
                "description": "Panamerican's Password",
                "format": "password"
              }
            },
            "required": [
              "key",
              "password"
            ]
          },
          "mpi": {
            "$ref": "#/components/schemas/PanamericanMpis"
          },
          "settings": {
            "type": "object",
            "description": "Panamerican settings object",
            "properties": {
              "extraStep": {
                "type": "boolean",
                "description": "Show extra step for user to enter their ID number"
              },
              "convertToAscii": {
                "type": "boolean",
                "description": "Will convert all chars to ascii"
              }
            },
            "required": [
              "extraStep"
            ]
          }
        }
      }
    ]
  },
  "PandaGateway": {
    "description": "Panda Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "merchantCode": {
                "type": "string",
                "description": "Panda Gateway merchant code"
              },
              "apiCode": {
                "type": "string",
                "description": "Panda Gateway api code"
              },
              "signKey": {
                "type": "string",
                "description": "Panda Gateway sign key",
                "format": "password"
              }
            },
            "required": [
              "merchantCode",
              "apiCode",
              "signKey"
            ]
          }
        }
      }
    ]
  },
  "ParamountEft": {
    "description": "Paramount config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Paramount credentials object",
            "properties": {
              "merchant_id": {
                "type": "string",
                "description": "Merchant account ID"
              },
              "merchant_pass": {
                "type": "string",
                "description": "Merchant account password",
                "format": "password"
              },
              "payee": {
                "type": "string",
                "description": "Merchant name/descriptor"
              }
            },
            "required": [
              "merchant_id",
              "merchant_pass",
              "payee"
            ]
          }
        }
      }
    ]
  },
  "Pay4Fun": {
    "description": "Pay4Fun config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Pay4Fun credentials object",
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "Pay4Fun merchant ID"
              },
              "merchantSecret": {
                "type": "string",
                "description": "Pay4Fun merchant secret",
                "format": "password"
              },
              "merchantKey": {
                "type": "string",
                "description": "Pay4Fun merchant key",
                "format": "password"
              }
            },
            "required": [
              "merchantId",
              "merchantSecret",
              "merchantKey"
            ]
          }
        }
      }
    ]
  },
  "Payeezy": {
    "description": "Payeezy Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "Payeezy Merchant ID"
              },
              "merchantToken": {
                "type": "string",
                "description": "Merchant Token",
                "format": "password"
              },
              "apiKey": {
                "type": "string",
                "description": "API Key"
              },
              "apiSecret": {
                "type": "string",
                "description": "API Secret",
                "format": "password"
              }
            },
            "required": [
              "merchantId",
              "merchantToken",
              "apiKey",
              "apiSecret"
            ]
          }
        }
      }
    ]
  },
  "Payflow": {
    "description": "Payflow config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Payflow credentials object",
            "properties": {
              "user": {
                "type": "string",
                "description": "If you set up one or more additional users on the account, this value is the ID of the user authorized to process transactions. If, however, you have not set up additional users, USER has the same value as VENDOR"
              },
              "vendor": {
                "type": "string",
                "description": "Your merchant login ID created when you registered for the account."
              },
              "password": {
                "type": "string",
                "description": "The password you defined while registering for the account.",
                "format": "password"
              }
            },
            "required": [
              "user",
              "vendor",
              "password"
            ]
          }
        }
      }
    ]
  },
  "PayPal": {
    "description": "PayPal Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "merchantIdInPayPal": {
                "type": "string",
                "description": "PayPal Gateway merchant id"
              }
            },
            "required": [
              "merchantIdInPayPal"
            ]
          }
        }
      }
    ]
  },
  "Payr": {
    "description": "Payr Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "clientId": {
                "type": "string",
                "description": "Payr Gateway client ID"
              },
              "secretWord": {
                "type": "string",
                "description": "Payr Gateway secret word",
                "format": "password"
              },
              "apiUserId": {
                "type": "string",
                "description": "Username for the Alliance API (transaction reporting)"
              },
              "apiSecurityToken": {
                "type": "string",
                "description": "Hash of the password for the Alliance API (transaction reporting)",
                "format": "password"
              }
            },
            "required": [
              "clientId",
              "secretWord"
            ]
          }
        }
      }
    ]
  },
  "Paysafe": {
    "description": "Paysafe Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "storeId": {
                "type": "string",
                "description": "Paysafe Gateway store ID"
              },
              "storePwd": {
                "type": "string",
                "description": "Paysafe Gateway store password",
                "format": "password"
              },
              "accountNum": {
                "type": "string",
                "description": "Paysafe Gateway account number"
              }
            },
            "required": [
              "storeId",
              "storePwd",
              "accountNum"
            ]
          },
          "mpi": {
            "$ref": "#/components/schemas/PaysafeMpis"
          }
        }
      }
    ]
  },
  "Paysafecash": {
    "description": "Paysafecash Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "apiKey": {
                "type": "string",
                "description": "Paysafecash API key",
                "format": "password"
              }
            },
            "required": [
              "apiKey"
            ]
          }
        }
      }
    ]
  },
  "Payvision": {
    "description": "Payvision Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "memberId": {
                "type": "string",
                "description": "Payvision Gateway member id"
              },
              "memberGuid": {
                "type": "string",
                "description": "Payvision Gateway member guid",
                "format": "password"
              }
            },
            "required": [
              "memberId",
              "memberGuid"
            ]
          },
          "settings": {
            "type": "object",
            "description": "Payvision settings object",
            "properties": {
              "avs": {
                "type": "boolean",
                "description": "Payvision Gateway avs"
              },
              "delay": {
                "type": "integer",
                "description": "Payvision Gateway delay"
              },
              "merchantAccountType": {
                "type": "integer",
                "description": "Payvision merchant account type"
              }
            }
          },
          "mpi": {
            "$ref": "#/components/schemas/PayvisionMpis"
          }
        }
      }
    ]
  },
  "Plugnpay": {
    "description": "Plugnpay Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "publisher-name": {
                "type": "string",
                "description": "Plugnpay Gateway member id"
              },
              "publisher-password": {
                "type": "string",
                "description": "Plugnpay Gateway avs",
                "format": "password"
              }
            },
            "required": [
              "publisher-name",
              "publisher-password"
            ]
          }
        }
      }
    ]
  },
  "Realex": {
    "description": "Realex Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "Realex Gateway merchant id"
              },
              "secretKey": {
                "type": "string",
                "description": "Realex Gateway secret key",
                "format": "password"
              },
              "rebatePassword": {
                "type": "string",
                "description": "Realex Gateway rebate password",
                "format": "password"
              },
              "account": {
                "type": "string",
                "description": "Realex Gateway account"
              }
            },
            "required": [
              "merchantId",
              "secretKey",
              "rebatePassword",
              "account"
            ]
          }
        }
      }
    ]
  },
  "Realtime": {
    "description": "Realtime Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "clientId": {
                "type": "string",
                "description": "Realtime Gateway client ID"
              },
              "secretWord": {
                "type": "string",
                "description": "Realtime Gateway secret word",
                "format": "password"
              }
            },
            "required": [
              "clientId",
              "secretWord"
            ]
          }
        }
      }
    ]
  },
  "RebillyProcessor": {
    "description": "RebillyProcessor Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "properties": {
          "mpi": {
            "$ref": "#/components/schemas/RebillyProcessorMpis"
          }
        }
      }
    ]
  },
  "Redsys": {
    "description": "Redsys Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "merchantCode": {
                "type": "string",
                "description": "Redsys Gateway merchant code",
                "format": "password"
              },
              "secretCode": {
                "type": "string",
                "description": "Redsys Gateway secret code",
                "format": "password"
              }
            },
            "required": [
              "merchantCode",
              "secretCode"
            ]
          }
        }
      }
    ]
  },
  "Rotessa": {
    "description": "Rotessa config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials",
          "settings"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Rotessa credentials object",
            "properties": {
              "apiKey": {
                "type": "string",
                "description": "Rotessa api key",
                "format": "password"
              }
            },
            "required": [
              "apiKey"
            ]
          },
          "settings": {
            "type": "object",
            "description": "Rotessa settings object",
            "properties": {
              "delay": {
                "type": "integer",
                "description": "Rotessa Gateway time delay for them to process transaction"
              }
            },
            "required": [
              "delay"
            ]
          }
        }
      }
    ]
  },
  "RPN": {
    "description": "RPN Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "mid": {
                "type": "string",
                "description": "RPN MID"
              },
              "key": {
                "type": "string",
                "description": "RPN Key",
                "format": "password"
              }
            },
            "required": [
              "mid",
              "key"
            ]
          }
        }
      }
    ]
  },
  "Sagepay": {
    "description": "Sagepay Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "M_ID": {
                "type": "string",
                "description": "Sagepay Gateway merchant ID"
              },
              "M_KEY": {
                "type": "string",
                "description": "Sagepay Gateway merchant key",
                "format": "password"
              }
            },
            "required": [
              "M_ID",
              "M_KEY"
            ]
          }
        }
      }
    ]
  },
  "SeamlessChex": {
    "description": "SeamlessChex config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "SeamlessChex credentials object",
            "properties": {
              "publicKey": {
                "type": "string",
                "description": "SeamlessChex publishable key"
              },
              "secretKey": {
                "type": "string",
                "description": "SeamlessChex secret key",
                "format": "password"
              }
            },
            "required": [
              "publicKey",
              "secretKey"
            ]
          }
        }
      }
    ]
  },
  "Skrill": {
    "description": "Skrill config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Skrill credentials object",
            "properties": {
              "accountEmail": {
                "type": "string",
                "description": "Email address of your Skrill merchant account"
              },
              "secretWord": {
                "type": "string",
                "description": "Secret word used for MD5 signature verifications",
                "format": "password"
              },
              "mqiPassword": {
                "type": "string",
                "description": "Password used during MQI/API requests",
                "format": "password"
              }
            },
            "required": [
              "accountEmail",
              "secretWord"
            ]
          }
        }
      }
    ]
  },
  "SmartInvoice": {
    "description": "SmartInvoice config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "SmartInvoice credentials object",
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "SmartInvoice merchant account UID"
              },
              "applicationId": {
                "type": "string",
                "description": "SmartInvoice application UID",
                "format": "password"
              }
            },
            "required": [
              "merchantId",
              "applicationId"
            ]
          },
          "mpi": {
            "$ref": "#/components/schemas/SmartInvoiceMpis"
          }
        }
      }
    ]
  },
  "SMSVoucher": {
    "description": "SMSVoucher Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "AppId": {
                "type": "string",
                "description": "SMSVoucher AppId"
              }
            },
            "required": [
              "AppId"
            ]
          }
        }
      }
    ]
  },
  "SparkPay": {
    "description": "SparkPay config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "SparkPay credentials object",
            "properties": {
              "shopId": {
                "type": "string",
                "description": "SparkPay shop ID"
              },
              "secretKey": {
                "type": "string",
                "description": "SparkPay secret key",
                "format": "password"
              }
            },
            "required": [
              "shopId",
              "secretKey"
            ]
          }
        }
      }
    ]
  },
  "StaticGateway": {
    "description": "StaticGateway Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object"
      }
    ]
  },
  "Stripe": {
    "description": "Stripe Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "redirectUrl": {
                "type": "string",
                "description": "Stripe Gateway redirect url",
                "format": "url"
              }
            },
            "required": [
              "redirectUrl"
            ]
          }
        }
      }
    ]
  },
  "UPayCard": {
    "description": "UPayCard Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "receiver_account": {
                "type": "string",
                "description": "merchant receiver account"
              },
              "key": {
                "type": "string",
                "description": "merchant key",
                "format": "password"
              },
              "secret": {
                "type": "string",
                "description": "merchant secret",
                "format": "password"
              }
            },
            "required": [
              "receiver_account",
              "key",
              "secret"
            ]
          },
          "settings": {
            "type": "object",
            "description": "UpayCard settings object",
            "properties": {
              "tolerancePercentage": {
                "type": "string",
                "description": "Tolerance paercentage for settled amount"
              }
            }
          }
        }
      }
    ]
  },
  "USAePay": {
    "description": "USAePay Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "sourceKey": {
                "type": "string",
                "description": "USAePay Gateway source key",
                "format": "password"
              },
              "pin": {
                "type": "string",
                "description": "USAePay Gateway pin",
                "format": "password"
              }
            },
            "required": [
              "sourceKey",
              "pin"
            ]
          }
        }
      }
    ]
  },
  "VantivLitle": {
    "description": "VantivLitle Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "VantivLitle Gateway username"
              },
              "password": {
                "type": "string",
                "description": "VantivLitle Gateway password",
                "format": "password"
              },
              "merchantId": {
                "type": "string",
                "description": "VantivLitle Gateway merchant ID"
              }
            },
            "required": [
              "username",
              "password",
              "merchantId"
            ]
          },
          "mpi": {
            "$ref": "#/components/schemas/VantivLitleMpis"
          }
        }
      }
    ]
  },
  "vegaaH": {
    "description": "vegaaH Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "terminalId": {
                "type": "string",
                "description": "vegaaH Gateway terminal ID"
              },
              "password": {
                "type": "string",
                "description": "vegaaH Gateway password",
                "format": "password"
              }
            },
            "required": [
              "terminalId",
              "password"
            ]
          }
        }
      }
    ]
  },
  "Walpay": {
    "description": "Walpay Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "merchantName": {
                "type": "string",
                "description": "Walpay Gateway merchant name"
              },
              "merchantPin": {
                "type": "string",
                "description": "Walpay Gateway merchant pin",
                "format": "password"
              }
            },
            "required": [
              "merchantName",
              "merchantPin"
            ]
          },
          "mpi": {
            "$ref": "#/components/schemas/WalpayMpis"
          }
        }
      }
    ]
  },
  "Wirecard": {
    "description": "Wirecard Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "merchantUsername": {
                "type": "string",
                "description": "Wirecard Gateway merchant username"
              },
              "merchantPassword": {
                "type": "string",
                "description": "Wirecard Gateway merchant password",
                "format": "password"
              },
              "businessSignature": {
                "type": "string",
                "description": "Wirecard Gateway merchant business case signature",
                "format": "password"
              },
              "delay": {
                "type": "integer",
                "description": "Wirecard Gateway delay"
              },
              "sftpUsername": {
                "type": "string",
                "description": "Wirecard sftp username."
              },
              "sftpPrivateKey": {
                "type": "string",
                "description": "Wirecard sftp private key.",
                "format": "password"
              }
            },
            "required": [
              "merchantUsername",
              "merchantPassword",
              "businessSignature",
              "delay"
            ]
          },
          "mpi": {
            "$ref": "#/components/schemas/WirecardMpis"
          }
        }
      }
    ]
  },
  "Worldpay": {
    "description": "Worldpay Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "merchantCode": {
                "type": "string",
                "description": "Worldpay Gateway merchant code",
                "format": "password"
              },
              "merchantPassword": {
                "type": "string",
                "description": "Worldpay Gateway merchant password",
                "format": "password"
              }
            },
            "required": [
              "merchantCode",
              "merchantPassword"
            ]
          },
          "mpi": {
            "$ref": "#/components/schemas/WorldpayMpis"
          }
        }
      }
    ]
  },
  "Zotapay": {
    "description": "Zotapay Gateway config",
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccount"
      },
      {
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "type": "object",
            "properties": {
              "endpointId": {
                "type": "string",
                "description": "Zotapay's endpoint ID"
              },
              "username": {
                "type": "string",
                "description": "Zotapay's login username"
              },
              "controlKey": {
                "type": "string",
                "description": "Zotapay's merchant control key",
                "format": "password"
              }
            },
            "required": [
              "endpointId",
              "username",
              "controlKey"
            ]
          }
        }
      }
    ]
  },
  "GatewayAccountDowntimeSchedule": {
    "type": "object",
    "required": [
      "startTime",
      "endTime"
    ],
    "properties": {
      "id": {
        "description": "The Gateway Account downtime schedule identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "status": {
        "description": "The Gateway Account downtime schedule status",
        "readOnly": true,
        "type": "string",
        "enum": [
          "pending",
          "ongoing",
          "finished"
        ]
      },
      "reason": {
        "description": "The Gateway Account downtime schedule reason",
        "readOnly": true,
        "type": "string",
        "enum": [
          "scheduled-maintenance"
        ]
      },
      "startTime": {
        "description": "The Gateway Account scheduled downtime start time.",
        "type": "string",
        "format": "date-time"
      },
      "endTime": {
        "description": "The Gateway Account scheduled downtime end time.",
        "type": "string",
        "format": "date-time"
      },
      "createdTime": {
        "description": "Gateway downtime schedule created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Gateway downtime schedule updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "MpiName": {
    "description": "The Merchant plug-in Name",
    "type": "string",
    "enum": [
      "PayvisionMpi",
      "WirecardMpi",
      "IlixiumMpi",
      "DataCashMpi",
      "OptimalMpi",
      "PaysafeMpi",
      "IngenicoMpi",
      "CardinalCommerce",
      "PaayMpi",
      "Panamerican",
      "eMerchantPayMpi",
      "Other"
    ]
  },
  "GlobalWebhook": {
    "type": "object",
    "required": [
      "method",
      "url",
      "credentialHash"
    ],
    "properties": {
      "id": {
        "description": "The webhook identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "eventsFilter": {
        "description": "An array of System event type",
        "type": "array",
        "default": [],
        "items": {
          "$ref": "#/components/schemas/GlobalWebhookEventType"
        }
      },
      "status": {
        "$ref": "#/components/schemas/OnOff"
      },
      "method": {
        "type": "string",
        "enum": [
          "GET",
          "POST",
          "PUT",
          "PATCH",
          "DELETE"
        ]
      },
      "url": {
        "description": "URL that will be triggered when the given event occurs.",
        "type": "string",
        "format": "uri"
      },
      "headers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WebhookHeader"
        }
      },
      "credentialHash": {
        "type": "string",
        "description": "Hash from Credentials which is used for authentication by the given URL"
      },
      "createdTime": {
        "description": "List created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "List updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "Links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "GlobalWebhookEventType": {
    "type": "string",
    "description": "Rebilly webhooks event type",
    "enum": [
      "customer-merged",
      "customer-created",
      "customer-updated",
      "dispute-created",
      "gateway-account-requested",
      "invoice-modified",
      "invoice-created",
      "invoice-abandoned",
      "invoice-paid",
      "invoice-voided",
      "invoice-issued",
      "invoice-past-due",
      "offsite-payment-completed",
      "payment-card-expired",
      "renewal-invoice-payment-declined",
      "subscription-trial-ended",
      "subscription-activated",
      "subscription-canceled",
      "subscription-reactivated",
      "subscription-renewed",
      "transaction-processed",
      "transaction-timeout-resolved",
      "transaction-declined",
      "transaction-discrepancy-found",
      "transaction-amount-discrepancy-found"
    ]
  },
  "Integration": {
    "type": "object",
    "properties": {
      "service": {
        "readOnly": true,
        "description": "The integration service",
        "allOf": [
          {
            "$ref": "#/components/schemas/OAuth2CredentialService"
          }
        ]
      },
      "count": {
        "readOnly": true,
        "type": "integer",
        "minimum": 1,
        "description": "The number of available rule sets"
      },
      "configurations": {
        "readOnly": true,
        "type": "array",
        "minItems": 1,
        "description": "The list of configurations",
        "items": {
          "type": "object",
          "properties": {
            "labels": {
              "description": "The configuration labels",
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            },
            "eventType": {
              "description": "The configuration event type",
              "allOf": [
                {
                  "$ref": "#/components/parameters/systemEventType"
                }
              ]
            },
            "title": {
              "type": "string",
              "description": "The configuration title"
            }
          }
        }
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/OAuth2ConnectLink"
            }
          ]
        }
      }
    }
  },
  "Layout": {
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "id": {
        "description": "The layout identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "name": {
        "description": "The name of the layout string",
        "type": "string"
      },
      "items": {
        "description": "The array of layout items (planId and starred)",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/LayoutItem"
        }
      },
      "createdTime": {
        "description": "Layout created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 2,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/ItemsLink"
            }
          ]
        }
      }
    }
  },
  "LayoutItem": {
    "type": "object",
    "required": [
      "planId"
    ],
    "properties": {
      "planId": {
        "description": "The plan identifier string",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "starred": {
        "description": "Boolean if the plan should be starred (special callout presentation)",
        "type": "boolean"
      },
      "order": {
        "description": "Item's order in Layout",
        "type": "integer",
        "readOnly": true
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "ItemsLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "items"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "OAuth2ConnectLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "oauth2Connect"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "OnBoardingUrlLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "onBoardingUrl"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "PaymentLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "payment"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "RedirectLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The authentication URL where the merchant should be redirected to grant the requested access",
        "type": "string",
        "enum": [
          "redirect"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "RuleSetHistoryLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "history"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "RuleSetVersionLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "rules"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "List": {
    "type": "object",
    "required": [
      "description",
      "values"
    ],
    "properties": {
      "id": {
        "description": "List ID",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "version": {
        "description": "List version",
        "type": "integer",
        "readOnly": true,
        "minimum": 1
      },
      "description": {
        "description": "List description",
        "type": "string"
      },
      "values": {
        "description": "List values",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "createdTime": {
        "description": "List created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "List updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "Links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "MailgunCredential": {
    "type": "object",
    "properties": {
      "hash": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "status": {
        "description": "The credential status",
        "type": "string",
        "enum": [
          "active",
          "deactivated"
        ]
      },
      "deactivationTime": {
        "description": "The time when the credential was deactivated",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "emailFrom": {
        "type": "string",
        "format": "email",
        "description": "The from email address"
      },
      "apiKey": {
        "type": "string",
        "description": "The mailgun api key"
      },
      "domain": {
        "type": "string",
        "description": "The mailgun domain"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    },
    "description": "Mailgun Credential",
    "required": [
      "emailFrom",
      "apiKey",
      "domain"
    ]
  },
  "A1GatewayMpis": {
    "description": "A1Gateway Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "PaayMpi",
          "Other"
        ]
      }
    }
  },
  "DataCashMpi": {
    "description": "DataCash Integrated",
    "allOf": [
      {
        "$ref": "#/components/schemas/DataCashMpis"
      }
    ]
  },
  "DataCashMpis": {
    "description": "DataCash Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "DataCashMpi"
        ]
      }
    }
  },
  "eMerchantPayMpis": {
    "description": "eMerchantPay Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "PaayMpi",
          "eMerchantPayMpi",
          "Other"
        ]
      }
    }
  },
  "GETMpis": {
    "description": "GET Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "PaayMpi",
          "Other"
        ]
      }
    }
  },
  "IlixiumMpi": {
    "description": "Ilixium Integrated",
    "allOf": [
      {
        "$ref": "#/components/schemas/IlixiumMpis"
      }
    ]
  },
  "IlixiumMpis": {
    "description": "IlixiumMpis Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "IlixiumMpi"
        ]
      }
    }
  },
  "IngenicoMpi": {
    "description": "Ingenico Integrated",
    "allOf": [
      {
        "$ref": "#/components/schemas/IngenicoMpis"
      }
    ]
  },
  "IngenicoMpis": {
    "description": "Ingenico Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "IngenicoMpi"
        ]
      }
    }
  },
  "InovioMpi": {
    "description": "Inovio Integrated",
    "allOf": [
      {
        "$ref": "#/components/schemas/InovioMpis"
      }
    ]
  },
  "InovioMpis": {
    "description": "Inovio Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "InovioMpi"
        ]
      }
    }
  },
  "NMIMpis": {
    "description": "NMI Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "PaayMpi",
          "Other"
        ]
      }
    }
  },
  "OptimalMpi": {
    "description": "Optimal Integrated",
    "allOf": [
      {
        "$ref": "#/components/schemas/OptimalMpis"
      }
    ]
  },
  "OptimalMpis": {
    "description": "Optimal Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "OptimalMpi"
        ]
      }
    }
  },
  "Other": {
    "description": "Other",
    "allOf": [
      {
        "$ref": "#/components/schemas/A1GatewayMpis"
      },
      {
        "$ref": "#/components/schemas/eMerchantPayMpis"
      },
      {
        "$ref": "#/components/schemas/GETMpis"
      },
      {
        "$ref": "#/components/schemas/NMIMpis"
      },
      {
        "$ref": "#/components/schemas/PayvisionMpis"
      },
      {
        "$ref": "#/components/schemas/VantivLitleMpis"
      },
      {
        "$ref": "#/components/schemas/WalpayMpis"
      },
      {
        "$ref": "#/components/schemas/WorldpayMpis"
      }
    ]
  },
  "PaayMpi": {
    "description": "Paay",
    "allOf": [
      {
        "$ref": "#/components/schemas/A1GatewayMpis"
      },
      {
        "$ref": "#/components/schemas/eMerchantPayMpis"
      },
      {
        "$ref": "#/components/schemas/GETMpis"
      },
      {
        "$ref": "#/components/schemas/NMIMpis"
      },
      {
        "$ref": "#/components/schemas/PayvisionMpis"
      },
      {
        "$ref": "#/components/schemas/VantivLitleMpis"
      },
      {
        "$ref": "#/components/schemas/WalpayMpis"
      },
      {
        "$ref": "#/components/schemas/WorldpayMpis"
      },
      {
        "type": "object",
        "required": [
          "apiKey",
          "secret",
          "mpiUrl",
          "sandboxMpiUrl"
        ],
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "Paay ApiKey"
          },
          "secret": {
            "type": "string",
            "format": "password",
            "description": "Paay secret"
          },
          "mpiUrl": {
            "type": "string",
            "description": "Paay MPI url"
          },
          "sandboxMpiUrl": {
            "type": "string",
            "description": "Paay sandbox MPI url"
          }
        }
      }
    ]
  },
  "PanamericanMpis": {
    "description": "Panamerican Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "Panamerican"
        ]
      }
    }
  },
  "PanmericanMpi": {
    "description": "Panmerican Integrated",
    "allOf": [
      {
        "$ref": "#/components/schemas/PanamericanMpis"
      }
    ]
  },
  "PaysafeMpi": {
    "description": "Paysafe Integrated",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaysafeMpis"
      }
    ]
  },
  "PaysafeMpis": {
    "description": "Paysafe Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "PaysafeMpi"
        ]
      }
    }
  },
  "CardinalCommerce": {
    "description": "CardinalCommerce Mpi Credentials",
    "allOf": [
      {
        "$ref": "#/components/schemas/PayvisionMpis"
      },
      {
        "type": "object",
        "required": [
          "merchantId",
          "processorId",
          "transactionPwd"
        ],
        "properties": {
          "merchantId": {
            "type": "string",
            "description": "Cardinal MerchantId"
          },
          "processorId": {
            "type": "string",
            "description": "Cardinal ProcessorId"
          },
          "transactionPwd": {
            "type": "string",
            "format": "password",
            "description": "Cardinal TransactionPwd"
          }
        }
      }
    ]
  },
  "PayvisionMpi": {
    "description": "Payvision Integrated",
    "allOf": [
      {
        "$ref": "#/components/schemas/PayvisionMpis"
      }
    ]
  },
  "PayvisionMpis": {
    "description": "Payvision Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "PayvisionMpi",
          "Payvision3DS2",
          "CardinalCommerce",
          "PaayMpi",
          "Other"
        ]
      }
    }
  },
  "RebillyProcessorMpi": {
    "description": "RebillyProcessor Integrated",
    "allOf": [
      {
        "$ref": "#/components/schemas/RebillyProcessorMpis"
      }
    ]
  },
  "RebillyProcessorMpis": {
    "description": "RebillyProcessorMpis Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "RebillySandboxMpi"
        ]
      }
    }
  },
  "SmartInvoiceMpi": {
    "description": "SmartInvoice Integrated",
    "allOf": [
      {
        "$ref": "#/components/schemas/SmartInvoiceMpis"
      }
    ]
  },
  "SmartInvoiceMpis": {
    "description": "SmartInvoice Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "SmartInvoiceMpi"
        ]
      }
    }
  },
  "VantivLitleMpis": {
    "description": "VantivLitle Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "PaayMpi",
          "Other"
        ]
      }
    }
  },
  "WalpayMpis": {
    "description": "WalpayMpis Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "PaayMpi",
          "Other"
        ]
      }
    }
  },
  "WirecardMpi": {
    "description": "Wirecard Integrated",
    "allOf": [
      {
        "$ref": "#/components/schemas/WirecardMpis"
      }
    ]
  },
  "WirecardMpis": {
    "description": "Wirecard Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "WirecardMpi"
        ]
      }
    }
  },
  "WorldpayMpis": {
    "description": "Worldpay Mpis",
    "discriminator": {
      "propertyName": "name"
    },
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MpiName"
          }
        ],
        "enum": [
          "PaayMpi",
          "Other"
        ]
      }
    }
  },
  "Note": {
    "type": "object",
    "required": [
      "content",
      "relatedType",
      "relatedId"
    ],
    "properties": {
      "id": {
        "description": "The note identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "createdBy": {
        "description": "The note's creator",
        "type": "string",
        "readOnly": true
      },
      "fromSupport": {
        "description": "Indicates that note was ceated by support user",
        "type": "boolean",
        "readOnly": true
      },
      "content": {
        "description": "The note's name",
        "type": "string"
      },
      "archived": {
        "description": "Is the note archived (excluded from List method)",
        "type": "boolean"
      },
      "relatedType": {
        "description": "The note's related resource type",
        "type": "string",
        "enum": [
          "customer"
        ]
      },
      "relatedId": {
        "description": "The note's related resource ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "createdTime": {
        "description": "Note created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Note updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "archivedTime": {
        "description": "Note archived time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "GoogleSpreadsheet": {
    "type": "object",
    "properties": {
      "id": {
        "description": "The google spreadsheet indentifier string",
        "readOnly": true,
        "type": "string",
        "example": "2ytkMntAC2Ke7aIgpaOBjz9IORRlNRjwFqO7KvyNam3B"
      },
      "name": {
        "readOnly": true,
        "description": "The google spreadsheet name",
        "type": "string",
        "example": "Spreadsheet 1"
      }
    }
  },
  "OAuth2Credential": {
    "type": "object",
    "properties": {
      "hash": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "status": {
        "description": "The credential status",
        "type": "string",
        "enum": [
          "active",
          "deactivated"
        ]
      },
      "deactivationTime": {
        "description": "The time when the credential was deactivated",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "service": {
        "description": "The name of service that the OAuth2 credential belongs to",
        "allOf": [
          {
            "$ref": "#/components/schemas/OAuth2CredentialService"
          }
        ]
      },
      "code": {
        "description": "The OAuth2 code provided by the authentication server",
        "type": "string",
        "example": "2/smAHUUr9jOxw_IOp47Y_dH1r2Y"
      },
      "accessToken": {
        "description": "The OAuth2 access token",
        "readOnly": true,
        "type": "string",
        "example": "zw34.PltIPtJZHmEgZS9R4RoGpzaRrJd5MYjZIONQ2MjWSCj7N7Iqp9BXXFIbkhDRfAPs6cB1pKtTjLUgb3ofzgHUprJfnRiMDTnB_yPMK7vtgobCX4SUs7fhrR6bdApq"
      },
      "refreshToken": {
        "description": "The OAuth2 refresh token",
        "readOnly": true,
        "type": "string",
        "example": "2/4DPERp2EiySF6JUIOTS4jM5f0JmLG2gPcpGaWYTGU94"
      },
      "scopes": {
        "description": "The OAuth2 granted list access",
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "https://www.googleapis.com/auth/drive.metadata.readonly"
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            }
          ]
        }
      }
    },
    "description": "OAuth2 credential",
    "required": [
      "code",
      "scopes",
      "service"
    ]
  },
  "OAuth2CredentialService": {
    "type": "string",
    "enum": [
      "google-sheets"
    ]
  },
  "OnOff": {
    "type": "string",
    "default": "active",
    "enum": [
      "active",
      "inactive"
    ]
  },
  "Organization": {
    "type": "object",
    "required": [
      "name",
      "country"
    ],
    "properties": {
      "id": {
        "description": "The organization identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "createdTime": {
        "description": "The organization created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "The organization updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "name": {
        "description": "The organization name",
        "type": "string",
        "maxLength": 60
      },
      "address": {
        "description": "The organization street address",
        "type": "string",
        "maxLength": 60
      },
      "address2": {
        "description": "The organization street address",
        "type": "string",
        "maxLength": 60
      },
      "city": {
        "description": "The organization city",
        "type": "string",
        "maxLength": 45
      },
      "region": {
        "description": "The organization region (state)",
        "type": "string",
        "maxLength": 45
      },
      "country": {
        "description": "The organization country ISO Alpha-2 code",
        "type": "string",
        "pattern": "^[A-Z]{2}$"
      },
      "postalCode": {
        "description": "The organization postal code",
        "type": "string",
        "maxLength": 10
      },
      "phoneNumbers": {
        "$ref": "#/components/schemas/ContactPhoneNumbers"
      },
      "emails": {
        "$ref": "#/components/schemas/ContactEmails"
      },
      "taxDescriptor": {
        "description": "The organization's tax label. This will be displayed on the invoice.",
        "type": "string",
        "maxLength": 255
      },
      "invoiceTimeZone": {
        "description": "Invoice will use this time zone to display time otherwise UTC will be used. Example \"America/New_York\"",
        "type": "string",
        "maxLength": 50
      },
      "isPrimary": {
        "description": "True, if Organization is primary (available to set as true only, other organizations will become as isPrimary=false)",
        "type": "boolean"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "PaymentCardMigration": {
    "type": "object",
    "required": [
      "fromGatewayAccountId",
      "toGatewayAccountId",
      "paymentCardIds"
    ],
    "properties": {
      "fromGatewayAccountId": {
        "description": "An ID of Gateway Account cards should be migrated from",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "toGatewayAccountId": {
        "description": "An ID of Gateway Account cards should be migrated to",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "paymentCardIds": {
        "type": "array",
        "minItems": 1,
        "items": {
          "description": "An array of payment card IDs",
          "allOf": [
            {
              "$ref": "#/components/schemas/ResourceId"
            }
          ]
        }
      },
      "migratedCards": {
        "type": "integer",
        "description": "Number of cards that were successfully migrated",
        "readOnly": true
      }
    }
  },
  "ach": {
    "description": "ACH payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      },
      {
        "type": "object",
        "required": [
          "bankAccountId"
        ],
        "properties": {
          "bankAccountId": {
            "description": "The bank account identifier string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          }
        }
      }
    ]
  },
  "cash": {
    "description": "Cash payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      },
      {
        "type": "object",
        "properties": {
          "receivedBy": {
            "description": "The receiver's name",
            "type": "string"
          }
        }
      }
    ]
  },
  "payment-card": {
    "description": "Payment card payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      },
      {
        "type": "object",
        "required": [
          "paymentCardId"
        ],
        "properties": {
          "paymentCardId": {
            "description": "The payment card identifier string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          }
        }
      }
    ]
  },
  "paypal": {
    "description": "PayPal payment instrument object",
    "allOf": [
      {
        "$ref": "#/components/schemas/PaymentInstrument"
      },
      {
        "type": "object",
        "required": [
          "payPalAccountId"
        ],
        "properties": {
          "payPalAccountId": {
            "description": "The PayPal account identifier string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          }
        }
      }
    ]
  },
  "AmountAdjustmentNone": {
    "allOf": [
      {
        "$ref": "#/components/schemas/AmountAdjustment"
      }
    ]
  },
  "PostmarkCredential": {
    "type": "object",
    "properties": {
      "hash": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "status": {
        "description": "The credential status",
        "type": "string",
        "enum": [
          "active",
          "deactivated"
        ]
      },
      "deactivationTime": {
        "description": "The time when the credential was deactivated",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "serverApiToken": {
        "type": "string",
        "description": "The Postmark server API token",
        "example": "dd0508z9-2291-6794-3376-z0a70g12eqm9"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    },
    "description": "Postmark Credential",
    "required": [
      "serverApiToken"
    ]
  },
  "Profile": {
    "type": "object",
    "properties": {
      "id": {
        "description": "The user identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "email": {
        "description": "The user email",
        "readOnly": true,
        "type": "string",
        "format": "email",
        "maxLength": 100
      },
      "firstName": {
        "description": "User's first name",
        "readOnly": true,
        "type": "string"
      },
      "lastName": {
        "description": "User's last name",
        "readOnly": true,
        "type": "string"
      },
      "businessPhone": {
        "description": "The user business phone number",
        "readOnly": true,
        "type": "string"
      },
      "mobilePhone": {
        "description": "The user mobile phone number",
        "readOnly": true,
        "type": "string"
      },
      "availableCurrencies": {
        "type": "array",
        "description": "An array of reporting currencies enabled for the merchant",
        "readOnly": true,
        "items": {
          "type": "string"
        }
      },
      "reportingCurrency": {
        "description": "The user's ISO Alpha-3 code used for reports",
        "type": "string"
      },
      "totpRequired": {
        "description": "The user setting of two-factor authentification",
        "type": "boolean"
      },
      "totpSecret": {
        "description": "The user TOTP key for authentification app (if TOTP enabled)",
        "readOnly": true,
        "type": "string"
      },
      "totpUrl": {
        "description": "The user link to QR-code for TOTP authentification app (if TOTP enabled)",
        "readOnly": true,
        "type": "string",
        "format": "url"
      },
      "oneTimePassword": {
        "description": "The one time password generated by Google Authenticator (required when enabling/disabling 2FA).\nShould contain digits only.\n",
        "type": "string",
        "pattern": "^[0-9]{6}$",
        "example": "123456"
      },
      "country": {
        "description": "The user country setting - two letter code",
        "readOnly": true,
        "type": "string"
      },
      "preferences": {
        "description": "User preferences like timezone, language and many more. This is an object with custom properties.",
        "type": "object"
      }
    }
  },
  "ResetPassword": {
    "type": "object",
    "required": [
      "newPassword"
    ],
    "properties": {
      "newPassword": {
        "description": "New password",
        "type": "string",
        "format": "password"
      }
    }
  },
  "ResetPasswordTokenInfo": {
    "type": "object",
    "properties": {
      "token": {
        "description": "Token",
        "type": "string",
        "readOnly": true
      },
      "sentTime": {
        "description": "Creation date/time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "add-risk-score": {
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      },
      {
        "type": "object",
        "description": "Add risk score",
        "properties": {
          "score": {
            "type": "integer",
            "default": 0
          }
        }
      }
    ]
  },
  "blacklist": {
    "description": "Add customer data to blacklist",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      },
      {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "customer-id",
              "email",
              "fingerprint",
              "ip-address",
              "payment-card"
            ]
          },
          "ttl": {
            "type": "integer",
            "description": "Blacklist TTL. Defaults to zero, meaning blacklist record won't expire ever.",
            "default": 0
          }
        },
        "required": [
          "type"
        ]
      }
    ]
  },
  "cancel-scheduled-payments": {
    "description": "",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      }
    ]
  },
  "display-other-choices": {
    "description": "Display Other Choices",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      },
      {
        "type": "object",
        "properties": {
          "choices": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "langIso": {
                  "description": "Language (two letter ISO 639-1 code)",
                  "type": "string"
                },
                "content": {
                  "type": "string"
                }
              },
              "required": [
                "langIso",
                "content"
              ]
            }
          }
        },
        "required": [
          "choices"
        ]
      }
    ]
  },
  "guess-payment-card-expiration": {
    "description": "",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      }
    ]
  },
  "offer-purchase-bump": {
    "description": "Offer Purchase Bump",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      },
      {
        "type": "object",
        "properties": {
          "bumpOffers": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Bump offer name",
                  "type": "string"
                },
                "weight": {
                  "description": "Bump offer weight",
                  "type": "string"
                },
                "bumpAmount": {
                  "description": "Bump amount offer",
                  "type": "number"
                },
                "bonusAmount": {
                  "description": "Bonus amount offer",
                  "type": "number"
                },
                "choices": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "langIso": {
                        "description": "Language (two letter ISO 639-1 code)",
                        "type": "string"
                      },
                      "content": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "langIso",
                      "content"
                    ]
                  }
                }
              },
              "required": [
                "name",
                "weight",
                "bumpAmount",
                "bonusAmount",
                "choices"
              ]
            }
          }
        },
        "required": [
          "bumpOffers"
        ]
      }
    ]
  },
  "pick-gateway-account": {
    "description": "",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      },
      {
        "type": "object",
        "properties": {
          "pickInstruction": {
            "$ref": "#/components/schemas/GatewayAccountPickInstruction"
          }
        },
        "required": [
          "pickInstruction"
        ]
      }
    ]
  },
  "remove-reminder": {
    "description": "",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      },
      {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "all",
              "renewal",
              "trial-end"
            ],
            "description": "The role of Reminder (available only on Subscription events, other events should use `all`)."
          }
        },
        "required": [
          "role"
        ]
      }
    ]
  },
  "request-kyc": {
    "description": "Request KYC page to verify customer identity",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      },
      {
        "type": "object",
        "properties": {
          "excludePolicy": {
            "type": "string",
            "description": "Who should be excluded from the verification",
            "enum": [
              "customers-with-accepted-document",
              "customers-with-document",
              "none"
            ],
            "default": "customers-with-accepted-document"
          },
          "isMandatory": {
            "type": "boolean",
            "description": "Is the verification mandatory",
            "default": true
          },
          "promptPolicy": {
            "type": "string",
            "description": "When to prompt, before or after processing the transaction",
            "enum": [
              "before-transaction-process",
              "after-transaction-process"
            ],
            "default": "before-transaction-process"
          },
          "rejectedBeforeTransactionProcessPolicy": {
            "type": "string",
            "description": "What to do if verification is before transaction processing, and is rejected",
            "enum": [
              "process-transaction",
              "decline",
              "use-alternate-gateway"
            ],
            "default": "decline"
          },
          "alternateGatewayAccountIfRejected": {
            "type": "string",
            "description": "Gateway account to use if use-alternate-gateway is selected for rejectedBeforeTransactionProcessPolicy"
          },
          "rejectedAfterTransactionProcessPolicy": {
            "type": "string",
            "description": "What to do if verification is after transaction processing, and is rejected",
            "enum": [
              "proceed"
            ],
            "default": "proceed"
          },
          "optionalPolicy": {
            "type": "string",
            "description": "What to do if verification is optional",
            "enum": [
              "allow-bypass",
              "allow-use-alternate-gateway"
            ],
            "default": "allow-bypass"
          },
          "alternateGatewayAccountIfOptional": {
            "type": "string",
            "description": "Gateway account to use if allow-use-alternate-gateway is selected for optionalPolicy"
          },
          "bypassCurrencyToDisplay": {
            "description": "The currency three letter code to display on the bypass link, if optional",
            "type": "string",
            "default": "USD"
          }
        },
        "required": [
          "excludePolicy",
          "isMandatory",
          "promptPolicy",
          "rejectedBeforeTransactionProcessPolicy",
          "rejectedAfterTransactionProcessPolicy",
          "optionalPolicy"
        ]
      }
    ]
  },
  "reset-reminder": {
    "description": "",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      },
      {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "all",
              "renewal",
              "trial-end"
            ],
            "description": "The role of Reminder (available only on Subscription events, other events should use `all`)."
          }
        },
        "required": [
          "role"
        ]
      }
    ]
  },
  "schedule-invoice-retry": {
    "description": "Schedule an invoice retry",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      },
      {
        "type": "object",
        "properties": {
          "attempts": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "scheduleInstruction": {
                  "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
                }
              },
              "required": [
                "scheduleInstruction"
              ]
            }
          },
          "afterAttemptPolicies": {
            "description": "The policy on the attempt finishes",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "change-subscription-renewal-time"
              ]
            }
          },
          "afterRetryEndPolicies": {
            "description": "The policy on the retry ends",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "abandon-invoice",
                "cancel-subscription"
              ]
            }
          },
          "overrideRetryInstruction": {
            "description": "Whether to replace the existing retry or not",
            "type": "boolean"
          }
        },
        "required": [
          "attempts",
          "afterAttemptPolicies",
          "afterRetryEndPolicies",
          "overrideRetryInstruction"
        ]
      }
    ]
  },
  "schedule-payment-retry": {
    "description": "",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      },
      {
        "$ref": "#/components/schemas/PaymentRetry"
      }
    ]
  },
  "schedule-payment": {
    "description": "",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      },
      {
        "type": "object",
        "description": "The calculation instruction of scheduled time for payment",
        "properties": {
          "scheduleInstruction": {
            "$ref": "#/components/schemas/CommonScheduleInstruction"
          },
          "amountPolicy": {
            "type": "string",
            "enum": [
              "invoice-amount-due"
            ]
          }
        },
        "required": [
          "scheduleInstruction",
          "amountPolicy"
        ]
      }
    ]
  },
  "schedule-reminder": {
    "description": "",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      },
      {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "all",
              "renewal",
              "trial-end"
            ],
            "description": "The role of Reminder (available only on Subscription events, other events should use `all`)."
          },
          "schedule": {
            "$ref": "#/components/schemas/ReminderSchedule"
          }
        },
        "required": [
          "role"
        ]
      }
    ]
  },
  "send-email": {
    "description": "",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      },
      {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the messages. (This title will appear in reports.)"
          },
          "emails": {
            "type": "array",
            "description": "The list of messages.",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/RulesEmailNotification"
            }
          },
          "splitTestStartTime": {
            "type": "string",
            "format": "date-time",
            "description": "The split test start time"
          }
        },
        "required": [
          "emails"
        ]
      }
    ]
  },
  "stop-subscriptions": {
    "description": "Stop active subscriptions",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      }
    ]
  },
  "tag-or-untag-customer": {
    "description": "Tag or untag a customer with specified list of tags",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      },
      {
        "type": "object",
        "properties": {
          "addingTags": {
            "description": "The list of tag ID customer should be tagged with",
            "type": "array",
            "maxItems": 1000,
            "items": {
              "type": "string"
            }
          },
          "removingTags": {
            "description": "The list of tag ID customer should be untagged from",
            "type": "array",
            "maxItems": 1000,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "addingTags",
          "removingTags"
        ]
      }
    ]
  },
  "trigger-webhook": {
    "description": "",
    "allOf": [
      {
        "$ref": "#/components/schemas/RuleAction"
      },
      {
        "$ref": "#/components/schemas/Webhook"
      }
    ]
  },
  "SendPreviewWebhook": {
    "description": "Trigger a test webhook",
    "allOf": [
      {
        "$ref": "#/components/schemas/Webhook"
      }
    ]
  },
  "SendTestEmail": {
    "description": "Send a test email",
    "allOf": [
      {
        "$ref": "#/components/schemas/RulesEmailNotification"
      }
    ]
  },
  "Bind": {
    "type": "object",
    "description": "The rule",
    "properties": {
      "name": {
        "type": "string"
      },
      "labels": {
        "type": "array",
        "uniqueItems": true,
        "example": [
          "test-rule",
          "category:foo"
        ],
        "items": {
          "type": "string",
          "pattern": "[a-zA-Z][a-zA-Z0-9:-]*"
        }
      },
      "status": {
        "$ref": "#/components/schemas/OnOff"
      },
      "criteria": {
        "$ref": "#/components/schemas/Condition"
      },
      "actions": {
        "type": "array",
        "uniqueItems": true,
        "items": {
          "$ref": "#/components/schemas/RuleAction"
        }
      }
    },
    "required": [
      "name",
      "actions"
    ]
  },
  "GatewayAccountPickInstruction": {
    "type": "object",
    "discriminator": {
      "propertyName": "method"
    },
    "properties": {
      "method": {
        "type": "string",
        "enum": [
          "gateway-account-weights",
          "gateway-acquirer-weights"
        ]
      }
    },
    "required": [
      "method"
    ]
  },
  "gateway-account-weights": {
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccountPickInstruction"
      },
      {
        "type": "object",
        "properties": {
          "weightedList": {
            "type": "array",
            "uniqueItems": true,
            "minimum": 0,
            "items": {
              "type": "object",
              "properties": {
                "gatewayAccountId": {
                  "$ref": "#/components/schemas/ResourceId"
                },
                "weight": {
                  "type": "integer"
                }
              },
              "required": [
                "gatewayAccountId",
                "weight"
              ]
            },
            "example": "[\n  {\"gatewayAccountId\": \"my_gateway_account_1\", \"weight\": 80},\n  {\"gatewayAccountId\": \"my_gateway_account_2\", \"weight\": 20}\n]\n"
          }
        },
        "required": [
          "weightedList"
        ]
      }
    ]
  },
  "gateway-acquirer-weights": {
    "allOf": [
      {
        "$ref": "#/components/schemas/GatewayAccountPickInstruction"
      },
      {
        "type": "object",
        "properties": {
          "weightedList": {
            "type": "array",
            "uniqueItems": true,
            "minimum": 0,
            "items": {
              "type": "object",
              "properties": {
                "gatewayName": {
                  "type": "string",
                  "description": "The payment gateway name",
                  "enum": [
                    "A1Gateway",
                    "AmexVPC",
                    "ApcoPay",
                    "AstroPay",
                    "AstroPayCard",
                    "AuthorizeNet",
                    "Bambora",
                    "BitPay",
                    "BlueSnap",
                    "BraintreePayments",
                    "Cardknox",
                    "Cashflows",
                    "CASHlib",
                    "CashToCode",
                    "CauriPayment",
                    "Cayan",
                    "Chase",
                    "Coppr",
                    "Credorax",
                    "Cryptonator",
                    "DataCash",
                    "Dengi",
                    "ecoPayz",
                    "EcorePay",
                    "Elavon",
                    "eMerchantPay",
                    "Flexepin",
                    "FinTecSystems",
                    "FundSend",
                    "Forte",
                    "GET",
                    "Gigadat",
                    "GlobalOnePay",
                    "Gpaysafe",
                    "Greenbox",
                    "iCanPay",
                    "iCheque",
                    "iDebit",
                    "Ilixium",
                    "Ingenico",
                    "INOVAPAY",
                    "Inovio",
                    "Intuit",
                    "InstaDebit",
                    "IpayOptions",
                    "JetPay",
                    "Jeton",
                    "LPG",
                    "Moneris",
                    "MtaPay",
                    "Neteller",
                    "NinjaWallet",
                    "NMI",
                    "OchaPay",
                    "Onlineueberweisen",
                    "Optimal",
                    "Pagsmile",
                    "Panamerican",
                    "ParamountEft",
                    "PandaGateway",
                    "Pay4Fun",
                    "Payeezy",
                    "Payflow",
                    "PayPal",
                    "Payr",
                    "Paysafe",
                    "Paysafecash",
                    "Payvision",
                    "Plugnpay",
                    "Realex",
                    "Realtime",
                    "RebillyProcessor",
                    "Redsys",
                    "Rotessa",
                    "RPN",
                    "Sagepay",
                    "SeamlessChex",
                    "Skrill",
                    "SmartInvoice",
                    "SMSVoucher",
                    "SparkPay",
                    "StaticGateway",
                    "Stripe",
                    "UPayCard",
                    "USAePay",
                    "VantivLitle",
                    "vegaaH",
                    "Walpay",
                    "Wirecard",
                    "Worldpay",
                    "Zotapay"
                  ]
                },
                "acquirerName": {
                  "type": "string",
                  "description": "The acquirer name",
                  "enum": [
                    "Alipay",
                    "AIB",
                    "ApcoPay",
                    "AstroPay Card",
                    "Ipay Options",
                    "B+S",
                    "Bambora",
                    "BitPay",
                    "Bank of America",
                    "Bank of Moscow",
                    "Bank of Rebilly",
                    "Bank One",
                    "BMO Harris Bank",
                    "Borgun",
                    "BraintreePayments",
                    "Cardknox",
                    "CASHlib",
                    "Catalunya Caixa",
                    "Chase",
                    "ChinaUnionPay",
                    "CIM",
                    "Coppr",
                    "Credorax",
                    "Cryptonator",
                    "ecoPayz",
                    "EcorePay",
                    "Elavon",
                    "EMS",
                    "Fifth Third Bank",
                    "First Data Buypass",
                    "First Data Nashville",
                    "First Data North",
                    "First Data Omaha",
                    "FinTecSystems",
                    "Flexepin",
                    "Forte",
                    "FundSend",
                    "Gigadat",
                    "Global East",
                    "Gpaysafe",
                    "Heartland",
                    "HSBC",
                    "iCanPay",
                    "iCheque",
                    "Ilixium",
                    "Ingenico",
                    "INOVAPAY",
                    "Intuit",
                    "Jeton",
                    "LPG",
                    "Masapay",
                    "Merrick",
                    "Mission Valley Bank",
                    "Moneris",
                    "NATWEST",
                    "Neteller",
                    "NinjaWallet",
                    "NMI",
                    "OchaPay",
                    "Onlineueberweisen",
                    "Other",
                    "Panamerican",
                    "Panda Bank",
                    "Paramount",
                    "ParamountEft",
                    "Pay4fun",
                    "PayPal",
                    "Payr",
                    "Payvision",
                    "Peoples Trust Company",
                    "Privatbank",
                    "QQPay",
                    "RBC",
                    "RBS WorldPay",
                    "RealTime",
                    "RebillyProcessor",
                    "Rotessa",
                    "Skrill",
                    "SmartInvoice",
                    "SMSVoucher",
                    "SparkPay",
                    "State Bank of Mauritius",
                    "Stripe",
                    "TBI",
                    "TrustPay",
                    "TSYS",
                    "UPayCard",
                    "Vantiv",
                    "VoicePay",
                    "WeChat Pay",
                    "Wells Fargo",
                    "Wing Hang Bank",
                    "Wirecard",
                    "WorldPay",
                    "Zotapay"
                  ]
                },
                "weight": {
                  "type": "integer"
                }
              },
              "required": [
                "gatewayName",
                "acquirerName",
                "weight"
              ]
            },
            "example": "[\n  {\"gatewayName\": \"RebillyProcessor\", \"acquirerName\": \"AIB\", \"weight\": 80},\n  {\"gatewayName\": \"RebillyProcessor\", \"acquirerName\": \"B+S\", \"weight\": 20}\n"
          }
        },
        "required": [
          "weightedList"
        ]
      }
    ]
  },
  "Rule": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Bind"
      },
      {
        "type": "object",
        "properties": {
          "final": {
            "description": "Whether rule is final, meaning stop further matching rules if this is matched",
            "type": "boolean",
            "default": true
          }
        }
      }
    ]
  },
  "RuleAction": {
    "type": "object",
    "discriminator": {
      "propertyName": "name"
    },
    "properties": {
      "name": {
        "type": "string",
        "description": "The action name",
        "enum": [
          "blacklist",
          "cancel-scheduled-payments",
          "guess-payment-card-expiration",
          "pick-gateway-account",
          "schedule-payment-retry",
          "schedule-payment",
          "schedule-invoice-retry",
          "send-email",
          "trigger-webhook",
          "stop-subscriptions",
          "add-risk-score",
          "request-kyc",
          "tag-or-untag-customer",
          "display-other-choices",
          "offer-purchase-bump",
          "schedule-reminder",
          "reset-reminder",
          "remove-reminder"
        ]
      },
      "status": {
        "$ref": "#/components/schemas/OnOff"
      }
    },
    "required": [
      "name"
    ]
  },
  "RulesEmailNotification": {
    "type": "object",
    "properties": {
      "credentialHash": {
        "type": "string",
        "description": "SMTP or Mailgun credential identifier string."
      },
      "version": {
        "type": "string",
        "description": "The message version. (By default is empty, but if you make multiple versions, you can name or number them to distinguish them.)"
      },
      "from": {
        "type": "string",
        "description": "The sender address. The template placeholders are allowed.",
        "maxLength": 254
      },
      "to": {
        "type": "array",
        "description": "The recipients addresses. The template placeholders are allowed.",
        "minItems": 1,
        "items": {
          "type": "string",
          "maxLength": 254
        }
      },
      "cc": {
        "type": "array",
        "description": "The recipients addresses. The template placeholders are allowed.",
        "items": {
          "type": "string",
          "maxLength": 254
        }
      },
      "bcc": {
        "type": "array",
        "description": "The hidden recipients addresses. The template placeholders are allowed.",
        "items": {
          "type": "string",
          "maxLength": 254
        }
      },
      "subject": {
        "type": "string",
        "description": "The message subject. The template placeholders are allowed.",
        "maxLength": 998
      },
      "text": {
        "type": "string",
        "description": "The message's text body.\nLeave empty to use content from \"bodyHtml\".\nThe template placeholders are allowed.\n"
      },
      "html": {
        "type": "string",
        "description": "The message's html body.\nLeave empty to use content from \"bodyText\".\nThe template placeholders are allowed.\n"
      },
      "editor": {
        "type": "string",
        "description": "The source of the message required for the email editor.\nNot used for sending emails.\nUsed by the editor to reproduce the message for future updates.\n"
      },
      "attachments": {
        "description": "The message's attachments",
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "resourceType",
            "resourceId"
          ],
          "properties": {
            "resourceType": {
              "description": "The attachment's resource type.",
              "type": "string",
              "example": "invoice"
            },
            "resourceId": {
              "description": "The attachment's resource identifier string. The template placeholders are allowed.",
              "type": "string",
              "maxLength": 255,
              "example": "INV-1"
            }
          }
        }
      },
      "weight": {
        "type": "integer",
        "description": "The message's weight.",
        "minimum": 0,
        "maximum": 100,
        "example": 75,
        "default": 100
      }
    },
    "required": [
      "from",
      "to",
      "subject",
      "text",
      "html"
    ]
  },
  "RuleSet": {
    "type": "object",
    "description": "Set of rules for particular event",
    "properties": {
      "version": {
        "type": "integer",
        "readOnly": true
      },
      "binds": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Bind"
        }
      },
      "rules": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Rule"
        }
      },
      "updatedTime": {
        "$ref": "#/components/schemas/ServerTimestamp"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    },
    "required": [
      "rules"
    ]
  },
  "RuleSetHistoryItem": {
    "type": "object",
    "description": "Version of rules",
    "readOnly": true,
    "properties": {
      "version": {
        "type": "integer"
      },
      "createdTime": {
        "$ref": "#/components/schemas/ServerTimestamp"
      },
      "_links": {
        "type": "array",
        "description": "The links related to a resource",
        "readOnly": true,
        "minItems": 3,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/RuleSetHistoryLink"
            },
            {
              "$ref": "#/components/schemas/RuleSetVersionLink"
            }
          ]
        }
      }
    }
  },
  "RuleSetVersion": {
    "type": "object",
    "description": "Version of rules",
    "readOnly": true,
    "properties": {
      "version": {
        "type": "integer"
      },
      "binds": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Bind"
        }
      },
      "rules": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Rule"
        }
      },
      "createdTime": {
        "$ref": "#/components/schemas/ServerTimestamp"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "Webhook": {
    "type": "object",
    "properties": {
      "method": {
        "type": "string",
        "enum": [
          "GET",
          "POST",
          "PUT",
          "PATCH",
          "DELETE"
        ]
      },
      "url": {
        "type": "string",
        "format": "uri"
      },
      "query": {
        "type": "object",
        "description": "The URI parameters",
        "additionalProperties": {
          "type": "string",
          "example": {
            "param1": "value1",
            "param2": "value2"
          }
        }
      },
      "body": {
        "type": "string"
      },
      "credentialHash": {
        "type": "string",
        "description": "Webhook Credential identifier string."
      },
      "headers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WebhookHeader"
        }
      }
    },
    "required": [
      "method",
      "url"
    ]
  },
  "WebhookHeader": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string"
      },
      "status": {
        "$ref": "#/components/schemas/OnOff"
      },
      "value": {
        "type": "string",
        "example": {
          "Header1": "value1",
          "Header2": "value2;value3"
        }
      }
    },
    "required": [
      "name",
      "value"
    ]
  },
  "ReminderSchedule": {
    "type": "object",
    "description": "Schedule Instructions Collection",
    "properties": {
      "instructions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ReminderScheduleInstruction"
        }
      },
      "chronology": {
        "type": "string",
        "enum": [
          "before",
          "after"
        ]
      }
    },
    "required": [
      "instructions",
      "chronology"
    ]
  },
  "ReminderScheduleInstruction": {
    "type": "object",
    "description": "The calculation instruction of scheduled time",
    "discriminator": {
      "propertyName": "method"
    },
    "properties": {
      "method": {
        "type": "string",
        "default": "1",
        "enum": [
          "date-interval",
          "day-of-month",
          "day-of-week"
        ]
      }
    },
    "required": [
      "method"
    ]
  },
  "PatchSegment": {
    "type": "object",
    "required": [
      "isVisible"
    ],
    "properties": {
      "isVisible": {
        "description": "Toggle whether this Segment is visible to the current user",
        "type": "boolean"
      }
    }
  },
  "Segment": {
    "type": "object",
    "required": [
      "data",
      "owner",
      "scope"
    ],
    "properties": {
      "id": {
        "description": "ID of current Segment",
        "readOnly": true,
        "type": "string",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "owner": {
        "description": "Owner (creator) of Segment",
        "readOnly": true,
        "type": "object",
        "properties": {
          "id": {
            "description": "User ID",
            "type": "string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "name": {
            "description": "First and last name",
            "type": "string"
          }
        }
      },
      "data": {
        "description": "An object containing schema to set up the UI for the segment. This schema is built\nand consumed by the frontend. It includes such information as Segment name, UI settings, etc.\n",
        "type": "object"
      },
      "isVisible": {
        "description": "Toggle whether this Segment is visible to the current user",
        "type": "boolean",
        "readOnly": true
      },
      "userIds": {
        "type": "array",
        "uniqueItems": true,
        "writeOnly": true,
        "description": "A list of user id's with whom to share, used if scope is set to `shared`\n",
        "items": {
          "description": "User ID",
          "allOf": [
            {
              "$ref": "#/components/schemas/ResourceId"
            }
          ]
        }
      },
      "users": {
        "type": "array",
        "uniqueItems": true,
        "description": "A list of user's id and first and last names with whom this Segment\nis shared\n",
        "readOnly": true,
        "items": {
          "type": "object",
          "description": "User person",
          "properties": {
            "id": {
              "description": "User ID",
              "type": "string",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "name": {
              "description": "First and last name",
              "type": "string"
            }
          }
        }
      },
      "scope": {
        "description": "If `private`, then only the owner/creator can view this Segment. If set\nto `public`, then it's shared with anyone in the owner's organization.\nIf set to `shared`, then it is only shared with specific users as specified\nin the `userIds` field\n",
        "type": "string",
        "enum": [
          "private",
          "public",
          "shared"
        ]
      }
    }
  },
  "SendGridCredential": {
    "type": "object",
    "properties": {
      "hash": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "status": {
        "description": "The credential status",
        "type": "string",
        "enum": [
          "active",
          "deactivated"
        ]
      },
      "deactivationTime": {
        "description": "The time when the credential was deactivated",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "apiKey": {
        "type": "string",
        "description": "The SendGrid api key",
        "example": "SO.WFbRlSWUQJSb40eny4RuZQ.7liHLZ4l1jaPCgbu02b-aGH-bo4RB8z9fK3aUd1heeL"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    },
    "description": "SendGrid Credential",
    "required": [
      "apiKey"
    ]
  },
  "SESCredential": {
    "type": "object",
    "properties": {
      "hash": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "status": {
        "description": "The credential status",
        "type": "string",
        "enum": [
          "active",
          "deactivated"
        ]
      },
      "deactivationTime": {
        "description": "The time when the credential was deactivated",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "key": {
        "type": "string",
        "description": "The AWS access key ID",
        "example": "BWITYO4UARGDLMFY6UDP"
      },
      "secret": {
        "type": "string",
        "description": "The AWS secret access key",
        "example": "8D34yYHOK9+yM7pDnNUO3UTO/5b8Wy/PGNyzTRmG"
      },
      "region": {
        "type": "string",
        "description": "The AWS region name",
        "example": "us-west-2"
      },
      "configurationSetName": {
        "type": "string",
        "description": "The configuration set name which will be used durring email sending",
        "example": "SpecialConfigurationSet"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    },
    "description": "Amazon simple email service (AWS SES) credential",
    "required": [
      "key",
      "secret",
      "region"
    ]
  },
  "Session": {
    "type": "object",
    "required": [
      "permissions"
    ],
    "properties": {
      "id": {
        "description": "The session identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "token": {
        "description": "The session's token used for authentication",
        "type": "string"
      },
      "permissions": {
        "description": "The session's permissions. See the format in example",
        "allOf": [
          {
            "$ref": "#/components/schemas/AclPermissions"
          }
        ]
      },
      "userId": {
        "description": "The user identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "createdTime": {
        "description": "Session created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Session updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "expiredTime": {
        "description": "Session expired time. Defaults to one hour",
        "type": "string",
        "format": "date-time"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "Signin": {
    "type": "object",
    "required": [
      "email",
      "password"
    ],
    "properties": {
      "email": {
        "description": "Email",
        "type": "string",
        "example": "email@example.com"
      },
      "password": {
        "description": "Password",
        "type": "string",
        "format": "password"
      },
      "oneTimePassword": {
        "description": "One time password for 2 factor authentication. Should contain digits only.",
        "type": "string",
        "pattern": "^[0-9]{6}$",
        "example": "123456"
      },
      "expiredTime": {
        "description": "Session expired time. Defaults to one hour",
        "type": "string",
        "format": "date-time"
      }
    }
  },
  "Signup": {
    "type": "object",
    "required": [
      "email",
      "company",
      "firstName",
      "lastName",
      "businessPhone",
      "password",
      "website"
    ],
    "properties": {
      "email": {
        "description": "The user email",
        "type": "string",
        "format": "email",
        "maxLength": 100
      },
      "company": {
        "description": "The user company name",
        "type": "string"
      },
      "firstName": {
        "description": "The user first name",
        "type": "string"
      },
      "lastName": {
        "description": "The user last name",
        "type": "string"
      },
      "businessPhone": {
        "description": "The user business phone number",
        "type": "string"
      },
      "password": {
        "description": "The user password",
        "type": "string",
        "format": "password"
      },
      "website": {
        "description": "The user website address",
        "type": "string"
      },
      "country": {
        "description": "The user country (ISO Alpha-2 code)",
        "type": "string",
        "pattern": "^[A-Z]{2}$",
        "default": "US"
      },
      "reportingCurrency": {
        "description": "The currency to be set only once which will be used for conversion in reports",
        "type": "string",
        "pattern": "^[A-Z]{3}$",
        "default": "USD"
      }
    }
  },
  "Status": {
    "type": "object",
    "properties": {
      "status": {
        "description": "The API status. If everything is ok - value is 'ok'",
        "type": "string",
        "readOnly": true,
        "enum": [
          "ok"
        ]
      },
      "time": {
        "description": "Current time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      }
    }
  },
  "GatewayAccountTimeline": {
    "type": "object",
    "properties": {
      "id": {
        "description": "The Timeline message identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "type": {
        "description": "Timeline message type",
        "type": "string",
        "readOnly": true,
        "enum": [
          "gateway-account-created",
          "gateway-account-changed",
          "gateway-account-enabled",
          "gateway-account-disabled",
          "gateway-account-down",
          "gateway-account-up",
          "gateway-account-closed"
        ]
      },
      "triggeredBy": {
        "description": "Shows who or what triggered the Timeline message",
        "type": "string",
        "readOnly": true,
        "enum": [
          "rebilly",
          "app",
          "direct-api"
        ]
      },
      "message": {
        "description": "The message that describes the message details",
        "type": "string"
      },
      "extraData": {
        "$ref": "#/components/schemas/TimelineExtraData"
      },
      "occurredTime": {
        "description": "Timeline message time",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "ApiTracking": {
    "type": "object",
    "description": "Tracking API Requests.",
    "readOnly": true,
    "properties": {
      "id": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "status": {
        "type": "integer",
        "description": "HTTP response code"
      },
      "url": {
        "type": "string",
        "description": "API request address"
      },
      "route": {
        "type": "string",
        "description": "API request route",
        "example": "/v2.1/customers/{param}"
      },
      "method": {
        "type": "string",
        "description": "HTTP method",
        "enum": [
          "HEAD",
          "GET",
          "POST",
          "PUT",
          "DELETE",
          "PATCH"
        ]
      },
      "request": {
        "type": "string",
        "description": "Request JSON-string"
      },
      "response": {
        "type": "string",
        "description": "Response JSON-string"
      },
      "requestHeaders": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "example": {
          "User-Agent": "Mozilla/5.0",
          "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
        }
      },
      "responseHeaders": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "example": {
          "Rate-Limit-Limit": 5000,
          "Rate-Limit-Remaining": 4999,
          "Rate-Limit-Reset": "Mon, 31 Jul 2017 04:16:00 +0000"
        }
      },
      "user": {
        "type": "object",
        "description": "The user who has made a request",
        "readOnly": true,
        "properties": {
          "userId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "apiKeyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "email": {
            "description": "The user email",
            "type": "string",
            "format": "email"
          },
          "firstName": {
            "description": "The user first name",
            "type": "string"
          },
          "lastName": {
            "description": "The user last name",
            "type": "string"
          },
          "ipAddress": {
            "type": "string",
            "description": "Client IP address",
            "format": "ipv4"
          },
          "userAgent": {
            "description": "The software that is acting on behalf of a user",
            "type": "string"
          },
          "fingerprint": {
            "description": "The user device fingerprint hash",
            "type": "string"
          },
          "isSupport": {
            "description": "If user from support",
            "type": "boolean"
          }
        }
      },
      "relatedIds": {
        "type": "object",
        "description": "The IDs of related resources",
        "readOnly": true,
        "properties": {
          "customerId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "transactionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "tokenId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          }
        }
      },
      "duration": {
        "type": "integer",
        "description": "Request duration in milliseconds"
      },
      "createdTime": {
        "description": "The log created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "SubscriptionTracking": {
    "type": "object",
    "description": "Tracking subscription log",
    "readOnly": true,
    "properties": {
      "id": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "subscriptionId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "invoiceItemId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "result": {
        "type": "string",
        "description": "Subscription's result",
        "enum": [
          "created",
          "postponed",
          "stopped",
          "error"
        ]
      },
      "message": {
        "type": "string",
        "description": "It contains the transaction number and renewal time"
      },
      "createdTime": {
        "description": "The log created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "WebhookTracking": {
    "type": "object",
    "description": "Webhook Tracking Requests.",
    "readOnly": true,
    "properties": {
      "id": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "eventType": {
        "$ref": "#/components/schemas/EventType"
      },
      "url": {
        "type": "string",
        "description": "Url where webhook was sent"
      },
      "method": {
        "type": "string",
        "description": "HTTP method which was used to send webhook",
        "example": "POST"
      },
      "headers": {
        "type": "object",
        "description": "HTTP headers which were used to send webhook",
        "additionalProperties": {
          "type": "string"
        },
        "example": {
          "My-Header": "Cool-Value"
        }
      },
      "responseCode": {
        "type": "integer",
        "description": "HTTP code response"
      },
      "responseBody": {
        "type": "string",
        "description": "Response body received"
      },
      "payload": {
        "type": "string",
        "description": "Webhook's payload"
      },
      "source": {
        "type": "string",
        "description": "The Webhook's source",
        "enum": [
          "webhooks",
          "rules"
        ]
      },
      "attempt": {
        "type": "integer",
        "description": "The Webhook's attempt number"
      },
      "sentTime": {
        "description": "Sent time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "initiatedTime": {
        "description": "Initiated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "createdTime": {
        "description": "The log created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "UpdatePassword": {
    "type": "object",
    "required": [
      "currentPassword",
      "newPassword"
    ],
    "properties": {
      "currentPassword": {
        "description": "Current user's password - used when requesting password change",
        "type": "string",
        "format": "password"
      },
      "newPassword": {
        "description": "New user's password - used when requesting password change",
        "type": "string",
        "format": "password"
      }
    }
  },
  "User": {
    "type": "object",
    "required": [
      "email",
      "firstName",
      "lastName"
    ],
    "properties": {
      "id": {
        "description": "The user identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "email": {
        "description": "The user email",
        "type": "string",
        "format": "email",
        "maxLength": 100
      },
      "firstName": {
        "description": "User's first name",
        "type": "string"
      },
      "lastName": {
        "description": "User's last name",
        "type": "string"
      },
      "businessPhone": {
        "description": "The user business phone number",
        "type": "string"
      },
      "mobilePhone": {
        "description": "The user mobile phone number",
        "type": "string"
      },
      "password": {
        "description": "User's password. If not provided, password reset email will be sent",
        "type": "string",
        "format": "password"
      },
      "permissions": {
        "description": "The user's permissions. See the format in example",
        "allOf": [
          {
            "$ref": "#/components/schemas/AclPermissions"
          }
        ]
      },
      "createdTime": {
        "description": "The user created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "The user updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "loginTime": {
        "description": "The user last login time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "reportingCurrency": {
        "description": "The user's ISO Alpha-3 code used for reports",
        "readOnly": true,
        "type": "string"
      },
      "availableCurrencies": {
        "type": "array",
        "description": "An array of reporting currencies enabled for the merchant",
        "readOnly": true,
        "items": {
          "type": "string"
        }
      },
      "totpRequired": {
        "description": "The user setting of two-factor authentification",
        "type": "boolean"
      },
      "totpSecret": {
        "description": "The user TOTP key for authentification app (if TOTP enabled)",
        "type": "string"
      },
      "totpUrl": {
        "description": "The user link to QR-code for TOTP authentification app (if TOTP enabled)",
        "type": "string",
        "format": "url"
      },
      "status": {
        "description": "The user status",
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "pending-confirmation"
        ],
        "readOnly": true
      },
      "country": {
        "description": "The user country setting - two letter code",
        "type": "string"
      },
      "preferences": {
        "description": "User preferences like timezone, language and many more. This is an object with custom properties.",
        "type": "object"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SelfLink"
        }
      }
    }
  },
  "WebhookAuthorization": {
    "type": "object",
    "discriminator": {
      "propertyName": "type",
      "mapping": {
        "none": "#/components/schemas/WebhookAuthorizationNone"
      }
    },
    "properties": {
      "type": {
        "type": "string",
        "description": "The authorization type",
        "enum": [
          "none",
          "basic",
          "digest",
          "oauth1"
        ],
        "default": "none"
      }
    },
    "required": [
      "type"
    ]
  },
  "basic": {
    "allOf": [
      {
        "$ref": "#/components/schemas/WebhookAuthorization"
      },
      {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        },
        "required": [
          "username",
          "password"
        ]
      }
    ]
  },
  "digest": {
    "allOf": [
      {
        "$ref": "#/components/schemas/WebhookAuthorization"
      },
      {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        },
        "required": [
          "username",
          "password"
        ]
      }
    ]
  },
  "oauth1": {
    "allOf": [
      {
        "$ref": "#/components/schemas/WebhookAuthorization"
      },
      {
        "type": "object",
        "properties": {
          "consumerKey": {
            "type": "string"
          },
          "consumerSecret": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "tokenSecret": {
            "type": "string"
          }
        },
        "required": [
          "consumerKey",
          "consumerSecret",
          "token",
          "tokenSecret"
        ]
      }
    ]
  },
  "WebhookAuthorizationNone": {
    "allOf": [
      {
        "$ref": "#/components/schemas/WebhookAuthorization"
      }
    ]
  },
  "WebhookCredential": {
    "type": "object",
    "properties": {
      "hash": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "status": {
        "description": "The credential status",
        "type": "string",
        "enum": [
          "active",
          "deactivated"
        ]
      },
      "deactivationTime": {
        "description": "The time when the credential was deactivated",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "host": {
        "type": "string",
        "description": "The host name"
      },
      "auth": {
        "$ref": "#/components/schemas/WebhookAuthorization"
      }
    },
    "description": "Webhook credential",
    "required": [
      "host"
    ]
  },
  "Website": {
    "type": "object",
    "required": [
      "organizationId",
      "name",
      "url",
      "servicePhone",
      "serviceEmail"
    ],
    "properties": {
      "id": {
        "description": "The website identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "organizationId": {
        "description": "Organization ID",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "name": {
        "description": "The website's name",
        "type": "string"
      },
      "url": {
        "description": "The website's domain address",
        "type": "string"
      },
      "servicePhone": {
        "description": "The website's customer service phone number",
        "type": "string"
      },
      "serviceEmail": {
        "description": "The website's customer service email address",
        "type": "string",
        "format": "email"
      },
      "createdTime": {
        "description": "Website created time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Website updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "customFields": {
        "$ref": "#/components/schemas/ResourceCustomFields"
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SelfLink"
            },
            {
              "$ref": "#/components/schemas/NotesLink"
            },
            {
              "$ref": "#/components/schemas/OrganizationLink"
            }
          ]
        }
      }
    }
  },
  "APILogSummary": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "The number of requests per each method.",
          "readOnly": true,
          "properties": {
            "route": {
              "type": "string",
              "description": "Route string pattern"
            },
            "total": {
              "type": "integer",
              "description": "Total count of requests"
            },
            "get": {
              "type": "integer",
              "description": "Count of GET requests."
            },
            "post": {
              "type": "integer",
              "description": "Count of POST requests."
            },
            "put": {
              "type": "integer",
              "description": "Count of PUT requests."
            },
            "patch": {
              "type": "integer",
              "description": "Count of PATCH requests."
            },
            "delete": {
              "type": "integer",
              "description": "Count of DELETE requests."
            },
            "head": {
              "type": "integer",
              "description": "Count of HEAD requests."
            },
            "options": {
              "type": "integer",
              "description": "Count of OPTIONS requests."
            }
          }
        }
      }
    }
  },
  "CumulativeSubscriptions": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "Contains an aggregation",
          "readOnly": true,
          "properties": {
            "aggregationValue": {
              "type": "string",
              "description": "Date in format YYYY-MM (monthly aggregation) or YYYY-MM-DD (daily aggregation)"
            },
            "newCount": {
              "type": "integer",
              "description": "Number of new subscriptions within the aggregation"
            },
            "canceledCount": {
              "type": "integer",
              "description": "Number of canceled subscriptions within the aggregation"
            },
            "cumulativeCount": {
              "type": "integer",
              "description": "Number of cumulative subscriptions from the previous aggregation +\nnumber of new subscriptions - number of canceled subscriptions within the aggregation.\n"
            }
          }
        }
      }
    }
  },
  "CumulativeSubscriptionsPlans": {
    "type": "array",
    "items": {
      "type": "object",
      "description": "Contains an aggregation",
      "readOnly": true,
      "properties": {
        "day": {
          "type": "string",
          "description": "Date in format YYYY-MM-DD"
        },
        "month": {
          "type": "integer",
          "description": "Date in format YYYY-MM"
        },
        "planId": {
          "type": "integer",
          "description": "Plan id for which the aggregation is given"
        },
        "newCount": {
          "type": "integer",
          "description": "Number of new subscriptions within the aggregation"
        },
        "canceledCount": {
          "type": "integer",
          "description": "Number of canceled subscriptions within the aggregation"
        },
        "netCount": {
          "type": "integer",
          "description": "newCount - canceledCount"
        },
        "cumulativeCount": {
          "type": "integer",
          "description": "Number of cumulative subscriptions from the previous aggregation +\nnumber of new subscriptions - number of canceled subscriptions within the aggregation.\n"
        }
      }
    }
  },
  "CustomerInformation": {
    "type": "object",
    "properties": {
      "currency": {
        "description": "Currency (three letter ISO 4217 alpha code) (eg USD, EUR)",
        "readOnly": true,
        "type": "string"
      },
      "refundsAmount": {
        "description": "Sum of all refunded transactions",
        "readOnly": true,
        "type": "number",
        "format": "double"
      },
      "revenueAmount": {
        "description": "Sum of overall sales and captures that were approved",
        "readOnly": true,
        "type": "number",
        "format": "double"
      },
      "disputesAmount": {
        "description": "Sum of all disputed transactions",
        "readOnly": true,
        "type": "number",
        "format": "double"
      }
    }
  },
  "DashboardResponse": {
    "type": "array",
    "items": {
      "type": "object",
      "properties": {
        "metric": {
          "type": "string",
          "description": "Metric type",
          "enum": [
            "approvalRate",
            "salesCount",
            "salesValue",
            "refundsValue"
          ]
        },
        "humanName": {
          "type": "string",
          "description": "Metric name to display"
        },
        "increaseIsGood": {
          "type": "boolean",
          "description": "True when the higher value means a better performance thus positive for a merchant, false otherwise"
        },
        "segments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Segment name"
              },
              "value": {
                "type": "number",
                "format": "double",
                "description": "Segment value for the given date range"
              },
              "previousValue": {
                "type": "number",
                "format": "double",
                "description": "Segment value for the previous date range (relative to the given date range)"
              },
              "humanValue": {
                "type": "string",
                "description": "Human readable segment value (formatted with a currency sign)"
              },
              "changeRatio": {
                "type": "number",
                "format": "double",
                "description": "Ratio of current value per previous value null is infinity"
              },
              "humanChangeRatio": {
                "type": "string",
                "description": "Human readable change ratio (formatted percentage with a \"%\" sign), null is infinity"
              },
              "timeseries": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Chart data",
                  "readOnly": true,
                  "properties": {
                    "date": {
                      "type": "string",
                      "description": "Entry date-time"
                    },
                    "value": {
                      "type": "number",
                      "description": "Entry value"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "DataExport": {
    "type": "object",
    "discriminator": {
      "propertyName": "resource"
    },
    "required": [
      "name",
      "format",
      "resource"
    ],
    "properties": {
      "id": {
        "description": "The export identifier string",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceId"
          }
        ]
      },
      "name": {
        "description": "Export name",
        "type": "string"
      },
      "resource": {
        "description": "The type of resource being exported (eg., transactions).",
        "type": "string",
        "enum": [
          "transactions",
          "customers",
          "subscriptions"
        ]
      },
      "format": {
        "description": "Export result format",
        "type": "string",
        "enum": [
          "csv",
          "json",
          "json-api",
          "xml"
        ]
      },
      "arguments": {
        "description": "Export request arguments that can be passed to filter and/or sort the result set. See the [arguments guide](https://docs-reconciliation.rebilly.com/getting-started/arguments) for more options and examples.",
        "type": "object",
        "properties": {
          "filter": {
            "description": "The collection items filter requires a special format. Use \",\" for multiple allowed values. Use \";\" for multiple fields.",
            "type": "string"
          },
          "sort": {
            "type": "string",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
          },
          "q": {
            "type": "string",
            "description": "The partial search of the text fields."
          }
        }
      },
      "dateRange": {
        "type": "object",
        "description": "The date range (can be in relative formats).  If omitted, all time will be included. See the [Date Range guide](https://docs-reconciliation.rebilly.com/getting-started/date-range) for more options and examples.",
        "properties": {
          "start": {
            "type": "string",
            "description": "Any valid datetime arguments including [relative datetime arguments](http://php.net/manual/en/datetime.formats.php).",
            "example": "yesterday"
          },
          "end": {
            "type": "string",
            "description": "Any valid datetime arguments including [relative datetime arguments](http://php.net/manual/en/datetime.formats.php).",
            "example": "today"
          },
          "field": {
            "type": "string",
            "description": "The field to apply date range to."
          }
        },
        "required": [
          "start",
          "end"
        ]
      },
      "emailNotification": {
        "description": "List of emails to be notified when export is completed",
        "type": "array",
        "items": {
          "type": "string",
          "format": "email"
        }
      },
      "fields": {
        "description": "List of fields to include in the export.  See supporting documentation for more info.  If omitted, default fields will be included.",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "recurring": {
        "description": "Exports can reoccur according to your own schedule",
        "type": "object",
        "required": [
          "instruction"
        ],
        "properties": {
          "instruction": {
            "type": "string",
            "description": "RRule RFC 5545 formatted string used for recurring exports"
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the first recurring scheduled export will occur. Defaults to now."
          }
        }
      },
      "userId": {
        "description": "The ID of the User who requested the data export",
        "readOnly": true,
        "type": "string"
      },
      "recordCount": {
        "description": "The number of records in the export (excluding the header row)",
        "readOnly": true,
        "type": "integer"
      },
      "scheduledTime": {
        "description": "The date and time this data export is scheduled to generate a file",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "createdTime": {
        "description": "The time the data export was requested",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "updatedTime": {
        "description": "Data export updated time",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerTimestamp"
          }
        ]
      },
      "status": {
        "description": "Status of export request",
        "readOnly": true,
        "type": "string",
        "enum": [
          "pending",
          "queued",
          "processing",
          "completed"
        ]
      },
      "_links": {
        "type": "array",
        "description": "The links related to resource",
        "readOnly": true,
        "minItems": 1,
        "maxItems": 4,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/LinkSelf"
            },
            {
              "$ref": "#/components/schemas/LinkUser"
            },
            {
              "$ref": "#/components/schemas/LinkFileDownload"
            },
            {
              "$ref": "#/components/schemas/LinkSignedLink"
            }
          ]
        }
      }
    }
  },
  "customers": {
    "description": "Customers resource type to export",
    "allOf": [
      {
        "$ref": "#/components/schemas/DataExport"
      },
      {
        "type": "object",
        "properties": {
          "dateRange": {
            "type": "object",
            "properties": {
              "field": {
                "type": "string",
                "default": "createdTime",
                "example": "createdTime"
              }
            }
          }
        }
      }
    ]
  },
  "subscriptions": {
    "description": "Subscriptions resource type to export",
    "allOf": [
      {
        "$ref": "#/components/schemas/DataExport"
      },
      {
        "type": "object",
        "properties": {
          "dateRange": {
            "type": "object",
            "properties": {
              "field": {
                "type": "string",
                "default": "createdTime",
                "example": "createdTime"
              }
            }
          }
        }
      }
    ]
  },
  "transactions": {
    "description": "Transactions resource type to export",
    "allOf": [
      {
        "$ref": "#/components/schemas/DataExport"
      },
      {
        "type": "object",
        "properties": {
          "dateRange": {
            "type": "object",
            "properties": {
              "field": {
                "type": "string",
                "default": "processedTime",
                "example": "processedTime"
              }
            }
          }
        }
      }
    ]
  },
  "DccMarkup": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "Contains an aggregation",
          "readOnly": true,
          "properties": {
            "aggregationValue": {
              "type": "string",
              "description": "Value by which the report provides aggregated data.\nThe date values are displayed as following: Day: YYYY-MM-DD; Month: YYYY-MM.\n"
            },
            "selectedCount": {
              "type": "integer",
              "description": "Number of selected offers in the aggregation"
            },
            "selectedSum": {
              "type": "number",
              "format": "double",
              "description": "Amount of selected offers in the aggregation"
            },
            "rejectedCount": {
              "type": "integer",
              "description": "Number of rejected offers in the aggregation"
            },
            "rejectedSum": {
              "type": "number",
              "format": "double",
              "description": "Amount of rejected offers in the aggregation"
            },
            "unknownCount": {
              "type": "integer",
              "description": "Number of offers in the aggregation which weren't selected nor rejected"
            },
            "unknownSum": {
              "type": "number",
              "format": "double",
              "description": "Amount of offers in the aggregation which weren't selected nor rejected"
            }
          }
        }
      }
    }
  },
  "FutureRenewals": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "Contains an aggregation",
          "readOnly": true,
          "properties": {
            "date": {
              "type": "string",
              "description": "Date in format YYYY-MM"
            },
            "sum": {
              "type": "number",
              "format": "double",
              "description": "Amount of future renewals in user's reporting currency"
            },
            "plansCount": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Plan within the aggregation",
                "readOnly": true,
                "properties": {
                  "planId": {
                    "description": "Plan identifier",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceId"
                      }
                    ]
                  },
                  "count": {
                    "type": "integer",
                    "description": "Amount of plan's future renewals"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "HistogramData": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "Contains date-time and value",
          "readOnly": true,
          "properties": {
            "date": {
              "type": "string",
              "description": "Entry date-time"
            },
            "value": {
              "type": "number",
              "description": "Entry value"
            }
          }
        }
      }
    }
  },
  "LinkFileDownload": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "download"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "LinkSelf": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "self"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "LinkSignedLink": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "signedLink"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "LinkUser": {
    "type": "object",
    "allOf": [
      {
        "$ref": "#/components/schemas/Link"
      }
    ],
    "properties": {
      "rel": {
        "description": "The link type",
        "type": "string",
        "enum": [
          "user"
        ]
      }
    },
    "required": [
      "rel"
    ]
  },
  "RenewalSales": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "Contains an aggregation",
          "readOnly": true,
          "properties": {
            "aggregationValue": {
              "type": "string",
              "description": "Date in format YYYY-MM"
            },
            "newSales": {
              "type": "number",
              "format": "double",
              "description": "Amount of new sales"
            },
            "newRefunds": {
              "type": "number",
              "format": "double",
              "description": "Amount of new refunds"
            },
            "renewalSales": {
              "type": "number",
              "format": "double",
              "description": "Amount of renewal sales"
            },
            "renewalRefunds": {
              "type": "number",
              "format": "double",
              "description": "Amount of renewal refunds"
            }
          }
        }
      }
    }
  },
  "ReportDisputeDelays": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "aggregationFieldValue": {
              "description": "Selected aggregation field value (defined by query). It can be, for example, website or country.\nYou define it in aggregationField param in query.\n",
              "type": "string"
            },
            "25th": {
              "description": "25th percentile",
              "type": "integer"
            },
            "50th": {
              "description": "50th percentile",
              "type": "integer"
            },
            "75th": {
              "description": "75th percentile",
              "type": "integer"
            }
          }
        }
      }
    }
  },
  "ReportDisputes": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "aggregationValue": {
              "description": "Selected aggregation field value (defined by query). It can be, for example, website or country.\nYou define it in aggregationField param in query.\n",
              "type": "string"
            },
            "countVisa": {
              "description": "Disputes count on Visa",
              "type": "integer"
            },
            "ratioCountVisa": {
              "description": "Disputes count / Settled transactions count",
              "type": "number",
              "format": "double"
            },
            "ratioAmountVisa": {
              "description": "Disputes amount / Settled transactions amount",
              "type": "number",
              "format": "double"
            },
            "countMastercard": {
              "description": "Disputes count on Mastercard",
              "type": "integer"
            },
            "ratioCountMastercard": {
              "description": "Disputes count / Settled transactions count",
              "type": "number",
              "format": "double"
            },
            "ratioAmountMastercard": {
              "description": "Disputes amount / Settled transactions amount",
              "type": "number",
              "format": "double"
            }
          }
        }
      }
    }
  },
  "ReportEventsTriggeredSummary": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "eventName": {
              "description": "System event name.\n",
              "type": "string",
              "enum": [
                "dispute-created",
                "gateway-account-requested",
                "transaction-processed",
                "subscription-canceled",
                "subscription-renewed",
                "payment-card-expired",
                "payment-declined",
                "transaction-process-requested",
                "risk-score-changed"
              ]
            },
            "count": {
              "description": "Count of event triggered",
              "type": "integer"
            }
          }
        }
      }
    }
  },
  "ReportPaymentRetry": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "readOnly": true,
        "items": {
          "type": "object",
          "properties": {
            "retryNumber": {
              "description": "Retry attempts number",
              "type": "integer"
            },
            "attempts": {
              "description": "Attempts count",
              "type": "integer"
            },
            "successfulTransactions": {
              "description": "Successful transactions count",
              "type": "integer"
            },
            "successRate": {
              "description": "Successful transactions ratio",
              "type": "number",
              "format": "double"
            }
          }
        }
      }
    }
  },
  "ReportPaymentsSuccessfulRetries": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "Contains a report of payments successful retries throughput",
          "readOnly": true,
          "properties": {
            "declineCode": {
              "type": "string",
              "description": "Decline reason code"
            },
            "declineMessage": {
              "type": "string",
              "description": "Decline reason message"
            },
            "successfulRatio": {
              "type": "number",
              "format": "double",
              "description": "Successful ratio"
            }
          }
        }
      }
    }
  },
  "ReportRetentionPercentage": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "Contains an aggregation",
          "readOnly": true,
          "properties": {
            "aggregationValue": {
              "type": "string",
              "description": "Value by which the report provides retention periods and percentages.\nThe date values are displayed as following:\nDay: YYYY-MM-DD;\nMonth: YYYY-MM;\nQuarter: YYYY-MM/YYYY-MM;\nYear: YYYY.\n"
            },
            "subscriptionsCount": {
              "type": "integer",
              "description": "Number of subscriptions created within the aggregation"
            },
            "periods": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "The period for the given aggregation",
                "properties": {
                  "period": {
                    "type": "integer",
                    "description": "Retention period (0 - first, 1 - second etc) since the beginning boundary of the aggregation\n"
                  },
                  "retentionRatio": {
                    "type": "number",
                    "format": "double",
                    "description": "Ratio % of remaining subcriptions (not canceled) at the moment of retention period\nto all subscriptions created in the aggregation period\n"
                  },
                  "canceledSubscriptionsCount": {
                    "type": "integer",
                    "description": "Number of canceled subscriptions within the given retention period"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "ReportRetentionValue": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "Contains an aggregation",
          "readOnly": true,
          "properties": {
            "aggregationValue": {
              "type": "string",
              "description": "Value by which the report provides retention periods and values. The date values are displayed as following:\nDay: YYYY-MM-DD;\nMonth: YYYY-MM;\nQuarter: YYYY-MM/YYYY-MM;\nYear: YYYY.\n"
            },
            "customersCount": {
              "type": "integer",
              "description": "Number of customers within the aggregation with their first payment"
            },
            "periods": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "The period for the given aggregation",
                "properties": {
                  "period": {
                    "type": "integer",
                    "description": "Retention period (0 - first, 1 - second etc) since the beginning boundary of the aggregation\n"
                  },
                  "retentionAverage": {
                    "type": "number",
                    "format": "double",
                    "description": "Summary amount of all transactions for all periods up to the current one\ndivided by the aggregation customers number\n"
                  },
                  "transactionsCount": {
                    "type": "integer",
                    "description": "The number of transactions happened in the retention period (e.g. in 3 rebills)"
                  },
                  "transactionsValue": {
                    "type": "number",
                    "format": "double",
                    "description": "The amount of transactions (income transactions - loss transactions)"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "ReportRulesMatchedSummary": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "rule": {
              "description": "Rule matched name.\n",
              "type": "string"
            },
            "count": {
              "description": "Count of matched rule.",
              "type": "integer"
            },
            "approvalRate": {
              "description": "Transaction approval rate by rule.",
              "type": "number",
              "format": "double"
            }
          }
        }
      }
    }
  },
  "ReportStatistics": {
    "type": "object",
    "properties": {
      "revenue": {
        "description": "Revenue in last 24 hours",
        "type": "number",
        "format": "double"
      },
      "revenueGrowthPercentage": {
        "description": "Revenue growth (in percents) in last 24 hours (against previous 24 hours)",
        "type": "number",
        "format": "double"
      },
      "customers": {
        "description": "New customers count in last 24 hours",
        "type": "integer"
      },
      "customersGrowthPercentage": {
        "description": "Customers count growth (in percents) in last 24 hours (against previous 24 hours)",
        "type": "number",
        "format": "double"
      },
      "cancels": {
        "description": "Cancels count in last 24 hours",
        "type": "integer"
      },
      "cancelsGrowthPercentage": {
        "description": "Cancels count growth (in percents) in last 24 hours (against previous 24 hours)",
        "type": "number",
        "format": "double"
      },
      "refunds": {
        "description": "Refunds count",
        "type": "integer"
      },
      "refundsGrowthPercentage": {
        "description": "Refunds count growth (in percents) in last 24 hours (against previous 24 hours)",
        "type": "number",
        "format": "double"
      }
    }
  },
  "ReportTransactions": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "readOnly": true,
        "items": {
          "type": "object",
          "properties": {
            "aggregationFieldValue": {
              "description": "Selected aggregation field value",
              "type": "string"
            },
            "authApprovedThroughput": {
              "description": "Approved auth transactions to all transactions percentage",
              "type": "integer"
            },
            "approvedThroughput": {
              "description": "Approved sale transactions to all transactions percentage",
              "type": "integer"
            },
            "authApprovalCount": {
              "description": "Approved auth transactions count",
              "type": "integer"
            },
            "disputesRate": {
              "description": "Disputed transactions to all approved sale and capture transactions percentage",
              "type": "integer"
            },
            "disputesCount": {
              "description": "Disputed transactions to all approved sale and capture transactions count",
              "type": "integer"
            },
            "salesCount": {
              "description": "Sales count",
              "type": "integer"
            },
            "salesValue": {
              "description": "Sales value",
              "type": "number",
              "format": "double"
            },
            "salesAverage": {
              "description": "Sales average value",
              "type": "number",
              "format": "double"
            },
            "refundsCount": {
              "description": "Refunds count",
              "type": "integer"
            },
            "refundsValue": {
              "description": "Refunds value",
              "type": "number",
              "format": "double"
            },
            "amount": {
              "description": "Amount",
              "type": "number",
              "format": "double"
            },
            "count": {
              "description": "Transactions count",
              "type": "number",
              "format": "double"
            }
          }
        }
      }
    }
  },
  "SubscriptionCancellationReport": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "Contains an aggregation",
          "readOnly": true,
          "properties": {
            "aggregationValue": {
              "type": "string",
              "description": "Aggregation value"
            },
            "count": {
              "type": "integer",
              "description": "Count of canceled subscriptions"
            },
            "averageLength": {
              "type": "number",
              "format": "double",
              "description": "Average length of canceled subscription from start to end within the aggregation in seconds"
            },
            "medianLength": {
              "type": "number",
              "format": "double",
              "description": "Median length of canceled subscription from start to end within the aggregation in seconds"
            }
          }
        }
      }
    }
  },
  "SubscriptionRenewal": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "Contains an aggregation",
          "readOnly": true,
          "properties": {
            "planId": {
              "description": "Plan identifier for which subscriptions are counted",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "allRenewalCount": {
              "type": "integer",
              "description": "All renewed subscriptions number"
            },
            "allDunningCount": {
              "type": "integer",
              "description": "All dunned subscriptions number"
            },
            "abandonedCount": {
              "type": "integer",
              "description": "Abandon subscriptions number"
            },
            "paidRenewalCount": {
              "type": "integer",
              "description": "Number of paid renewed subscriptions. Divide by allRenewalCount to know the renewal success rate"
            },
            "paidDunningCount": {
              "type": "integer",
              "description": "Number of paid dunned subscriptions. Divide by allDunningCount to know the dun success rate"
            },
            "refundedRenewalCount": {
              "type": "integer",
              "description": "Number of paid renewed subscriptions. Divide by allRenewalCount to know the renewal refund rate"
            },
            "refundedDunningCount": {
              "type": "integer",
              "description": "Number of paid dunned subscriptions. Divide by allDunningCount to know the dun refund rate"
            },
            "chargebackRenewalCount": {
              "type": "integer",
              "description": "Number of paid renewed subscriptions. Divide by allRenewalCount to know the renewal chargeback rate"
            },
            "chargebackDunningCount": {
              "type": "integer",
              "description": "Number of paid dunned subscriptions. Divide by allDunningCount to know the dun chargeback rate"
            }
          }
        }
      }
    }
  },
  "SubscriptionRenewalList": {
    "type": "array",
    "items": {
      "type": "object",
      "description": "Contains a renewal data",
      "readOnly": true,
      "properties": {
        "invoiceId": {
          "description": "Invoice ID",
          "allOf": [
            {
              "$ref": "#/components/schemas/ResourceId"
            }
          ]
        },
        "planId": {
          "description": "Plan ID",
          "allOf": [
            {
              "$ref": "#/components/schemas/ResourceId"
            }
          ]
        },
        "subscriptionId": {
          "description": "Subscription ID",
          "allOf": [
            {
              "$ref": "#/components/schemas/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "Customer ID",
          "allOf": [
            {
              "$ref": "#/components/schemas/ResourceId"
            }
          ]
        },
        "paymentId": {
          "description": "Payment ID",
          "allOf": [
            {
              "$ref": "#/components/schemas/ResourceId"
            }
          ]
        },
        "createdTime": {
          "description": "Invoice created time",
          "allOf": [
            {
              "$ref": "#/components/schemas/ServerTimestamp"
            }
          ]
        },
        "issuedTime": {
          "description": "Invoice issuing time",
          "allOf": [
            {
              "$ref": "#/components/schemas/ServerTimestamp"
            }
          ]
        },
        "dueTime": {
          "description": "Invoice due time",
          "allOf": [
            {
              "$ref": "#/components/schemas/ServerTimestamp"
            }
          ]
        },
        "closedTime": {
          "description": "Invoice closing time",
          "allOf": [
            {
              "$ref": "#/components/schemas/ServerTimestamp"
            }
          ]
        },
        "canceledTime": {
          "description": "Invoice canceling time",
          "allOf": [
            {
              "$ref": "#/components/schemas/ServerTimestamp"
            }
          ]
        },
        "recurringAmount": {
          "type": "number",
          "format": "double",
          "description": "Recurring amount of the related plan"
        },
        "recurringCurrency": {
          "type": "string",
          "description": "Recurring currency of the related plan"
        },
        "rebillNumber": {
          "type": "integer",
          "description": "Number of rebill cycle of the renewal"
        },
        "paymentDunningIndex": {
          "type": "integer",
          "description": "Dunning index of the related payment"
        },
        "isInitial": {
          "type": "boolean",
          "description": "Whether it is the first renewal of the subscription or not"
        },
        "refund": {
          "type": "object",
          "description": "Contains data for the related refund transaction if it exists",
          "readOnly": true,
          "properties": {
            "transactionId": {
              "description": "Refund transaction ID",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "transactionCreatedTime": {
              "description": "Refund transaction creation time",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            }
          }
        },
        "chargeback": {
          "type": "object",
          "description": "Contains data for the related chargeback (dispute) if it exists",
          "readOnly": true,
          "properties": {
            "disputeId": {
              "description": "Dispute ID",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "disputeCreatedTime": {
              "description": "Dispute creation time",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            }
          }
        },
        "lead": {
          "type": "object",
          "description": "Related lead source if it exists",
          "readOnly": true,
          "properties": {
            "medium": {
              "type": "string",
              "description": "Medium of the lead source"
            },
            "source": {
              "type": "string",
              "description": "Source of the lead source"
            },
            "campaign": {
              "type": "string",
              "description": "Campaign of the lead source"
            },
            "content": {
              "type": "string",
              "description": "Content of the lead source"
            },
            "term": {
              "type": "string",
              "description": "Term of the lead source"
            },
            "affiliate": {
              "type": "string",
              "description": "Affiliate of the lead source"
            },
            "subAffiliate": {
              "type": "string",
              "description": "SubAffiliate of the lead source"
            },
            "salesAgent": {
              "type": "string",
              "description": "SalesAgent of the lead source"
            },
            "createdTime": {
              "description": "Lead source creation time",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            }
          }
        }
      }
    }
  },
  "SubscriptionSummaryMetrics": {
    "type": "object",
    "properties": {
      "currency": {
        "description": "Currency (three letter ISO 4217 alpha code) (eg USD, EUR)",
        "readOnly": true,
        "type": "string"
      },
      "invoicedAmount": {
        "description": "Sum of all issued, past due, or paid invoices",
        "readOnly": true,
        "type": "number",
        "format": "double"
      },
      "collectedAmount": {
        "description": "Sum of all paid invoices",
        "readOnly": true,
        "type": "number",
        "format": "double"
      },
      "invoiceCount": {
        "description": "Number of issued, past due, or paid invoices",
        "readOnly": true,
        "type": "integer"
      }
    }
  },
  "TimeSeriesTransaction": {
    "type": "object",
    "properties": {
      "data": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "Contains an aggregation",
          "readOnly": true,
          "properties": {
            "date": {
              "type": "string",
              "description": "Date in format YYYY-MM-DD"
            },
            "total": {
              "type": "number",
              "format": "double",
              "description": "Amount or count of all transactions within the aggregation"
            },
            "subaggregates": {
              "type": "object",
              "description": "Subaggregates which have appropriate transactions within the range",
              "properties": {
                "subaggregate": {
                  "type": "string",
                  "description": "Subaggregate identifier"
                },
                "value": {
                  "type": "number",
                  "format": "double",
                  "description": "Amount or count of the subaggregate's transactions within the aggregation"
                }
              }
            }
          }
        }
      }
    }
  },
  "TransactionsPlan": {
    "type": "array",
    "items": {
      "type": "object",
      "description": "Contains transaction's data",
      "readOnly": true,
      "properties": {
        "transactionId": {
          "description": "Transaction's identifier",
          "allOf": [
            {
              "$ref": "#/components/schemas/ResourceId"
            }
          ]
        },
        "websiteId": {
          "description": "Website's identifier",
          "allOf": [
            {
              "$ref": "#/components/schemas/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "Customer's identifier",
          "allOf": [
            {
              "$ref": "#/components/schemas/ResourceId"
            }
          ]
        },
        "customerEmail": {
          "type": "string",
          "description": "Customer's email"
        },
        "planId": {
          "description": "Plan's identifier",
          "allOf": [
            {
              "$ref": "#/components/schemas/ResourceId"
            }
          ]
        },
        "subscriptionId": {
          "description": "Subscription's identifier",
          "allOf": [
            {
              "$ref": "#/components/schemas/ResourceId"
            }
          ]
        },
        "currency": {
          "type": "string",
          "description": "Transaction's currency 3-letters code"
        },
        "amount": {
          "type": "number",
          "format": "double",
          "description": "Transaction's amount"
        },
        "rebillNumber": {
          "type": "integer",
          "description": "Transaction's rebill number"
        },
        "createdTime": {
          "description": "Transaction's created time",
          "allOf": [
            {
              "$ref": "#/components/schemas/ServerTimestamp"
            }
          ]
        },
        "type": {
          "type": "string",
          "description": "Transaction's type",
          "enum": [
            "authorize",
            "capture",
            "credit",
            "refund",
            "sale",
            "void"
          ]
        },
        "result": {
          "type": "string",
          "description": "Transaction's result",
          "enum": [
            "approved",
            "connection-error",
            "declined",
            "never-sent",
            "pending",
            "pending-processor",
            "timeout",
            "unknown"
          ]
        },
        "gatewayTransactionId": {
          "type": "string",
          "description": "Gateway's own transaction identifier"
        },
        "paymentType": {
          "type": "string",
          "enum": [
            "payment_card",
            "ach",
            "paypal",
            "china_unionpay",
            "ochapay"
          ],
          "description": "Type of payment"
        }
      }
    }
  }
}